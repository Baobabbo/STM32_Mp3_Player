
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000093c  0800c758  0800c758  0001c758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .constdata    00001a48  0800d0a0  0800d0a0  0001d0a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0800eae8  0800eae8  0001eae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0800eaf0  0800eaf0  0001eaf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800eaf4  0800eaf4  0001eaf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000000ec  20000000  0800eaf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  000200ec  2**0
                  CONTENTS
  9 .bss          0000670c  200000ec  200000ec  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200067f8  200067f8  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f7fa  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007bf6  00000000  00000000  0005f916  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00014be4  00000000  00000000  0006750c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000014e8  00000000  00000000  0007c0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001e28  00000000  00000000  0007d5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00028d9e  00000000  00000000  0007f400  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001e3ae  00000000  00000000  000a819e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000ce5b9  00000000  00000000  000c654c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      00000b8b  00000000  00000000  00194b05  2**0
                  CONTENTS, READONLY
 21 .arm_vfe_header 00000004  00000000  00000000  00195690  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00004cc8  00000000  00000000  00195694  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ec 	.word	0x200000ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c740 	.word	0x0800c740

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	0800c740 	.word	0x0800c740

080001d0 <MP3D_SPCORP_Symbol_007>:
 80001d0:	6881      	ldr	r1, [r0, #8]
 80001d2:	1a09      	subs	r1, r1, r0
 80001d4:	6840      	ldr	r0, [r0, #4]
 80001d6:	393e      	subs	r1, #62	; 0x3e
 80001d8:	1049      	asrs	r1, r1, #1
 80001da:	f1c0 0010 	rsb	r0, r0, #16
 80001de:	ebc0 1001 	rsb	r0, r0, r1, lsl #4
 80001e2:	4770      	bx	lr

080001e4 <MP3D_SPCORP_Symbol_011>:
 80001e4:	090a      	lsrs	r2, r1, #4
 80001e6:	b510      	push	{r4, lr}
 80001e8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80001ec:	323e      	adds	r2, #62	; 0x3e
 80001ee:	6082      	str	r2, [r0, #8]
 80001f0:	f832 3b02 	ldrh.w	r3, [r2], #2
 80001f4:	f001 010f 	and.w	r1, r1, #15
 80001f8:	ba5b      	rev16	r3, r3
 80001fa:	041b      	lsls	r3, r3, #16
 80001fc:	408b      	lsls	r3, r1
 80001fe:	6003      	str	r3, [r0, #0]
 8000200:	6082      	str	r2, [r0, #8]
 8000202:	f832 4b02 	ldrh.w	r4, [r2], #2
 8000206:	ba64      	rev16	r4, r4
 8000208:	408c      	lsls	r4, r1
 800020a:	4323      	orrs	r3, r4
 800020c:	3910      	subs	r1, #16
 800020e:	6003      	str	r3, [r0, #0]
 8000210:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8000214:	bd10      	pop	{r4, pc}

08000216 <MP3D_SPCORP_Symbol_019>:
 8000216:	0301      	lsls	r1, r0, #12
 8000218:	d507      	bpl.n	800022a <MP3D_SPCORP_Symbol_019+0x14>
 800021a:	f3c0 4141 	ubfx	r1, r0, #17, #2
 800021e:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8000222:	4aff      	ldr	r2, [pc, #1020]	; (8000620 <MP3D_SPCORP_Symbol_010+0x17a>)
 8000224:	4411      	add	r1, r2
 8000226:	390f      	subs	r1, #15
 8000228:	e006      	b.n	8000238 <MP3D_SPCORP_Symbol_019+0x22>
 800022a:	49fd      	ldr	r1, [pc, #1012]	; (8000620 <MP3D_SPCORP_Symbol_010+0x17a>)
 800022c:	ea6f 4250 	mvn.w	r2, r0, lsr #17
 8000230:	312d      	adds	r1, #45	; 0x2d
 8000232:	0792      	lsls	r2, r2, #30
 8000234:	d100      	bne.n	8000238 <MP3D_SPCORP_Symbol_019+0x22>
 8000236:	310f      	adds	r1, #15
 8000238:	b280      	uxth	r0, r0
 800023a:	eb01 3010 	add.w	r0, r1, r0, lsr #12
 800023e:	7800      	ldrb	r0, [r0, #0]
 8000240:	00c0      	lsls	r0, r0, #3
 8000242:	4770      	bx	lr

08000244 <MP3D_SPCORP_Symbol_021>:
 8000244:	f3c0 4141 	ubfx	r1, r0, #17, #2
 8000248:	2901      	cmp	r1, #1
 800024a:	d002      	beq.n	8000252 <MP3D_SPCORP_Symbol_021+0xe>
 800024c:	2903      	cmp	r1, #3
 800024e:	d005      	beq.n	800025c <MP3D_SPCORP_Symbol_021+0x18>
 8000250:	e007      	b.n	8000262 <MP3D_SPCORP_Symbol_021+0x1e>
 8000252:	0300      	lsls	r0, r0, #12
 8000254:	d405      	bmi.n	8000262 <MP3D_SPCORP_Symbol_021+0x1e>
 8000256:	f44f 7010 	mov.w	r0, #576	; 0x240
 800025a:	4770      	bx	lr
 800025c:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8000260:	4770      	bx	lr
 8000262:	f44f 6090 	mov.w	r0, #1152	; 0x480
 8000266:	4770      	bx	lr

08000268 <MP3D_SPCORP_Symbol_018>:
 8000268:	b530      	push	{r4, r5, lr}
 800026a:	4603      	mov	r3, r0
 800026c:	4608      	mov	r0, r1
 800026e:	f413 4f70 	tst.w	r3, #61440	; 0xf000
 8000272:	ea6f 4453 	mvn.w	r4, r3, lsr #17
 8000276:	d01e      	beq.n	80002b6 <MP3D_SPCORP_Symbol_018+0x4e>
 8000278:	4618      	mov	r0, r3
 800027a:	f7ff ffe3 	bl	8000244 <MP3D_SPCORP_Symbol_021>
 800027e:	0945      	lsrs	r5, r0, #5
 8000280:	4618      	mov	r0, r3
 8000282:	f7ff ffc8 	bl	8000216 <MP3D_SPCORP_Symbol_019>
 8000286:	ea4f 00d0 	mov.w	r0, r0, lsr #3
 800028a:	4345      	muls	r5, r0
 800028c:	48e4      	ldr	r0, [pc, #912]	; (8000620 <MP3D_SPCORP_Symbol_010+0x17a>)
 800028e:	f3c3 2181 	ubfx	r1, r3, #10, #2
 8000292:	3058      	adds	r0, #88	; 0x58
 8000294:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8000298:	4368      	muls	r0, r5
 800029a:	ea4f 2090 	mov.w	r0, r0, lsr #10
 800029e:	02d9      	lsls	r1, r3, #11
 80002a0:	d505      	bpl.n	80002ae <MP3D_SPCORP_Symbol_018+0x46>
 80002a2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80002a6:	0319      	lsls	r1, r3, #12
 80002a8:	d501      	bpl.n	80002ae <MP3D_SPCORP_Symbol_018+0x46>
 80002aa:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80002ae:	07a1      	lsls	r1, r4, #30
 80002b0:	d101      	bne.n	80002b6 <MP3D_SPCORP_Symbol_018+0x4e>
 80002b2:	f020 0003 	bic.w	r0, r0, #3
 80002b6:	0599      	lsls	r1, r3, #22
 80002b8:	d502      	bpl.n	80002c0 <MP3D_SPCORP_Symbol_018+0x58>
 80002ba:	07a1      	lsls	r1, r4, #30
 80002bc:	d001      	beq.n	80002c2 <MP3D_SPCORP_Symbol_018+0x5a>
 80002be:	1c40      	adds	r0, r0, #1
 80002c0:	bd30      	pop	{r4, r5, pc}
 80002c2:	1d00      	adds	r0, r0, #4
 80002c4:	bd30      	pop	{r4, r5, pc}

080002c6 <MP3D_SPCORP_Symbol_022>:
 80002c6:	4601      	mov	r1, r0
 80002c8:	201e      	movs	r0, #30
 80002ca:	030a      	lsls	r2, r1, #12
 80002cc:	d400      	bmi.n	80002d0 <MP3D_SPCORP_Symbol_022+0xa>
 80002ce:	200f      	movs	r0, #15
 80002d0:	f3c1 1181 	ubfx	r1, r1, #6, #2
 80002d4:	2903      	cmp	r1, #3
 80002d6:	d100      	bne.n	80002da <MP3D_SPCORP_Symbol_022+0x14>
 80002d8:	1040      	asrs	r0, r0, #1
 80002da:	1c80      	adds	r0, r0, #2
 80002dc:	4770      	bx	lr

080002de <MP3D_SPCORP_Symbol_023>:
 80002de:	4603      	mov	r3, r0
 80002e0:	b500      	push	{lr}
 80002e2:	f3c0 4041 	ubfx	r0, r0, #17, #2
 80002e6:	2801      	cmp	r0, #1
 80002e8:	d901      	bls.n	80002ee <MP3D_SPCORP_Symbol_023+0x10>
 80002ea:	2004      	movs	r0, #4
 80002ec:	e004      	b.n	80002f8 <MP3D_SPCORP_Symbol_023+0x1a>
 80002ee:	4618      	mov	r0, r3
 80002f0:	f7ff ffe9 	bl	80002c6 <MP3D_SPCORP_Symbol_022>
 80002f4:	f100 0004 	add.w	r0, r0, #4
 80002f8:	03d9      	lsls	r1, r3, #15
 80002fa:	d400      	bmi.n	80002fe <MP3D_SPCORP_Symbol_023+0x20>
 80002fc:	1c80      	adds	r0, r0, #2
 80002fe:	bd00      	pop	{pc}

08000300 <MP3D_SPCORP_Symbol_002>:
 8000300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000304:	4604      	mov	r4, r0
 8000306:	6900      	ldr	r0, [r0, #16]
 8000308:	000d      	movs	r5, r1
 800030a:	d023      	beq.n	8000354 <MP3D_SPCORP_Symbol_002+0x54>
 800030c:	69e1      	ldr	r1, [r4, #28]
 800030e:	1b4f      	subs	r7, r1, r5
 8000310:	f7ff ffe5 	bl	80002de <MP3D_SPCORP_Symbol_023>
 8000314:	69e1      	ldr	r1, [r4, #28]
 8000316:	4606      	mov	r6, r0
 8000318:	180a      	adds	r2, r1, r0
 800031a:	69a0      	ldr	r0, [r4, #24]
 800031c:	1a83      	subs	r3, r0, r2
 800031e:	d002      	beq.n	8000326 <MP3D_SPCORP_Symbol_002+0x26>
 8000320:	4620      	mov	r0, r4
 8000322:	f001 f8a7 	bl	8001474 <MP3D_SPCORP_Symbol_012>
 8000326:	69a0      	ldr	r0, [r4, #24]
 8000328:	1b80      	subs	r0, r0, r6
 800032a:	61a0      	str	r0, [r4, #24]
 800032c:	69e0      	ldr	r0, [r4, #28]
 800032e:	1b80      	subs	r0, r0, r6
 8000330:	61e0      	str	r0, [r4, #28]
 8000332:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8000336:	f7ff ff97 	bl	8000268 <MP3D_SPCORP_Symbol_018>
 800033a:	69e1      	ldr	r1, [r4, #28]
 800033c:	4408      	add	r0, r1
 800033e:	61e0      	str	r0, [r4, #28]
 8000340:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000342:	42a8      	cmp	r0, r5
 8000344:	d30d      	bcc.n	8000362 <MP3D_SPCORP_Symbol_002+0x62>
 8000346:	00f9      	lsls	r1, r7, #3
 8000348:	4620      	mov	r0, r4
 800034a:	f7ff ff4b 	bl	80001e4 <MP3D_SPCORP_Symbol_011>
 800034e:	2001      	movs	r0, #1
 8000350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000354:	6961      	ldr	r1, [r4, #20]
 8000356:	f7ff ff87 	bl	8000268 <MP3D_SPCORP_Symbol_018>
 800035a:	69e1      	ldr	r1, [r4, #28]
 800035c:	4408      	add	r0, r1
 800035e:	61e0      	str	r0, [r4, #28]
 8000360:	e7f5      	b.n	800034e <MP3D_SPCORP_Symbol_002+0x4e>
 8000362:	eb07 0105 	add.w	r1, r7, r5
 8000366:	1a08      	subs	r0, r1, r0
 8000368:	d500      	bpl.n	800036c <MP3D_SPCORP_Symbol_002+0x6c>
 800036a:	2000      	movs	r0, #0
 800036c:	00c1      	lsls	r1, r0, #3
 800036e:	4620      	mov	r0, r4
 8000370:	f7ff ff38 	bl	80001e4 <MP3D_SPCORP_Symbol_011>
 8000374:	2000      	movs	r0, #0
 8000376:	e7eb      	b.n	8000350 <MP3D_SPCORP_Symbol_002+0x50>

08000378 <MP3D_SPCORP_Symbol_003>:
 8000378:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800037a:	e733      	b.n	80001e4 <MP3D_SPCORP_Symbol_011>

0800037c <MP3D_SPCORP_Symbol_017>:
 800037c:	b510      	push	{r4, lr}
 800037e:	4604      	mov	r4, r0
 8000380:	4ba8      	ldr	r3, [pc, #672]	; (8000624 <MP3D_SPCORP_Symbol_010+0x17e>)
 8000382:	2000      	movs	r0, #0
 8000384:	ea84 0201 	eor.w	r2, r4, r1
 8000388:	421a      	tst	r2, r3
 800038a:	d10c      	bne.n	80003a6 <MP3D_SPCORP_Symbol_017+0x2a>
 800038c:	2201      	movs	r2, #1
 800038e:	4613      	mov	r3, r2
 8000390:	f414 4f70 	tst.w	r4, #61440	; 0xf000
 8000394:	d000      	beq.n	8000398 <MP3D_SPCORP_Symbol_017+0x1c>
 8000396:	2300      	movs	r3, #0
 8000398:	f411 4f70 	tst.w	r1, #61440	; 0xf000
 800039c:	d000      	beq.n	80003a0 <MP3D_SPCORP_Symbol_017+0x24>
 800039e:	2200      	movs	r2, #0
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d100      	bne.n	80003a6 <MP3D_SPCORP_Symbol_017+0x2a>
 80003a4:	2001      	movs	r0, #1
 80003a6:	bd10      	pop	{r4, pc}

080003a8 <MP3D_SPCORP_Symbol_016>:
 80003a8:	4aa0      	ldr	r2, [pc, #640]	; (800062c <MP3D_SPCORP_Symbol_010+0x186>)
 80003aa:	b510      	push	{r4, lr}
 80003ac:	499e      	ldr	r1, [pc, #632]	; (8000628 <MP3D_SPCORP_Symbol_010+0x182>)
 80003ae:	6011      	str	r1, [r2, #0]
 80003b0:	2100      	movs	r1, #0
 80003b2:	f640 73ff 	movw	r3, #4095	; 0xfff
 80003b6:	ebb3 5f10 	cmp.w	r3, r0, lsr #20
 80003ba:	d004      	beq.n	80003c6 <MP3D_SPCORP_Symbol_016+0x1e>
 80003bc:	f647 73f1 	movw	r3, #32753	; 0x7ff1
 80003c0:	ebb3 4f50 	cmp.w	r3, r0, lsr #17
 80003c4:	d10c      	bne.n	80003e0 <MP3D_SPCORP_Symbol_016+0x38>
 80003c6:	b283      	uxth	r3, r0
 80003c8:	240f      	movs	r4, #15
 80003ca:	ebb4 3f13 	cmp.w	r4, r3, lsr #12
 80003ce:	d007      	beq.n	80003e0 <MP3D_SPCORP_Symbol_016+0x38>
 80003d0:	ea6f 2390 	mvn.w	r3, r0, lsr #10
 80003d4:	079b      	lsls	r3, r3, #30
 80003d6:	d003      	beq.n	80003e0 <MP3D_SPCORP_Symbol_016+0x38>
 80003d8:	0c40      	lsrs	r0, r0, #17
 80003da:	0780      	lsls	r0, r0, #30
 80003dc:	d000      	beq.n	80003e0 <MP3D_SPCORP_Symbol_016+0x38>
 80003de:	2101      	movs	r1, #1
 80003e0:	6810      	ldr	r0, [r2, #0]
 80003e2:	ea01 70e0 	and.w	r0, r1, r0, asr #31
 80003e6:	bd10      	pop	{r4, pc}

080003e8 <MP3D_SPCORP_Symbol_004>:
 80003e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003ec:	4688      	mov	r8, r1
 80003ee:	4604      	mov	r4, r0
 80003f0:	f7ff feee 	bl	80001d0 <MP3D_SPCORP_Symbol_007>
 80003f4:	69a1      	ldr	r1, [r4, #24]
 80003f6:	4606      	mov	r6, r0
 80003f8:	ebc0 07c1 	rsb	r7, r0, r1, lsl #3
 80003fc:	69e1      	ldr	r1, [r4, #28]
 80003fe:	f241 2210 	movw	r2, #4624	; 0x1210
 8000402:	4440      	add	r0, r8
 8000404:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8000408:	4288      	cmp	r0, r1
 800040a:	d333      	bcc.n	8000474 <MP3D_SPCORP_Symbol_004+0x8c>
 800040c:	f06f 0002 	mvn.w	r0, #2
 8000410:	e79e      	b.n	8000350 <MP3D_SPCORP_Symbol_002+0x50>
 8000412:	69e1      	ldr	r1, [r4, #28]
 8000414:	4630      	mov	r0, r6
 8000416:	ebb6 0fc1 	cmp.w	r6, r1, lsl #3
 800041a:	d300      	bcc.n	800041e <MP3D_SPCORP_Symbol_004+0x36>
 800041c:	00c8      	lsls	r0, r1, #3
 800041e:	08c5      	lsrs	r5, r0, #3
 8000420:	69a0      	ldr	r0, [r4, #24]
 8000422:	42a8      	cmp	r0, r5
 8000424:	d800      	bhi.n	8000428 <MP3D_SPCORP_Symbol_004+0x40>
 8000426:	4605      	mov	r5, r0
 8000428:	b18d      	cbz	r5, 800044e <MP3D_SPCORP_Symbol_004+0x66>
 800042a:	1b43      	subs	r3, r0, r5
 800042c:	d004      	beq.n	8000438 <MP3D_SPCORP_Symbol_004+0x50>
 800042e:	462a      	mov	r2, r5
 8000430:	2100      	movs	r1, #0
 8000432:	4620      	mov	r0, r4
 8000434:	f001 f81e 	bl	8001474 <MP3D_SPCORP_Symbol_012>
 8000438:	69e0      	ldr	r0, [r4, #28]
 800043a:	1b40      	subs	r0, r0, r5
 800043c:	61e0      	str	r0, [r4, #28]
 800043e:	69a0      	ldr	r0, [r4, #24]
 8000440:	1b40      	subs	r0, r0, r5
 8000442:	61a0      	str	r0, [r4, #24]
 8000444:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000446:	4269      	negs	r1, r5
 8000448:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800044c:	6260      	str	r0, [r4, #36]	; 0x24
 800044e:	4268      	negs	r0, r5
 8000450:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
 8000454:	69a0      	ldr	r0, [r4, #24]
 8000456:	f104 033e 	add.w	r3, r4, #62	; 0x3e
 800045a:	f2a0 2142 	subw	r1, r0, #578	; 0x242
 800045e:	4418      	add	r0, r3
 8000460:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8000464:	4249      	negs	r1, r1
 8000466:	4798      	blx	r3
 8000468:	69a1      	ldr	r1, [r4, #24]
 800046a:	4401      	add	r1, r0
 800046c:	00c0      	lsls	r0, r0, #3
 800046e:	61a1      	str	r1, [r4, #24]
 8000470:	4407      	add	r7, r0
 8000472:	d00a      	beq.n	800048a <MP3D_SPCORP_Symbol_004+0xa2>
 8000474:	4547      	cmp	r7, r8
 8000476:	dbcc      	blt.n	8000412 <MP3D_SPCORP_Symbol_004+0x2a>
 8000478:	4631      	mov	r1, r6
 800047a:	4620      	mov	r0, r4
 800047c:	f7ff feb2 	bl	80001e4 <MP3D_SPCORP_Symbol_011>
 8000480:	eb06 0008 	add.w	r0, r6, r8
 8000484:	6260      	str	r0, [r4, #36]	; 0x24
 8000486:	2000      	movs	r0, #0
 8000488:	e762      	b.n	8000350 <MP3D_SPCORP_Symbol_002+0x50>
 800048a:	4631      	mov	r1, r6
 800048c:	4620      	mov	r0, r4
 800048e:	f7ff fea9 	bl	80001e4 <MP3D_SPCORP_Symbol_011>
 8000492:	f06f 0001 	mvn.w	r0, #1
 8000496:	e75b      	b.n	8000350 <MP3D_SPCORP_Symbol_002+0x50>

08000498 <MP3D_SPCORP_Symbol_005>:
 8000498:	6802      	ldr	r2, [r0, #0]
 800049a:	408a      	lsls	r2, r1
 800049c:	6002      	str	r2, [r0, #0]
 800049e:	6842      	ldr	r2, [r0, #4]
 80004a0:	4411      	add	r1, r2
 80004a2:	6041      	str	r1, [r0, #4]
 80004a4:	4770      	bx	lr

080004a6 <MP3D_SPCORP_Symbol_010>:
 80004a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004aa:	4604      	mov	r4, r0
 80004ac:	485f      	ldr	r0, [pc, #380]	; (800062c <MP3D_SPCORP_Symbol_010+0x186>)
 80004ae:	2500      	movs	r5, #0
 80004b0:	f04f 0801 	mov.w	r8, #1
 80004b4:	f8c0 8008 	str.w	r8, [r0, #8]
 80004b8:	6801      	ldr	r1, [r0, #0]
 80004ba:	1c49      	adds	r1, r1, #1
 80004bc:	d1fa      	bne.n	80004b4 <MP3D_SPCORP_Symbol_010+0xe>
 80004be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80004c0:	f240 77e1 	movw	r7, #2017	; 0x7e1
 80004c4:	b190      	cbz	r0, 80004ec <MP3D_SPCORP_Symbol_010+0x46>
 80004c6:	f44f 7198 	mov.w	r1, #304	; 0x130
 80004ca:	4620      	mov	r0, r4
 80004cc:	f7ff ff8c 	bl	80003e8 <MP3D_SPCORP_Symbol_004>
 80004d0:	2800      	cmp	r0, #0
 80004d2:	d17e      	bne.n	80005d2 <MP3D_SPCORP_Symbol_010+0x12c>
 80004d4:	6961      	ldr	r1, [r4, #20]
 80004d6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80004d8:	69e0      	ldr	r0, [r4, #28]
 80004da:	42b9      	cmp	r1, r7
 80004dc:	d101      	bne.n	80004e2 <MP3D_SPCORP_Symbol_010+0x3c>
 80004de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80004e0:	4408      	add	r0, r1
 80004e2:	00c1      	lsls	r1, r0, #3
 80004e4:	4620      	mov	r0, r4
 80004e6:	f7ff fe7d 	bl	80001e4 <MP3D_SPCORP_Symbol_011>
 80004ea:	e03b      	b.n	8000564 <MP3D_SPCORP_Symbol_010+0xbe>
 80004ec:	6860      	ldr	r0, [r4, #4]
 80004ee:	4240      	negs	r0, r0
 80004f0:	f000 0107 	and.w	r1, r0, #7
 80004f4:	4620      	mov	r0, r4
 80004f6:	f7ff ffcf 	bl	8000498 <MP3D_SPCORP_Symbol_005>
 80004fa:	4620      	mov	r0, r4
 80004fc:	f7ff fe68 	bl	80001d0 <MP3D_SPCORP_Symbol_007>
 8000500:	69e1      	ldr	r1, [r4, #28]
 8000502:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 8000506:	d901      	bls.n	800050c <MP3D_SPCORP_Symbol_010+0x66>
 8000508:	08c1      	lsrs	r1, r0, #3
 800050a:	61e1      	str	r1, [r4, #28]
 800050c:	6961      	ldr	r1, [r4, #20]
 800050e:	42b9      	cmp	r1, r7
 8000510:	d00f      	beq.n	8000532 <MP3D_SPCORP_Symbol_010+0x8c>
 8000512:	69e1      	ldr	r1, [r4, #28]
 8000514:	ebc0 06c1 	rsb	r6, r0, r1, lsl #3
 8000518:	f640 70f8 	movw	r0, #4088	; 0xff8
 800051c:	4286      	cmp	r6, r0
 800051e:	dd06      	ble.n	800052e <MP3D_SPCORP_Symbol_010+0x88>
 8000520:	4606      	mov	r6, r0
 8000522:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
 8000526:	4620      	mov	r0, r4
 8000528:	f7ff fe5c 	bl	80001e4 <MP3D_SPCORP_Symbol_011>
 800052c:	e002      	b.n	8000534 <MP3D_SPCORP_Symbol_010+0x8e>
 800052e:	2e00      	cmp	r6, #0
 8000530:	da00      	bge.n	8000534 <MP3D_SPCORP_Symbol_010+0x8e>
 8000532:	2600      	movs	r6, #0
 8000534:	17f0      	asrs	r0, r6, #31
 8000536:	eb06 7050 	add.w	r0, r6, r0, lsr #29
 800053a:	10c0      	asrs	r0, r0, #3
 800053c:	f8c4 8020 	str.w	r8, [r4, #32]
 8000540:	6320      	str	r0, [r4, #48]	; 0x30
 8000542:	f506 7198 	add.w	r1, r6, #304	; 0x130
 8000546:	4620      	mov	r0, r4
 8000548:	f7ff ff4e 	bl	80003e8 <MP3D_SPCORP_Symbol_004>
 800054c:	2800      	cmp	r0, #0
 800054e:	d14a      	bne.n	80005e6 <MP3D_SPCORP_Symbol_010+0x140>
 8000550:	6960      	ldr	r0, [r4, #20]
 8000552:	42b8      	cmp	r0, r7
 8000554:	d114      	bne.n	8000580 <MP3D_SPCORP_Symbol_010+0xda>
 8000556:	4620      	mov	r0, r4
 8000558:	f7ff fe3a 	bl	80001d0 <MP3D_SPCORP_Symbol_007>
 800055c:	08c0      	lsrs	r0, r0, #3
 800055e:	69e1      	ldr	r1, [r4, #28]
 8000560:	61e0      	str	r0, [r4, #28]
 8000562:	1a0d      	subs	r5, r1, r0
 8000564:	2110      	movs	r1, #16
 8000566:	4620      	mov	r0, r4
 8000568:	f000 ff26 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 800056c:	4606      	mov	r6, r0
 800056e:	2110      	movs	r1, #16
 8000570:	4620      	mov	r0, r4
 8000572:	f000 ff21 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	f04f 0900 	mov.w	r9, #0
 800057e:	e034      	b.n	80005ea <MP3D_SPCORP_Symbol_010+0x144>
 8000580:	69e0      	ldr	r0, [r4, #28]
 8000582:	e7ae      	b.n	80004e2 <MP3D_SPCORP_Symbol_010+0x3c>
 8000584:	b16d      	cbz	r5, 80005a2 <MP3D_SPCORP_Symbol_010+0xfc>
 8000586:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000588:	1e6d      	subs	r5, r5, #1
 800058a:	1c40      	adds	r0, r0, #1
 800058c:	6320      	str	r0, [r4, #48]	; 0x30
 800058e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000592:	db02      	blt.n	800059a <MP3D_SPCORP_Symbol_010+0xf4>
 8000594:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000598:	e011      	b.n	80005be <MP3D_SPCORP_Symbol_010+0x118>
 800059a:	69e0      	ldr	r0, [r4, #28]
 800059c:	1e40      	subs	r0, r0, #1
 800059e:	61e0      	str	r0, [r4, #28]
 80005a0:	e00e      	b.n	80005c0 <MP3D_SPCORP_Symbol_010+0x11a>
 80005a2:	6960      	ldr	r0, [r4, #20]
 80005a4:	42b8      	cmp	r0, r7
 80005a6:	d103      	bne.n	80005b0 <MP3D_SPCORP_Symbol_010+0x10a>
 80005a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80005aa:	69e0      	ldr	r0, [r4, #28]
 80005ac:	4408      	add	r0, r1
 80005ae:	61e0      	str	r0, [r4, #28]
 80005b0:	f8c4 9014 	str.w	r9, [r4, #20]
 80005b4:	6921      	ldr	r1, [r4, #16]
 80005b6:	4648      	mov	r0, r9
 80005b8:	b109      	cbz	r1, 80005be <MP3D_SPCORP_Symbol_010+0x118>
 80005ba:	6220      	str	r0, [r4, #32]
 80005bc:	6120      	str	r0, [r4, #16]
 80005be:	6320      	str	r0, [r4, #48]	; 0x30
 80005c0:	2108      	movs	r1, #8
 80005c2:	4620      	mov	r0, r4
 80005c4:	f000 fef8 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 80005c8:	ea40 2606 	orr.w	r6, r0, r6, lsl #8
 80005cc:	69e0      	ldr	r0, [r4, #28]
 80005ce:	1c40      	adds	r0, r0, #1
 80005d0:	e000      	b.n	80005d4 <MP3D_SPCORP_Symbol_010+0x12e>
 80005d2:	e008      	b.n	80005e6 <MP3D_SPCORP_Symbol_010+0x140>
 80005d4:	61e0      	str	r0, [r4, #28]
 80005d6:	f44f 7188 	mov.w	r1, #272	; 0x110
 80005da:	4620      	mov	r0, r4
 80005dc:	f7ff ff04 	bl	80003e8 <MP3D_SPCORP_Symbol_004>
 80005e0:	b118      	cbz	r0, 80005ea <MP3D_SPCORP_Symbol_010+0x144>
 80005e2:	e9c4 850a 	strd	r8, r5, [r4, #40]	; 0x28
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	4630      	mov	r0, r6
 80005ec:	f7ff fedc 	bl	80003a8 <MP3D_SPCORP_Symbol_016>
 80005f0:	2800      	cmp	r0, #0
 80005f2:	d0c7      	beq.n	8000584 <MP3D_SPCORP_Symbol_010+0xde>
 80005f4:	6921      	ldr	r1, [r4, #16]
 80005f6:	b319      	cbz	r1, 8000640 <MP3D_SPCORP_Symbol_010+0x19a>
 80005f8:	4630      	mov	r0, r6
 80005fa:	f7ff febf 	bl	800037c <MP3D_SPCORP_Symbol_017>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d0c0      	beq.n	8000584 <MP3D_SPCORP_Symbol_010+0xde>
 8000602:	6960      	ldr	r0, [r4, #20]
 8000604:	42b8      	cmp	r0, r7
 8000606:	d106      	bne.n	8000616 <MP3D_SPCORP_Symbol_010+0x170>
 8000608:	eba0 0005 	sub.w	r0, r0, r5
 800060c:	6160      	str	r0, [r4, #20]
 800060e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000610:	69e0      	ldr	r0, [r4, #28]
 8000612:	4408      	add	r0, r1
 8000614:	61e0      	str	r0, [r4, #28]
 8000616:	6126      	str	r6, [r4, #16]
 8000618:	03f0      	lsls	r0, r6, #15
 800061a:	d40d      	bmi.n	8000638 <MP3D_SPCORP_Symbol_010+0x192>
 800061c:	2110      	movs	r1, #16
 800061e:	e007      	b.n	8000630 <MP3D_SPCORP_Symbol_010+0x18a>
 8000620:	0800e1a0 	.word	0x0800e1a0
 8000624:	fffe0c00 	.word	0xfffe0c00
 8000628:	fff00000 	.word	0xfff00000
 800062c:	40023000 	.word	0x40023000
 8000630:	4620      	mov	r0, r4
 8000632:	f000 fec1 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 8000636:	87a0      	strh	r0, [r4, #60]	; 0x3c
 8000638:	2000      	movs	r0, #0
 800063a:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 800063e:	e7d2      	b.n	80005e6 <MP3D_SPCORP_Symbol_010+0x140>
 8000640:	f416 4f70 	tst.w	r6, #61440	; 0xf000
 8000644:	d1dd      	bne.n	8000602 <MP3D_SPCORP_Symbol_010+0x15c>
 8000646:	6167      	str	r7, [r4, #20]
 8000648:	e7db      	b.n	8000602 <MP3D_SPCORP_Symbol_010+0x15c>

0800064a <MP3D_SPCORP_Symbol_008>:
 800064a:	b500      	push	{lr}
 800064c:	4602      	mov	r2, r0
 800064e:	f7ff fdbf 	bl	80001d0 <MP3D_SPCORP_Symbol_007>
 8000652:	69d1      	ldr	r1, [r2, #28]
 8000654:	ebc0 00c1 	rsb	r0, r0, r1, lsl #3
 8000658:	bd00      	pop	{pc}

0800065a <MP3D_SPCORP_Symbol_009>:
 800065a:	69c1      	ldr	r1, [r0, #28]
 800065c:	1c49      	adds	r1, r1, #1
 800065e:	61c1      	str	r1, [r0, #28]
 8000660:	2100      	movs	r1, #0
 8000662:	6201      	str	r1, [r0, #32]
 8000664:	4770      	bx	lr

08000666 <MP3D_SPCORP_Symbol_020>:
 8000666:	4601      	mov	r1, r0
 8000668:	48f9      	ldr	r0, [pc, #996]	; (8000a50 <MP3D_SPCORP_Symbol_015+0x2e>)
 800066a:	f3c1 2281 	ubfx	r2, r1, #10, #2
 800066e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8000672:	030a      	lsls	r2, r1, #12
 8000674:	d404      	bmi.n	8000680 <MP3D_SPCORP_Symbol_020+0x1a>
 8000676:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800067a:	02c9      	lsls	r1, r1, #11
 800067c:	d400      	bmi.n	8000680 <MP3D_SPCORP_Symbol_020+0x1a>
 800067e:	0840      	lsrs	r0, r0, #1
 8000680:	4770      	bx	lr

08000682 <mp3d_UnpackSfb>:
 8000682:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000686:	468a      	mov	sl, r1
 8000688:	4681      	mov	r9, r0
 800068a:	f100 0166 	add.w	r1, r0, #102	; 0x66
 800068e:	4ef0      	ldr	r6, [pc, #960]	; (8000a50 <MP3D_SPCORP_Symbol_015+0x2e>)
 8000690:	2503      	movs	r5, #3
 8000692:	2000      	movs	r0, #0
 8000694:	3618      	adds	r6, #24
 8000696:	4cef      	ldr	r4, [pc, #956]	; (8000a54 <MP3D_SPCORP_Symbol_015+0x32>)
 8000698:	e008      	b.n	80006ac <mp3d_UnpackSfb+0x2a>
 800069a:	6822      	ldr	r2, [r4, #0]
 800069c:	f836 7010 	ldrh.w	r7, [r6, r0, lsl #1]
 80006a0:	4352      	muls	r2, r2
 80006a2:	ea87 4722 	eor.w	r7, r7, r2, asr #16
 80006a6:	b2bb      	uxth	r3, r7
 80006a8:	6022      	str	r2, [r4, #0]
 80006aa:	1c40      	adds	r0, r0, #1
 80006ac:	4550      	cmp	r0, sl
 80006ae:	ddf4      	ble.n	800069a <mp3d_UnpackSfb+0x18>
 80006b0:	0418      	lsls	r0, r3, #16
 80006b2:	eb06 3cd0 	add.w	ip, r6, r0, lsr #15
 80006b6:	2201      	movs	r2, #1
 80006b8:	60a2      	str	r2, [r4, #8]
 80006ba:	6820      	ldr	r0, [r4, #0]
 80006bc:	1c40      	adds	r0, r0, #1
 80006be:	d1fb      	bne.n	80006b8 <mp3d_UnpackSfb+0x36>
 80006c0:	435b      	muls	r3, r3
 80006c2:	6023      	str	r3, [r4, #0]
 80006c4:	4683      	mov	fp, r0
 80006c6:	f44f 7e90 	mov.w	lr, #288	; 0x120
 80006ca:	46a0      	mov	r8, r4
 80006cc:	2000      	movs	r0, #0
 80006ce:	4672      	mov	r2, lr
 80006d0:	f801 b901 	strb.w	fp, [r1], #-1
 80006d4:	f83c 4b02 	ldrh.w	r4, [ip], #2
 80006d8:	f8d8 3000 	ldr.w	r3, [r8]
 80006dc:	4063      	eors	r3, r4
 80006de:	b29c      	uxth	r4, r3
 80006e0:	1223      	asrs	r3, r4, #8
 80006e2:	b2e6      	uxtb	r6, r4
 80006e4:	4370      	muls	r0, r6
 80006e6:	3080      	adds	r0, #128	; 0x80
 80006e8:	462c      	mov	r4, r5
 80006ea:	1200      	asrs	r0, r0, #8
 80006ec:	b903      	cbnz	r3, 80006f0 <mp3d_UnpackSfb+0x6e>
 80006ee:	4630      	mov	r0, r6
 80006f0:	b2c7      	uxtb	r7, r0
 80006f2:	1a12      	subs	r2, r2, r0
 80006f4:	f801 7901 	strb.w	r7, [r1], #-1
 80006f8:	1e64      	subs	r4, r4, #1
 80006fa:	d1fa      	bne.n	80006f2 <mp3d_UnpackSfb+0x70>
 80006fc:	1e5b      	subs	r3, r3, #1
 80006fe:	2b00      	cmp	r3, #0
 8000700:	dcf0      	bgt.n	80006e4 <mp3d_UnpackSfb+0x62>
 8000702:	2a00      	cmp	r2, #0
 8000704:	d1e6      	bne.n	80006d4 <mp3d_UnpackSfb+0x52>
 8000706:	106d      	asrs	r5, r5, #1
 8000708:	d1e0      	bne.n	80006cc <mp3d_UnpackSfb+0x4a>
 800070a:	2206      	movs	r2, #6
 800070c:	4648      	mov	r0, r9
 800070e:	f1ba 0f05 	cmp.w	sl, #5
 8000712:	dd00      	ble.n	8000716 <mp3d_UnpackSfb+0x94>
 8000714:	2208      	movs	r2, #8
 8000716:	f100 0128 	add.w	r1, r0, #40	; 0x28
 800071a:	1e52      	subs	r2, r2, #1
 800071c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000720:	f800 3b01 	strb.w	r3, [r0], #1
 8000724:	d1f9      	bne.n	800071a <mp3d_UnpackSfb+0x98>
 8000726:	f109 0148 	add.w	r1, r9, #72	; 0x48
 800072a:	780a      	ldrb	r2, [r1, #0]
 800072c:	f800 2b01 	strb.w	r2, [r0], #1
 8000730:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000734:	2a00      	cmp	r2, #0
 8000736:	d1f8      	bne.n	800072a <mp3d_UnpackSfb+0xa8>
 8000738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800073c <MP3D_SPCORP_Symbol_025>:
 800073c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000740:	b085      	sub	sp, #20
 8000742:	461d      	mov	r5, r3
 8000744:	9806      	ldr	r0, [sp, #24]
 8000746:	e9dd 3112 	ldrd	r3, r1, [sp, #72]	; 0x48
 800074a:	6900      	ldr	r0, [r0, #16]
 800074c:	9003      	str	r0, [sp, #12]
 800074e:	f8df a308 	ldr.w	sl, [pc, #776]	; 8000a58 <MP3D_SPCORP_Symbol_015+0x36>
 8000752:	7ad0      	ldrb	r0, [r2, #11]
 8000754:	4614      	mov	r4, r2
 8000756:	b128      	cbz	r0, 8000764 <MP3D_SPCORP_Symbol_025+0x28>
 8000758:	7aa0      	ldrb	r0, [r4, #10]
 800075a:	f10a 0a1c 	add.w	sl, sl, #28
 800075e:	b108      	cbz	r0, 8000764 <MP3D_SPCORP_Symbol_025+0x28>
 8000760:	f10a 0a1c 	add.w	sl, sl, #28
 8000764:	9803      	ldr	r0, [sp, #12]
 8000766:	0300      	lsls	r0, r0, #12
 8000768:	d510      	bpl.n	800078c <MP3D_SPCORP_Symbol_025+0x50>
 800076a:	49bb      	ldr	r1, [pc, #748]	; (8000a58 <MP3D_SPCORP_Symbol_015+0x36>)
 800076c:	88a0      	ldrh	r0, [r4, #4]
 800076e:	3910      	subs	r1, #16
 8000770:	5c08      	ldrb	r0, [r1, r0]
 8000772:	ea4f 0190 	mov.w	r1, r0, lsr #2
 8000776:	f88d 1008 	strb.w	r1, [sp, #8]
 800077a:	f88d 1009 	strb.w	r1, [sp, #9]
 800077e:	f000 0003 	and.w	r0, r0, #3
 8000782:	f88d 000a 	strb.w	r0, [sp, #10]
 8000786:	f88d 000b 	strb.w	r0, [sp, #11]
 800078a:	e035      	b.n	80007f8 <MP3D_SPCORP_Symbol_025+0xbc>
 800078c:	9a03      	ldr	r2, [sp, #12]
 800078e:	88a3      	ldrh	r3, [r4, #4]
 8000790:	2000      	movs	r0, #0
 8000792:	06d2      	lsls	r2, r2, #27
 8000794:	d501      	bpl.n	800079a <MP3D_SPCORP_Symbol_025+0x5e>
 8000796:	b101      	cbz	r1, 800079a <MP3D_SPCORP_Symbol_025+0x5e>
 8000798:	2001      	movs	r0, #1
 800079a:	f04f 0900 	mov.w	r9, #0
 800079e:	b118      	cbz	r0, 80007a8 <MP3D_SPCORP_Symbol_025+0x6c>
 80007a0:	f04f 090c 	mov.w	r9, #12
 80007a4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80007a8:	4fa9      	ldr	r7, [pc, #676]	; (8000a50 <MP3D_SPCORP_Symbol_015+0x2e>)
 80007aa:	f10d 0e08 	add.w	lr, sp, #8
 80007ae:	3f53      	subs	r7, #83	; 0x53
 80007b0:	49a9      	ldr	r1, [pc, #676]	; (8000a58 <MP3D_SPCORP_Symbol_015+0x36>)
 80007b2:	f04f 0801 	mov.w	r8, #1
 80007b6:	315e      	adds	r1, #94	; 0x5e
 80007b8:	eb01 0b09 	add.w	fp, r1, r9
 80007bc:	4618      	mov	r0, r3
 80007be:	f04f 0103 	mov.w	r1, #3
 80007c2:	4ea3      	ldr	r6, [pc, #652]	; (8000a50 <MP3D_SPCORP_Symbol_015+0x2e>)
 80007c4:	f81b 2001 	ldrb.w	r2, [fp, r1]
 80007c8:	3e5a      	subs	r6, #90	; 0x5a
 80007ca:	fb08 f802 	mul.w	r8, r8, r2
 80007ce:	5cb6      	ldrb	r6, [r6, r2]
 80007d0:	f817 c002 	ldrb.w	ip, [r7, r2]
 80007d4:	4346      	muls	r6, r0
 80007d6:	fa46 f60c 	asr.w	r6, r6, ip
 80007da:	fb06 0012 	mls	r0, r6, r2, r0
 80007de:	f80e 0001 	strb.w	r0, [lr, r1]
 80007e2:	4630      	mov	r0, r6
 80007e4:	1e49      	subs	r1, r1, #1
 80007e6:	d5ec      	bpl.n	80007c2 <MP3D_SPCORP_Symbol_025+0x86>
 80007e8:	f109 0904 	add.w	r9, r9, #4
 80007ec:	ebb3 0308 	subs.w	r3, r3, r8
 80007f0:	d5de      	bpl.n	80007b0 <MP3D_SPCORP_Symbol_025+0x74>
 80007f2:	44ca      	add	sl, r9
 80007f4:	f06f 030f 	mvn.w	r3, #15
 80007f8:	9a06      	ldr	r2, [sp, #24]
 80007fa:	e9cd 2300 	strd	r2, r3, [sp]
 80007fe:	4653      	mov	r3, sl
 8000800:	aa02      	add	r2, sp, #8
 8000802:	4628      	mov	r0, r5
 8000804:	9905      	ldr	r1, [sp, #20]
 8000806:	f000 fc13 	bl	8001030 <ReadScaleFactors>
 800080a:	7d20      	ldrb	r0, [r4, #20]
 800080c:	2302      	movs	r3, #2
 800080e:	0781      	lsls	r1, r0, #30
 8000810:	d400      	bmi.n	8000814 <MP3D_SPCORP_Symbol_025+0xd8>
 8000812:	2301      	movs	r3, #1
 8000814:	7ae1      	ldrb	r1, [r4, #11]
 8000816:	b319      	cbz	r1, 8000860 <MP3D_SPCORP_Symbol_025+0x124>
 8000818:	8a60      	ldrh	r0, [r4, #18]
 800081a:	b300      	cbz	r0, 800085e <MP3D_SPCORP_Symbol_025+0x122>
 800081c:	7aa0      	ldrb	r0, [r4, #10]
 800081e:	f1c3 0203 	rsb	r2, r3, #3
 8000822:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8000826:	8a66      	ldrh	r6, [r4, #18]
 8000828:	6807      	ldr	r7, [r0, #0]
 800082a:	f3c6 1682 	ubfx	r6, r6, #6, #3
 800082e:	fa06 f602 	lsl.w	r6, r6, r2
 8000832:	443e      	add	r6, r7
 8000834:	6006      	str	r6, [r0, #0]
 8000836:	8a66      	ldrh	r6, [r4, #18]
 8000838:	6847      	ldr	r7, [r0, #4]
 800083a:	f3c6 06c2 	ubfx	r6, r6, #3, #3
 800083e:	fa06 f602 	lsl.w	r6, r6, r2
 8000842:	443e      	add	r6, r7
 8000844:	6046      	str	r6, [r0, #4]
 8000846:	8a66      	ldrh	r6, [r4, #18]
 8000848:	6887      	ldr	r7, [r0, #8]
 800084a:	f006 0607 	and.w	r6, r6, #7
 800084e:	fa06 f602 	lsl.w	r6, r6, r2
 8000852:	443e      	add	r6, r7
 8000854:	6086      	str	r6, [r0, #8]
 8000856:	f100 000c 	add.w	r0, r0, #12
 800085a:	1ec9      	subs	r1, r1, #3
 800085c:	d1e3      	bne.n	8000826 <MP3D_SPCORP_Symbol_025+0xea>
 800085e:	e00d      	b.n	800087c <MP3D_SPCORP_Symbol_025+0x140>
 8000860:	0740      	lsls	r0, r0, #29
 8000862:	d50b      	bpl.n	800087c <MP3D_SPCORP_Symbol_025+0x140>
 8000864:	4a7c      	ldr	r2, [pc, #496]	; (8000a58 <MP3D_SPCORP_Symbol_015+0x36>)
 8000866:	2000      	movs	r0, #0
 8000868:	3254      	adds	r2, #84	; 0x54
 800086a:	eb05 0180 	add.w	r1, r5, r0, lsl #2
 800086e:	5c17      	ldrb	r7, [r2, r0]
 8000870:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8000872:	1c40      	adds	r0, r0, #1
 8000874:	443e      	add	r6, r7
 8000876:	62ce      	str	r6, [r1, #44]	; 0x2c
 8000878:	280a      	cmp	r0, #10
 800087a:	d3f6      	bcc.n	800086a <MP3D_SPCORP_Symbol_025+0x12e>
 800087c:	79a1      	ldrb	r1, [r4, #6]
 800087e:	9803      	ldr	r0, [sp, #12]
 8000880:	396e      	subs	r1, #110	; 0x6e
 8000882:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8000886:	2803      	cmp	r0, #3
 8000888:	d100      	bne.n	800088c <MP3D_SPCORP_Symbol_025+0x150>
 800088a:	1e89      	subs	r1, r1, #2
 800088c:	2000      	movs	r0, #0
 800088e:	e004      	b.n	800089a <MP3D_SPCORP_Symbol_025+0x15e>
 8000890:	682a      	ldr	r2, [r5, #0]
 8000892:	409a      	lsls	r2, r3
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	c504      	stmia	r5!, {r2}
 8000898:	1c40      	adds	r0, r0, #1
 800089a:	7aa2      	ldrb	r2, [r4, #10]
 800089c:	7ae6      	ldrb	r6, [r4, #11]
 800089e:	4432      	add	r2, r6
 80008a0:	4282      	cmp	r2, r0
 80008a2:	dcf5      	bgt.n	8000890 <MP3D_SPCORP_Symbol_025+0x154>
 80008a4:	b009      	add	sp, #36	; 0x24
 80008a6:	e747      	b.n	8000738 <mp3d_UnpackSfb+0xb6>

080008a8 <MP3D_SPCORP_Symbol_026>:
 80008a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008ac:	2500      	movs	r5, #0
 80008ae:	2601      	movs	r6, #1
 80008b0:	f3c2 1b81 	ubfx	fp, r2, #6, #2
 80008b4:	b082      	sub	sp, #8
 80008b6:	4682      	mov	sl, r0
 80008b8:	4604      	mov	r4, r0
 80008ba:	f1bb 0f03 	cmp.w	fp, #3
 80008be:	d000      	beq.n	80008c2 <MP3D_SPCORP_Symbol_026+0x1a>
 80008c0:	2602      	movs	r6, #2
 80008c2:	0310      	lsls	r0, r2, #12
 80008c4:	d50d      	bpl.n	80008e2 <MP3D_SPCORP_Symbol_026+0x3a>
 80008c6:	0076      	lsls	r6, r6, #1
 80008c8:	2109      	movs	r1, #9
 80008ca:	9803      	ldr	r0, [sp, #12]
 80008cc:	f000 fd74 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 80008d0:	9000      	str	r0, [sp, #0]
 80008d2:	1df1      	adds	r1, r6, #7
 80008d4:	9803      	ldr	r0, [sp, #12]
 80008d6:	f000 fd6f 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 80008da:	4605      	mov	r5, r0
 80008dc:	f240 4083 	movw	r0, #1155	; 0x483
 80008e0:	e008      	b.n	80008f4 <MP3D_SPCORP_Symbol_026+0x4c>
 80008e2:	f106 0108 	add.w	r1, r6, #8
 80008e6:	9803      	ldr	r0, [sp, #12]
 80008e8:	f000 fd66 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 80008ec:	40f0      	lsrs	r0, r6
 80008ee:	9000      	str	r0, [sp, #0]
 80008f0:	f640 1062 	movw	r0, #2402	; 0x962
 80008f4:	4680      	mov	r8, r0
 80008f6:	f04f 0900 	mov.w	r9, #0
 80008fa:	f1bb 0f03 	cmp.w	fp, #3
 80008fe:	d100      	bne.n	8000902 <MP3D_SPCORP_Symbol_026+0x5a>
 8000900:	012d      	lsls	r5, r5, #4
 8000902:	210c      	movs	r1, #12
 8000904:	9803      	ldr	r0, [sp, #12]
 8000906:	f000 fd57 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 800090a:	8020      	strh	r0, [r4, #0]
 800090c:	2109      	movs	r1, #9
 800090e:	9803      	ldr	r0, [sp, #12]
 8000910:	f000 fd52 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 8000914:	f5b0 7f90 	cmp.w	r0, #288	; 0x120
 8000918:	dc2c      	bgt.n	8000974 <MP3D_SPCORP_Symbol_026+0xcc>
 800091a:	8060      	strh	r0, [r4, #2]
 800091c:	2108      	movs	r1, #8
 800091e:	9803      	ldr	r0, [sp, #12]
 8000920:	f000 fd4a 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 8000924:	71a0      	strb	r0, [r4, #6]
 8000926:	f3c8 2103 	ubfx	r1, r8, #8, #4
 800092a:	9803      	ldr	r0, [sp, #12]
 800092c:	f000 fd44 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 8000930:	80a0      	strh	r0, [r4, #4]
 8000932:	ebaa 0704 	sub.w	r7, sl, r4
 8000936:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800093a:	7260      	strb	r0, [r4, #9]
 800093c:	2016      	movs	r0, #22
 800093e:	72a0      	strb	r0, [r4, #10]
 8000940:	f884 900b 	strb.w	r9, [r4, #11]
 8000944:	2101      	movs	r1, #1
 8000946:	9803      	ldr	r0, [sp, #12]
 8000948:	f000 fd36 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 800094c:	b3a0      	cbz	r0, 80009b8 <MP3D_SPCORP_Symbol_026+0x110>
 800094e:	2103      	movs	r1, #3
 8000950:	9803      	ldr	r0, [sp, #12]
 8000952:	f000 fd31 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 8000956:	f000 0101 	and.w	r1, r0, #1
 800095a:	7221      	strb	r1, [r4, #8]
 800095c:	1040      	asrs	r0, r0, #1
 800095e:	71e0      	strb	r0, [r4, #7]
 8000960:	f04f 0207 	mov.w	r2, #7
 8000964:	73e2      	strb	r2, [r4, #15]
 8000966:	f04f 023f 	mov.w	r2, #63	; 0x3f
 800096a:	7422      	strb	r2, [r4, #16]
 800096c:	d002      	beq.n	8000974 <MP3D_SPCORP_Symbol_026+0xcc>
 800096e:	2802      	cmp	r0, #2
 8000970:	d004      	beq.n	800097c <MP3D_SPCORP_Symbol_026+0xd4>
 8000972:	e00e      	b.n	8000992 <MP3D_SPCORP_Symbol_026+0xea>
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	b005      	add	sp, #20
 800097a:	e6dd      	b.n	8000738 <mp3d_UnpackSfb+0xb6>
 800097c:	f640 700f 	movw	r0, #3855	; 0xf0f
 8000980:	4005      	ands	r5, r0
 8000982:	b189      	cbz	r1, 80009a8 <MP3D_SPCORP_Symbol_026+0x100>
 8000984:	3758      	adds	r7, #88	; 0x58
 8000986:	7267      	strb	r7, [r4, #9]
 8000988:	f3c8 1003 	ubfx	r0, r8, #4, #4
 800098c:	72a0      	strb	r0, [r4, #10]
 800098e:	201e      	movs	r0, #30
 8000990:	72e0      	strb	r0, [r4, #11]
 8000992:	210a      	movs	r1, #10
 8000994:	9803      	ldr	r0, [sp, #12]
 8000996:	f000 fd0f 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 800099a:	0147      	lsls	r7, r0, #5
 800099c:	2109      	movs	r1, #9
 800099e:	9803      	ldr	r0, [sp, #12]
 80009a0:	f000 fd0a 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 80009a4:	8260      	strh	r0, [r4, #18]
 80009a6:	e01d      	b.n	80009e4 <MP3D_SPCORP_Symbol_026+0x13c>
 80009a8:	2008      	movs	r0, #8
 80009aa:	73e0      	strb	r0, [r4, #15]
 80009ac:	3797      	adds	r7, #151	; 0x97
 80009ae:	7267      	strb	r7, [r4, #9]
 80009b0:	f884 900a 	strb.w	r9, [r4, #10]
 80009b4:	2027      	movs	r0, #39	; 0x27
 80009b6:	e7eb      	b.n	8000990 <MP3D_SPCORP_Symbol_026+0xe8>
 80009b8:	e7ff      	b.n	80009ba <MP3D_SPCORP_Symbol_026+0x112>
 80009ba:	f884 9007 	strb.w	r9, [r4, #7]
 80009be:	f884 9008 	strb.w	r9, [r4, #8]
 80009c2:	210f      	movs	r1, #15
 80009c4:	9803      	ldr	r0, [sp, #12]
 80009c6:	f000 fcf7 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 80009ca:	4607      	mov	r7, r0
 80009cc:	2104      	movs	r1, #4
 80009ce:	9803      	ldr	r0, [sp, #12]
 80009d0:	f000 fcf2 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 80009d4:	73e0      	strb	r0, [r4, #15]
 80009d6:	2103      	movs	r1, #3
 80009d8:	9803      	ldr	r0, [sp, #12]
 80009da:	f000 fced 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 80009de:	7420      	strb	r0, [r4, #16]
 80009e0:	203f      	movs	r0, #63	; 0x3f
 80009e2:	7460      	strb	r0, [r4, #17]
 80009e4:	0ab8      	lsrs	r0, r7, #10
 80009e6:	7320      	strb	r0, [r4, #12]
 80009e8:	f3c7 1044 	ubfx	r0, r7, #5, #5
 80009ec:	7360      	strb	r0, [r4, #13]
 80009ee:	f007 001f 	and.w	r0, r7, #31
 80009f2:	73a0      	strb	r0, [r4, #14]
 80009f4:	88a0      	ldrh	r0, [r4, #4]
 80009f6:	2704      	movs	r7, #4
 80009f8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80009fc:	d200      	bcs.n	8000a00 <MP3D_SPCORP_Symbol_026+0x158>
 80009fe:	2700      	movs	r7, #0
 8000a00:	f008 010f 	and.w	r1, r8, #15
 8000a04:	9803      	ldr	r0, [sp, #12]
 8000a06:	f000 fcd7 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 8000a0a:	4438      	add	r0, r7
 8000a0c:	7520      	strb	r0, [r4, #20]
 8000a0e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8000a12:	7560      	strb	r0, [r4, #21]
 8000a14:	012d      	lsls	r5, r5, #4
 8000a16:	3416      	adds	r4, #22
 8000a18:	1e76      	subs	r6, r6, #1
 8000a1a:	f47f af6e 	bne.w	80008fa <MP3D_SPCORP_Symbol_026+0x52>
 8000a1e:	9800      	ldr	r0, [sp, #0]
 8000a20:	e7aa      	b.n	8000978 <MP3D_SPCORP_Symbol_026+0xd0>

08000a22 <MP3D_SPCORP_Symbol_015>:
 8000a22:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000a26:	f500 57ef 	add.w	r7, r0, #7648	; 0x1de0
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	f850 1bd8 	ldr.w	r1, [r0], #216
 8000a30:	46bb      	mov	fp, r7
 8000a32:	9002      	str	r0, [sp, #8]
 8000a34:	f1b1 3fff 	cmp.w	r1, #4294967295
 8000a38:	da39      	bge.n	8000aae <MP3D_SPCORP_Symbol_015+0x8c>
 8000a3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3e:	f7ff fcd3 	bl	80003e8 <MP3D_SPCORP_Symbol_004>
 8000a42:	b158      	cbz	r0, 8000a5c <MP3D_SPCORP_Symbol_015+0x3a>
 8000a44:	f06f 0001 	mvn.w	r0, #1
 8000a48:	b004      	add	sp, #16
 8000a4a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8000a4e:	0000      	.short	0x0000
 8000a50:	0800e1ec 	.word	0x0800e1ec
 8000a54:	40023000 	.word	0x40023000
 8000a58:	0800e426 	.word	0x0800e426
 8000a5c:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8000a60:	f3c0 41c0 	ubfx	r1, r0, #19, #1
 8000a64:	f3c0 5200 	ubfx	r2, r0, #20, #1
 8000a68:	4411      	add	r1, r2
 8000a6a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000a6e:	f3c0 2081 	ubfx	r0, r0, #10, #2
 8000a72:	180d      	adds	r5, r1, r0
 8000a74:	f994 00d7 	ldrsb.w	r0, [r4, #215]	; 0xd7
 8000a78:	42a8      	cmp	r0, r5
 8000a7a:	d006      	beq.n	8000a8a <MP3D_SPCORP_Symbol_015+0x68>
 8000a7c:	4629      	mov	r1, r5
 8000a7e:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8000a82:	f7ff fdfe 	bl	8000682 <mp3d_UnpackSfb>
 8000a86:	f884 50d7 	strb.w	r5, [r4, #215]	; 0xd7
 8000a8a:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
 8000a8e:	f104 0018 	add.w	r0, r4, #24
 8000a92:	9902      	ldr	r1, [sp, #8]
 8000a94:	f7ff ff08 	bl	80008a8 <MP3D_SPCORP_Symbol_026>
 8000a98:	1e01      	subs	r1, r0, #0
 8000a9a:	da02      	bge.n	8000aa2 <MP3D_SPCORP_Symbol_015+0x80>
 8000a9c:	f06f 0002 	mvn.w	r0, #2
 8000aa0:	e7d2      	b.n	8000a48 <MP3D_SPCORP_Symbol_015+0x26>
 8000aa2:	9802      	ldr	r0, [sp, #8]
 8000aa4:	f7ff fc2c 	bl	8000300 <MP3D_SPCORP_Symbol_002>
 8000aa8:	b1f8      	cbz	r0, 8000aea <MP3D_SPCORP_Symbol_015+0xc8>
 8000aaa:	2000      	movs	r0, #0
 8000aac:	6020      	str	r0, [r4, #0]
 8000aae:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f3c1 1181 	ubfx	r1, r1, #6, #2
 8000ab8:	2903      	cmp	r1, #3
 8000aba:	d000      	beq.n	8000abe <MP3D_SPCORP_Symbol_015+0x9c>
 8000abc:	2002      	movs	r0, #2
 8000abe:	4680      	mov	r8, r0
 8000ac0:	6820      	ldr	r0, [r4, #0]
 8000ac2:	f8df 9620 	ldr.w	r9, [pc, #1568]	; 80010e4 <L12_GetSubBandAllocTable+0x2e>
 8000ac6:	ea4f 0a60 	mov.w	sl, r0, asr #1
 8000aca:	f000 0501 	and.w	r5, r0, #1
 8000ace:	fb0a 5008 	mla	r0, sl, r8, r5
 8000ad2:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8000ad6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8000ada:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 8000ade:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 8000ae2:	3618      	adds	r6, #24
 8000ae4:	eb07 2700 	add.w	r7, r7, r0, lsl #8
 8000ae8:	e042      	b.n	8000b70 <MP3D_SPCORP_Symbol_015+0x14e>
 8000aea:	f04f 30ff 	mov.w	r0, #4294967295
 8000aee:	e7ab      	b.n	8000a48 <MP3D_SPCORP_Symbol_015+0x26>
 8000af0:	7ab0      	ldrb	r0, [r6, #10]
 8000af2:	7af1      	ldrb	r1, [r6, #11]
 8000af4:	4408      	add	r0, r1
 8000af6:	eba7 0080 	sub.w	r0, r7, r0, lsl #2
 8000afa:	f600 00fc 	addw	r0, r0, #2300	; 0x8fc
 8000afe:	9003      	str	r0, [sp, #12]
 8000b00:	8831      	ldrh	r1, [r6, #0]
 8000b02:	9802      	ldr	r0, [sp, #8]
 8000b04:	f7ff fc70 	bl	80003e8 <MP3D_SPCORP_Symbol_004>
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	d19d      	bne.n	8000a48 <MP3D_SPCORP_Symbol_015+0x26>
 8000b0c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 8000b10:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 8000b14:	7d72      	ldrb	r2, [r6, #21]
 8000b16:	4420      	add	r0, r4
 8000b18:	f642 71e4 	movw	r1, #12260	; 0x2fe4
 8000b1c:	4408      	add	r0, r1
 8000b1e:	e9cd 2500 	strd	r2, r5, [sp]
 8000b22:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8000b26:	4632      	mov	r2, r6
 8000b28:	f7ff fe08 	bl	800073c <MP3D_SPCORP_Symbol_025>
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	f8c9 1008 	str.w	r1, [r9, #8]
 8000b32:	f8d9 0000 	ldr.w	r0, [r9]
 8000b36:	1c40      	adds	r0, r0, #1
 8000b38:	d1f9      	bne.n	8000b2e <MP3D_SPCORP_Symbol_015+0x10c>
 8000b3a:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8000b3e:	4632      	mov	r2, r6
 8000b40:	4638      	mov	r0, r7
 8000b42:	f000 feaf 	bl	80018a4 <MP3D_SPCORP_Symbol_027>
 8000b46:	1bc0      	subs	r0, r0, r7
 8000b48:	eb04 0145 	add.w	r1, r4, r5, lsl #1
 8000b4c:	1080      	asrs	r0, r0, #2
 8000b4e:	8208      	strh	r0, [r1, #16]
 8000b50:	9802      	ldr	r0, [sp, #8]
 8000b52:	f7ff fc11 	bl	8000378 <MP3D_SPCORP_Symbol_003>
 8000b56:	f5c8 7110 	rsb	r1, r8, #576	; 0x240
 8000b5a:	f8c9 1000 	str.w	r1, [r9]
 8000b5e:	6821      	ldr	r1, [r4, #0]
 8000b60:	f1c8 0003 	rsb	r0, r8, #3
 8000b64:	4408      	add	r0, r1
 8000b66:	1c6d      	adds	r5, r5, #1
 8000b68:	3616      	adds	r6, #22
 8000b6a:	f507 6710 	add.w	r7, r7, #2304	; 0x900
 8000b6e:	6020      	str	r0, [r4, #0]
 8000b70:	4545      	cmp	r5, r8
 8000b72:	dbbd      	blt.n	8000af0 <MP3D_SPCORP_Symbol_015+0xce>
 8000b74:	f8d9 0000 	ldr.w	r0, [r9]
 8000b78:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000b7c:	f000 0603 	and.w	r6, r0, #3
 8000b80:	fb0a f008 	mul.w	r0, sl, r8
 8000b84:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8000b88:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8000b8c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8000b90:	3518      	adds	r5, #24
 8000b92:	f3c3 1081 	ubfx	r0, r3, #6, #2
 8000b96:	2801      	cmp	r0, #1
 8000b98:	d117      	bne.n	8000bca <MP3D_SPCORP_Symbol_015+0x1a8>
 8000b9a:	f013 0f30 	tst.w	r3, #48	; 0x30
 8000b9e:	d014      	beq.n	8000bca <MP3D_SPCORP_Symbol_015+0x1a8>
 8000ba0:	8a21      	ldrh	r1, [r4, #16]
 8000ba2:	8a60      	ldrh	r0, [r4, #18]
 8000ba4:	4281      	cmp	r1, r0
 8000ba6:	d800      	bhi.n	8000baa <MP3D_SPCORP_Symbol_015+0x188>
 8000ba8:	4601      	mov	r1, r0
 8000baa:	8261      	strh	r1, [r4, #18]
 8000bac:	8221      	strh	r1, [r4, #16]
 8000bae:	b161      	cbz	r1, 8000bca <MP3D_SPCORP_Symbol_015+0x1a8>
 8000bb0:	06d8      	lsls	r0, r3, #27
 8000bb2:	d507      	bpl.n	8000bc4 <MP3D_SPCORP_Symbol_015+0x1a2>
 8000bb4:	f243 000b 	movw	r0, #12299	; 0x300b
 8000bb8:	1821      	adds	r1, r4, r0
 8000bba:	462a      	mov	r2, r5
 8000bbc:	4658      	mov	r0, fp
 8000bbe:	f001 fcc5 	bl	800254c <MP3D_SPCORP_Symbol_029>
 8000bc2:	e002      	b.n	8000bca <MP3D_SPCORP_Symbol_015+0x1a8>
 8000bc4:	4658      	mov	r0, fp
 8000bc6:	f001 fc73 	bl	80024b0 <MP3D_SPCORP_Symbol_031>
 8000bca:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 8000bce:	e9cd 6001 	strd	r6, r0, [sp, #4]
 8000bd2:	f04f 0900 	mov.w	r9, #0
 8000bd6:	e067      	b.n	8000ca8 <MP3D_SPCORP_Symbol_015+0x286>
 8000bd8:	7a28      	ldrb	r0, [r5, #8]
 8000bda:	2600      	movs	r6, #0
 8000bdc:	b128      	cbz	r0, 8000bea <MP3D_SPCORP_Symbol_015+0x1c8>
 8000bde:	f894 00d7 	ldrb.w	r0, [r4, #215]	; 0xd7
 8000be2:	2602      	movs	r6, #2
 8000be4:	2802      	cmp	r0, #2
 8000be6:	d100      	bne.n	8000bea <MP3D_SPCORP_Symbol_015+0x1c8>
 8000be8:	2604      	movs	r6, #4
 8000bea:	7ae8      	ldrb	r0, [r5, #11]
 8000bec:	b1c8      	cbz	r0, 8000c22 <MP3D_SPCORP_Symbol_015+0x200>
 8000bee:	eb04 0849 	add.w	r8, r4, r9, lsl #1
 8000bf2:	4270      	negs	r0, r6
 8000bf4:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8000bf8:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8000bfc:	eb01 0240 	add.w	r2, r1, r0, lsl #1
 8000c00:	7a68      	ldrb	r0, [r5, #9]
 8000c02:	7aa9      	ldrb	r1, [r5, #10]
 8000c04:	eb06 07c6 	add.w	r7, r6, r6, lsl #3
 8000c08:	4408      	add	r0, r1
 8000c0a:	1941      	adds	r1, r0, r5
 8000c0c:	f1a6 0a01 	sub.w	sl, r6, #1
 8000c10:	eb0b 00c7 	add.w	r0, fp, r7, lsl #3
 8000c14:	f001 fbf2 	bl	80023fc <MP3D_SPCORP_Symbol_032>
 8000c18:	eb00 0147 	add.w	r1, r0, r7, lsl #1
 8000c1c:	f8a8 1010 	strh.w	r1, [r8, #16]
 8000c20:	e001      	b.n	8000c26 <MP3D_SPCORP_Symbol_015+0x204>
 8000c22:	f04f 0a1f 	mov.w	sl, #31
 8000c26:	eb04 0049 	add.w	r0, r4, r9, lsl #1
 8000c2a:	8a01      	ldrh	r1, [r0, #16]
 8000c2c:	8a82      	ldrh	r2, [r0, #20]
 8000c2e:	4291      	cmp	r1, r2
 8000c30:	d900      	bls.n	8000c34 <MP3D_SPCORP_Symbol_015+0x212>
 8000c32:	460a      	mov	r2, r1
 8000c34:	8281      	strh	r1, [r0, #20]
 8000c36:	3211      	adds	r2, #17
 8000c38:	f640 6039 	movw	r0, #3641	; 0xe39
 8000c3c:	4342      	muls	r2, r0
 8000c3e:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000c42:	45d0      	cmp	r8, sl
 8000c44:	da00      	bge.n	8000c48 <MP3D_SPCORP_Symbol_015+0x226>
 8000c46:	46c2      	mov	sl, r8
 8000c48:	9802      	ldr	r0, [sp, #8]
 8000c4a:	f8d0 7d94 	ldr.w	r7, [r0, #3476]	; 0xd94
 8000c4e:	b14f      	cbz	r7, 8000c64 <MP3D_SPCORP_Symbol_015+0x242>
 8000c50:	79e8      	ldrb	r0, [r5, #7]
 8000c52:	2101      	movs	r1, #1
 8000c54:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8000c58:	2802      	cmp	r0, #2
 8000c5a:	d000      	beq.n	8000c5e <MP3D_SPCORP_Symbol_015+0x23c>
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	464a      	mov	r2, r9
 8000c60:	4658      	mov	r0, fp
 8000c62:	47b8      	blx	r7
 8000c64:	f1ba 0000 	subs.w	r0, sl, #0
 8000c68:	dd03      	ble.n	8000c72 <MP3D_SPCORP_Symbol_015+0x250>
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	4658      	mov	r0, fp
 8000c6e:	f000 fd25 	bl	80016bc <MP3D_SPCORP_Symbol_001>
 8000c72:	4640      	mov	r0, r8
 8000c74:	f1b8 0f20 	cmp.w	r8, #32
 8000c78:	da01      	bge.n	8000c7e <MP3D_SPCORP_Symbol_015+0x25c>
 8000c7a:	1c40      	adds	r0, r0, #1
 8000c7c:	4680      	mov	r8, r0
 8000c7e:	45b0      	cmp	r8, r6
 8000c80:	dc00      	bgt.n	8000c84 <MP3D_SPCORP_Symbol_015+0x262>
 8000c82:	1c70      	adds	r0, r6, #1
 8000c84:	9000      	str	r0, [sp, #0]
 8000c86:	eb09 00c9 	add.w	r0, r9, r9, lsl #3
 8000c8a:	eb04 11c0 	add.w	r1, r4, r0, lsl #7
 8000c8e:	79eb      	ldrb	r3, [r5, #7]
 8000c90:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8000c94:	4632      	mov	r2, r6
 8000c96:	f1ab 0048 	sub.w	r0, fp, #72	; 0x48
 8000c9a:	f001 fb7f 	bl	800239c <MP3D_SPCORP_Symbol_028>
 8000c9e:	f109 0901 	add.w	r9, r9, #1
 8000ca2:	3516      	adds	r5, #22
 8000ca4:	f50b 6b10 	add.w	fp, fp, #2304	; 0x900
 8000ca8:	9901      	ldr	r1, [sp, #4]
 8000caa:	4589      	cmp	r9, r1
 8000cac:	db94      	blt.n	8000bd8 <MP3D_SPCORP_Symbol_015+0x1b6>
 8000cae:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8000cb2:	0300      	lsls	r0, r0, #12
 8000cb4:	6820      	ldr	r0, [r4, #0]
 8000cb6:	d502      	bpl.n	8000cbe <MP3D_SPCORP_Symbol_015+0x29c>
 8000cb8:	2804      	cmp	r0, #4
 8000cba:	d002      	beq.n	8000cc2 <MP3D_SPCORP_Symbol_015+0x2a0>
 8000cbc:	e004      	b.n	8000cc8 <MP3D_SPCORP_Symbol_015+0x2a6>
 8000cbe:	2802      	cmp	r0, #2
 8000cc0:	d102      	bne.n	8000cc8 <MP3D_SPCORP_Symbol_015+0x2a6>
 8000cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc6:	6020      	str	r0, [r4, #0]
 8000cc8:	f44f 7010 	mov.w	r0, #576	; 0x240
 8000ccc:	e6bc      	b.n	8000a48 <MP3D_SPCORP_Symbol_015+0x26>

08000cce <L12_ReadScaleInfo>:
 8000cce:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cd2:	4683      	mov	fp, r0
 8000cd4:	460c      	mov	r4, r1
 8000cd6:	6900      	ldr	r0, [r0, #16]
 8000cd8:	f000 f9ed 	bl	80010b6 <L12_GetSubBandAllocTable>
 8000cdc:	4605      	mov	r5, r0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4658      	mov	r0, fp
 8000ce2:	f7ff fb0d 	bl	8000300 <MP3D_SPCORP_Symbol_002>
 8000ce6:	f04f 0a00 	mov.w	sl, #0
 8000cea:	4eff      	ldr	r6, [pc, #1020]	; (80010e8 <L12_GetSubBandAllocTable+0x32>)
 8000cec:	f894 9000 	ldrb.w	r9, [r4]
 8000cf0:	1ce7      	adds	r7, r4, #3
 8000cf2:	46d0      	mov	r8, sl
 8000cf4:	f1a8 0801 	sub.w	r8, r8, #1
 8000cf8:	f1b8 0f00 	cmp.w	r8, #0
 8000cfc:	dc06      	bgt.n	8000d0c <L12_ReadScaleInfo+0x3e>
 8000cfe:	f895 8002 	ldrb.w	r8, [r5, #2]
 8000d02:	f895 a001 	ldrb.w	sl, [r5, #1]
 8000d06:	f915 0b03 	ldrsb.w	r0, [r5], #3
 8000d0a:	4406      	add	r6, r0
 8000d0c:	4651      	mov	r1, sl
 8000d0e:	4658      	mov	r0, fp
 8000d10:	f000 fb52 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 8000d14:	5c30      	ldrb	r0, [r6, r0]
 8000d16:	f807 0b01 	strb.w	r0, [r7], #1
 8000d1a:	78a2      	ldrb	r2, [r4, #2]
 8000d1c:	454a      	cmp	r2, r9
 8000d1e:	da04      	bge.n	8000d2a <L12_ReadScaleInfo+0x5c>
 8000d20:	4651      	mov	r1, sl
 8000d22:	4658      	mov	r0, fp
 8000d24:	f000 fb48 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 8000d28:	5c30      	ldrb	r0, [r6, r0]
 8000d2a:	7861      	ldrb	r1, [r4, #1]
 8000d2c:	b901      	cbnz	r1, 8000d30 <L12_ReadScaleInfo+0x62>
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f807 0b01 	strb.w	r0, [r7], #1
 8000d34:	f1b9 0901 	subs.w	r9, r9, #1
 8000d38:	d1dc      	bne.n	8000cf4 <L12_ReadScaleInfo+0x26>
 8000d3a:	7820      	ldrb	r0, [r4, #0]
 8000d3c:	f104 0543 	add.w	r5, r4, #67	; 0x43
 8000d40:	0047      	lsls	r7, r0, #1
 8000d42:	1ce6      	adds	r6, r4, #3
 8000d44:	46a9      	mov	r9, r5
 8000d46:	f04f 0802 	mov.w	r8, #2
 8000d4a:	f816 1b01 	ldrb.w	r1, [r6], #1
 8000d4e:	2006      	movs	r0, #6
 8000d50:	b151      	cbz	r1, 8000d68 <L12_ReadScaleInfo+0x9a>
 8000d52:	f8db 1010 	ldr.w	r1, [fp, #16]
 8000d56:	4640      	mov	r0, r8
 8000d58:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8000d5c:	0789      	lsls	r1, r1, #30
 8000d5e:	d003      	beq.n	8000d68 <L12_ReadScaleInfo+0x9a>
 8000d60:	2102      	movs	r1, #2
 8000d62:	4658      	mov	r0, fp
 8000d64:	f000 fb28 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 8000d68:	f805 0b01 	strb.w	r0, [r5], #1
 8000d6c:	1e7f      	subs	r7, r7, #1
 8000d6e:	d1ec      	bne.n	8000d4a <L12_ReadScaleInfo+0x7c>
 8000d70:	f104 0384 	add.w	r3, r4, #132	; 0x84
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	7820      	ldrb	r0, [r4, #0]
 8000d78:	464a      	mov	r2, r9
 8000d7a:	0043      	lsls	r3, r0, #1
 8000d7c:	1ce1      	adds	r1, r4, #3
 8000d7e:	4658      	mov	r0, fp
 8000d80:	f000 f9db 	bl	800113a <L12_ReadScaleFactors>
 8000d84:	78a1      	ldrb	r1, [r4, #2]
 8000d86:	1ce0      	adds	r0, r4, #3
 8000d88:	b141      	cbz	r1, 8000d9c <L12_ReadScaleInfo+0xce>
 8000d8a:	7862      	ldrb	r2, [r4, #1]
 8000d8c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8000d90:	1c40      	adds	r0, r0, #1
 8000d92:	2200      	movs	r2, #0
 8000d94:	f800 2b02 	strb.w	r2, [r0], #2
 8000d98:	1e49      	subs	r1, r1, #1
 8000d9a:	d1fb      	bne.n	8000d94 <L12_ReadScaleInfo+0xc6>
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000da2 <MP3D_SPCORP_Symbol_014>:
 8000da2:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000da6:	4604      	mov	r4, r0
 8000da8:	f100 08d8 	add.w	r8, r0, #216	; 0xd8
 8000dac:	f500 7756 	add.w	r7, r0, #856	; 0x358
 8000db0:	f641 5098 	movw	r0, #7576	; 0x1d98
 8000db4:	1826      	adds	r6, r4, r0
 8000db6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8000dba:	2501      	movs	r5, #1
 8000dbc:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8000dc0:	46b1      	mov	r9, r6
 8000dc2:	0780      	lsls	r0, r0, #30
 8000dc4:	d000      	beq.n	8000dc8 <MP3D_SPCORP_Symbol_014+0x26>
 8000dc6:	2503      	movs	r5, #3
 8000dc8:	6820      	ldr	r0, [r4, #0]
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	da11      	bge.n	8000df2 <MP3D_SPCORP_Symbol_014+0x50>
 8000dce:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000dd2:	2d01      	cmp	r5, #1
 8000dd4:	d001      	beq.n	8000dda <MP3D_SPCORP_Symbol_014+0x38>
 8000dd6:	f240 517c 	movw	r1, #1404	; 0x57c
 8000dda:	4640      	mov	r0, r8
 8000ddc:	f7ff fb04 	bl	80003e8 <MP3D_SPCORP_Symbol_004>
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d141      	bne.n	8000e68 <MP3D_SPCORP_Symbol_014+0xc6>
 8000de4:	4639      	mov	r1, r7
 8000de6:	4640      	mov	r0, r8
 8000de8:	f7ff ff71 	bl	8000cce <L12_ReadScaleInfo>
 8000dec:	2800      	cmp	r0, #0
 8000dee:	d13b      	bne.n	8000e68 <MP3D_SPCORP_Symbol_014+0xc6>
 8000df0:	6020      	str	r0, [r4, #0]
 8000df2:	2d01      	cmp	r5, #1
 8000df4:	d101      	bne.n	8000dfa <MP3D_SPCORP_Symbol_014+0x58>
 8000df6:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8000dfa:	f06f 0b02 	mvn.w	fp, #2
 8000dfe:	f44f 5a90 	mov.w	sl, #4608	; 0x1200
 8000e02:	4640      	mov	r0, r8
 8000e04:	f7ff fc21 	bl	800064a <MP3D_SPCORP_Symbol_008>
 8000e08:	2800      	cmp	r0, #0
 8000e0a:	db2c      	blt.n	8000e66 <MP3D_SPCORP_Symbol_014+0xc4>
 8000e0c:	4651      	mov	r1, sl
 8000e0e:	4550      	cmp	r0, sl
 8000e10:	dc00      	bgt.n	8000e14 <MP3D_SPCORP_Symbol_014+0x72>
 8000e12:	4601      	mov	r1, r0
 8000e14:	4640      	mov	r0, r8
 8000e16:	f7ff fae7 	bl	80003e8 <MP3D_SPCORP_Symbol_004>
 8000e1a:	2800      	cmp	r0, #0
 8000e1c:	d124      	bne.n	8000e68 <MP3D_SPCORP_Symbol_014+0xc6>
 8000e1e:	462b      	mov	r3, r5
 8000e20:	463a      	mov	r2, r7
 8000e22:	4641      	mov	r1, r8
 8000e24:	4630      	mov	r0, r6
 8000e26:	f000 f9f9 	bl	800121c <L12_DequantizeGranule>
 8000e2a:	4606      	mov	r6, r0
 8000e2c:	6820      	ldr	r0, [r4, #0]
 8000e2e:	1d00      	adds	r0, r0, #4
 8000e30:	6020      	str	r0, [r4, #0]
 8000e32:	280c      	cmp	r0, #12
 8000e34:	da01      	bge.n	8000e3a <MP3D_SPCORP_Symbol_014+0x98>
 8000e36:	2d01      	cmp	r5, #1
 8000e38:	d0e3      	beq.n	8000e02 <MP3D_SPCORP_Symbol_014+0x60>
 8000e3a:	6821      	ldr	r1, [r4, #0]
 8000e3c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8000e40:	1089      	asrs	r1, r1, #2
 8000e42:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8000e46:	3908      	subs	r1, #8
 8000e48:	464a      	mov	r2, r9
 8000e4a:	4638      	mov	r0, r7
 8000e4c:	f000 f9a9 	bl	80011a2 <L12_ApplyScf384>
 8000e50:	6820      	ldr	r0, [r4, #0]
 8000e52:	280c      	cmp	r0, #12
 8000e54:	d102      	bne.n	8000e5c <MP3D_SPCORP_Symbol_014+0xba>
 8000e56:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5a:	6020      	str	r0, [r4, #0]
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	f7ff fbf4 	bl	800064a <MP3D_SPCORP_Symbol_008>
 8000e62:	2800      	cmp	r0, #0
 8000e64:	da01      	bge.n	8000e6a <MP3D_SPCORP_Symbol_014+0xc8>
 8000e66:	4658      	mov	r0, fp
 8000e68:	e5ef      	b.n	8000a4a <MP3D_SPCORP_Symbol_015+0x28>
 8000e6a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8000e6e:	e5ec      	b.n	8000a4a <MP3D_SPCORP_Symbol_015+0x28>

08000e70 <MP3D_SPCORP_Symbol_034>:
 8000e70:	2200      	movs	r2, #0
 8000e72:	c004      	stmia	r0!, {r2}
 8000e74:	1e49      	subs	r1, r1, #1
 8000e76:	d1fc      	bne.n	8000e72 <MP3D_SPCORP_Symbol_034+0x2>
 8000e78:	4770      	bx	lr

08000e7a <OutputInternalPCMBuffer>:
 8000e7a:	b570      	push	{r4, r5, r6, lr}
 8000e7c:	4605      	mov	r5, r0
 8000e7e:	6880      	ldr	r0, [r0, #8]
 8000e80:	460c      	mov	r4, r1
 8000e82:	4616      	mov	r6, r2
 8000e84:	4290      	cmp	r0, r2
 8000e86:	d800      	bhi.n	8000e8a <OutputInternalPCMBuffer+0x10>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	1b80      	subs	r0, r0, r6
 8000e8c:	60a8      	str	r0, [r5, #8]
 8000e8e:	b1b6      	cbz	r6, 8000ebe <OutputInternalPCMBuffer+0x44>
 8000e90:	f641 5098 	movw	r0, #7576	; 0x1d98
 8000e94:	4633      	mov	r3, r6
 8000e96:	4428      	add	r0, r5
 8000e98:	686a      	ldr	r2, [r5, #4]
 8000e9a:	f000 fb41 	bl	8001520 <MP3D_SPCORP_Symbol_013>
 8000e9e:	6868      	ldr	r0, [r5, #4]
 8000ea0:	4430      	add	r0, r6
 8000ea2:	6068      	str	r0, [r5, #4]
 8000ea4:	f8d5 00e8 	ldr.w	r0, [r5, #232]	; 0xe8
 8000ea8:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8000eac:	2803      	cmp	r0, #3
 8000eae:	d106      	bne.n	8000ebe <OutputInternalPCMBuffer+0x44>
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	e002      	b.n	8000eba <OutputInternalPCMBuffer+0x40>
 8000eb4:	8821      	ldrh	r1, [r4, #0]
 8000eb6:	8061      	strh	r1, [r4, #2]
 8000eb8:	1d24      	adds	r4, r4, #4
 8000eba:	1e40      	subs	r0, r0, #1
 8000ebc:	d2fa      	bcs.n	8000eb4 <OutputInternalPCMBuffer+0x3a>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	bd70      	pop	{r4, r5, r6, pc}

08000ec2 <SpiritMP3DecoderInit>:
 8000ec2:	b570      	push	{r4, r5, r6, lr}
 8000ec4:	460d      	mov	r5, r1
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	4616      	mov	r6, r2
 8000eca:	f640 410e 	movw	r1, #3086	; 0xc0e
 8000ece:	f7ff ffcf 	bl	8000e70 <MP3D_SPCORP_Symbol_034>
 8000ed2:	4884      	ldr	r0, [pc, #528]	; (80010e4 <L12_GetSubBandAllocTable+0x2e>)
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	6081      	str	r1, [r0, #8]
 8000ed8:	6802      	ldr	r2, [r0, #0]
 8000eda:	1c52      	adds	r2, r2, #1
 8000edc:	d1fb      	bne.n	8000ed6 <SpiritMP3DecoderInit+0x14>
 8000ede:	f604 4094 	addw	r0, r4, #3220	; 0xc94
 8000ee2:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8000ee6:	60e0      	str	r0, [r4, #12]
 8000ee8:	f504 708b 	add.w	r0, r4, #278	; 0x116
 8000eec:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
 8000ef0:	2010      	movs	r0, #16
 8000ef2:	f8c4 00dc 	str.w	r0, [r4, #220]	; 0xdc
 8000ef6:	1e50      	subs	r0, r2, #1
 8000ef8:	6020      	str	r0, [r4, #0]
 8000efa:	e9c4 5343 	strd	r5, r3, [r4, #268]	; 0x10c
 8000efe:	f884 00d7 	strb.w	r0, [r4, #215]	; 0xd7
 8000f02:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8000f06:	f8c4 6d94 	str.w	r6, [r4, #3476]	; 0xd94
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}

08000f0c <SpiritMP3Decode>:
 8000f0c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f10:	4604      	mov	r4, r0
 8000f12:	f8d0 80f8 	ldr.w	r8, [r0, #248]	; 0xf8
 8000f16:	6880      	ldr	r0, [r0, #8]
 8000f18:	b081      	sub	sp, #4
 8000f1a:	460f      	mov	r7, r1
 8000f1c:	4691      	mov	r9, r2
 8000f1e:	2600      	movs	r6, #0
 8000f20:	b128      	cbz	r0, 8000f2e <SpiritMP3Decode+0x22>
 8000f22:	4620      	mov	r0, r4
 8000f24:	f7ff ffa9 	bl	8000e7a <OutputInternalPCMBuffer>
 8000f28:	4606      	mov	r6, r0
 8000f2a:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8000f2e:	45b1      	cmp	r9, r6
 8000f30:	d806      	bhi.n	8000f40 <SpiritMP3Decode+0x34>
 8000f32:	9804      	ldr	r0, [sp, #16]
 8000f34:	2800      	cmp	r0, #0
 8000f36:	d076      	beq.n	8001026 <SpiritMP3Decode+0x11a>
 8000f38:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	d16d      	bne.n	800101c <SpiritMP3Decode+0x110>
 8000f40:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 8000f44:	9000      	str	r0, [sp, #0]
 8000f46:	f641 5098 	movw	r0, #7576	; 0x1d98
 8000f4a:	f04f 0b01 	mov.w	fp, #1
 8000f4e:	eb04 0a00 	add.w	sl, r4, r0
 8000f52:	6820      	ldr	r0, [r4, #0]
 8000f54:	1c40      	adds	r0, r0, #1
 8000f56:	d106      	bne.n	8000f66 <SpiritMP3Decode+0x5a>
 8000f58:	9800      	ldr	r0, [sp, #0]
 8000f5a:	f7ff faa4 	bl	80004a6 <MP3D_SPCORP_Symbol_010>
 8000f5e:	bbe8      	cbnz	r0, 8000fdc <SpiritMP3Decode+0xd0>
 8000f60:	6820      	ldr	r0, [r4, #0]
 8000f62:	1e40      	subs	r0, r0, #1
 8000f64:	6020      	str	r0, [r4, #0]
 8000f66:	495f      	ldr	r1, [pc, #380]	; (80010e4 <L12_GetSubBandAllocTable+0x2e>)
 8000f68:	f8c1 b008 	str.w	fp, [r1, #8]
 8000f6c:	6808      	ldr	r0, [r1, #0]
 8000f6e:	1c40      	adds	r0, r0, #1
 8000f70:	d1fa      	bne.n	8000f68 <SpiritMP3Decode+0x5c>
 8000f72:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8000f76:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8000f7a:	6008      	str	r0, [r1, #0]
 8000f7c:	2801      	cmp	r0, #1
 8000f7e:	4620      	mov	r0, r4
 8000f80:	d008      	beq.n	8000f94 <SpiritMP3Decode+0x88>
 8000f82:	f7ff ff0e 	bl	8000da2 <MP3D_SPCORP_Symbol_014>
 8000f86:	4605      	mov	r5, r0
 8000f88:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8000f8c:	ea00 0808 	and.w	r8, r0, r8
 8000f90:	b118      	cbz	r0, 8000f9a <SpiritMP3Decode+0x8e>
 8000f92:	e013      	b.n	8000fbc <SpiritMP3Decode+0xb0>
 8000f94:	f7ff fd45 	bl	8000a22 <MP3D_SPCORP_Symbol_015>
 8000f98:	e7f5      	b.n	8000f86 <SpiritMP3Decode+0x7a>
 8000f9a:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8000f9e:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8000fa2:	2801      	cmp	r0, #1
 8000fa4:	d105      	bne.n	8000fb2 <SpiritMP3Decode+0xa6>
 8000fa6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000faa:	f504 7056 	add.w	r0, r4, #856	; 0x358
 8000fae:	f7ff ff5f 	bl	8000e70 <MP3D_SPCORP_Symbol_034>
 8000fb2:	f240 4192 	movw	r1, #1170	; 0x492
 8000fb6:	4650      	mov	r0, sl
 8000fb8:	f7ff ff5a 	bl	8000e70 <MP3D_SPCORP_Symbol_034>
 8000fbc:	2d00      	cmp	r5, #0
 8000fbe:	da05      	bge.n	8000fcc <SpiritMP3Decode+0xc0>
 8000fc0:	1c68      	adds	r0, r5, #1
 8000fc2:	d00c      	beq.n	8000fde <SpiritMP3Decode+0xd2>
 8000fc4:	1ca8      	adds	r0, r5, #2
 8000fc6:	d027      	beq.n	8001018 <SpiritMP3Decode+0x10c>
 8000fc8:	1ce8      	adds	r0, r5, #3
 8000fca:	d00c      	beq.n	8000fe6 <SpiritMP3Decode+0xda>
 8000fcc:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8000fd0:	465b      	mov	r3, fp
 8000fd2:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8000fd6:	2803      	cmp	r0, #3
 8000fd8:	d10a      	bne.n	8000ff0 <SpiritMP3Decode+0xe4>
 8000fda:	e008      	b.n	8000fee <SpiritMP3Decode+0xe2>
 8000fdc:	e01c      	b.n	8001018 <SpiritMP3Decode+0x10c>
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	6020      	str	r0, [r4, #0]
 8000fe4:	e016      	b.n	8001014 <SpiritMP3Decode+0x108>
 8000fe6:	9800      	ldr	r0, [sp, #0]
 8000fe8:	f7ff fb37 	bl	800065a <MP3D_SPCORP_Symbol_009>
 8000fec:	e7f7      	b.n	8000fde <SpiritMP3Decode+0xd2>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	116a      	asrs	r2, r5, #5
 8000ff2:	f104 010c 	add.w	r1, r4, #12
 8000ff6:	4650      	mov	r0, sl
 8000ff8:	f002 fa02 	bl	8003400 <MP3D_SPCORP_Symbol_033>
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	e9c4 0501 	strd	r0, r5, [r4, #4]
 8001002:	eba9 0206 	sub.w	r2, r9, r6
 8001006:	4639      	mov	r1, r7
 8001008:	4620      	mov	r0, r4
 800100a:	f7ff ff36 	bl	8000e7a <OutputInternalPCMBuffer>
 800100e:	4406      	add	r6, r0
 8001010:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8001014:	45b1      	cmp	r9, r6
 8001016:	d89c      	bhi.n	8000f52 <SpiritMP3Decode+0x46>
 8001018:	9804      	ldr	r0, [sp, #16]
 800101a:	b120      	cbz	r0, 8001026 <SpiritMP3Decode+0x11a>
 800101c:	4642      	mov	r2, r8
 800101e:	4620      	mov	r0, r4
 8001020:	9904      	ldr	r1, [sp, #16]
 8001022:	f000 f979 	bl	8001318 <SpiritMP3GetLastFrameInfo>
 8001026:	4630      	mov	r0, r6
 8001028:	e4a6      	b.n	8000978 <MP3D_SPCORP_Symbol_026+0xd0>

0800102a <SpiritMP3DecoderGetPersistentSize>:
 800102a:	f243 0038 	movw	r0, #12344	; 0x3038
 800102e:	4770      	bx	lr

08001030 <ReadScaleFactors>:
 8001030:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8001034:	4604      	mov	r4, r0
 8001036:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8001038:	460d      	mov	r5, r1
 800103a:	4693      	mov	fp, r2
 800103c:	f04f 0900 	mov.w	r9, #0
 8001040:	9803      	ldr	r0, [sp, #12]
 8001042:	f810 6b01 	ldrb.w	r6, [r0], #1
 8001046:	9003      	str	r0, [sp, #12]
 8001048:	f81b ab01 	ldrb.w	sl, [fp], #1
 800104c:	b30e      	cbz	r6, 8001092 <ReadScaleFactors+0x62>
 800104e:	0738      	lsls	r0, r7, #28
 8001050:	d505      	bpl.n	800105e <ReadScaleFactors+0x2e>
 8001052:	f915 0b01 	ldrsb.w	r0, [r5], #1
 8001056:	1e76      	subs	r6, r6, #1
 8001058:	c401      	stmia	r4!, {r0}
 800105a:	d1fa      	bne.n	8001052 <ReadScaleFactors+0x22>
 800105c:	e019      	b.n	8001092 <ReadScaleFactors+0x62>
 800105e:	ea5f 000a 	movs.w	r0, sl
 8001062:	d022      	beq.n	80010aa <ReadScaleFactors+0x7a>
 8001064:	f04f 38ff 	mov.w	r8, #4294967295
 8001068:	2f00      	cmp	r7, #0
 800106a:	da04      	bge.n	8001076 <ReadScaleFactors+0x46>
 800106c:	2101      	movs	r1, #1
 800106e:	fa01 f10a 	lsl.w	r1, r1, sl
 8001072:	f1a1 0801 	sub.w	r8, r1, #1
 8001076:	4651      	mov	r1, sl
 8001078:	980e      	ldr	r0, [sp, #56]	; 0x38
 800107a:	f000 f99d 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 800107e:	f04f 31ff 	mov.w	r1, #4294967295
 8001082:	4540      	cmp	r0, r8
 8001084:	d000      	beq.n	8001088 <ReadScaleFactors+0x58>
 8001086:	4601      	mov	r1, r0
 8001088:	f805 1b01 	strb.w	r1, [r5], #1
 800108c:	c401      	stmia	r4!, {r0}
 800108e:	1e76      	subs	r6, r6, #1
 8001090:	d1f1      	bne.n	8001076 <ReadScaleFactors+0x46>
 8001092:	f109 0901 	add.w	r9, r9, #1
 8001096:	007f      	lsls	r7, r7, #1
 8001098:	f1b9 0f04 	cmp.w	r9, #4
 800109c:	dbd0      	blt.n	8001040 <ReadScaleFactors+0x10>
 800109e:	2000      	movs	r0, #0
 80010a0:	6020      	str	r0, [r4, #0]
 80010a2:	6060      	str	r0, [r4, #4]
 80010a4:	60a0      	str	r0, [r4, #8]
 80010a6:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 80010aa:	c401      	stmia	r4!, {r0}
 80010ac:	f805 0b01 	strb.w	r0, [r5], #1
 80010b0:	1e76      	subs	r6, r6, #1
 80010b2:	d1fa      	bne.n	80010aa <ReadScaleFactors+0x7a>
 80010b4:	e7ed      	b.n	8001092 <ReadScaleFactors+0x62>

080010b6 <L12_GetSubBandAllocTable>:
 80010b6:	b570      	push	{r4, r5, r6, lr}
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <L12_GetSubBandAllocTable+0x32>)
 80010ba:	460d      	mov	r5, r1
 80010bc:	4604      	mov	r4, r0
 80010be:	335c      	adds	r3, #92	; 0x5c
 80010c0:	f7ff f8a9 	bl	8000216 <MP3D_SPCORP_Symbol_019>
 80010c4:	f3c4 1181 	ubfx	r1, r4, #6, #2
 80010c8:	f3c4 2681 	ubfx	r6, r4, #10, #2
 80010cc:	2903      	cmp	r1, #3
 80010ce:	d001      	beq.n	80010d4 <L12_GetSubBandAllocTable+0x1e>
 80010d0:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80010d4:	ea6f 4254 	mvn.w	r2, r4, lsr #17
 80010d8:	0792      	lsls	r2, r2, #30
 80010da:	d007      	beq.n	80010ec <L12_GetSubBandAllocTable+0x36>
 80010dc:	0322      	lsls	r2, r4, #12
 80010de:	d408      	bmi.n	80010f2 <L12_GetSubBandAllocTable+0x3c>
 80010e0:	3312      	adds	r3, #18
 80010e2:	e015      	b.n	8001110 <L12_GetSubBandAllocTable+0x5a>
 80010e4:	40023000 	.word	0x40023000
 80010e8:	0800e39c 	.word	0x0800e39c
 80010ec:	331b      	adds	r3, #27
 80010ee:	2220      	movs	r2, #32
 80010f0:	e00f      	b.n	8001112 <L12_GetSubBandAllocTable+0x5c>
 80010f2:	b900      	cbnz	r0, 80010f6 <L12_GetSubBandAllocTable+0x40>
 80010f4:	20c0      	movs	r0, #192	; 0xc0
 80010f6:	221b      	movs	r2, #27
 80010f8:	2838      	cmp	r0, #56	; 0x38
 80010fa:	d205      	bcs.n	8001108 <L12_GetSubBandAllocTable+0x52>
 80010fc:	330c      	adds	r3, #12
 80010fe:	220c      	movs	r2, #12
 8001100:	2e02      	cmp	r6, #2
 8001102:	d006      	beq.n	8001112 <L12_GetSubBandAllocTable+0x5c>
 8001104:	2208      	movs	r2, #8
 8001106:	e004      	b.n	8001112 <L12_GetSubBandAllocTable+0x5c>
 8001108:	2860      	cmp	r0, #96	; 0x60
 800110a:	d302      	bcc.n	8001112 <L12_GetSubBandAllocTable+0x5c>
 800110c:	2e01      	cmp	r6, #1
 800110e:	d000      	beq.n	8001112 <L12_GetSubBandAllocTable+0x5c>
 8001110:	221e      	movs	r2, #30
 8001112:	2020      	movs	r0, #32
 8001114:	07ce      	lsls	r6, r1, #31
 8001116:	d007      	beq.n	8001128 <L12_GetSubBandAllocTable+0x72>
 8001118:	2000      	movs	r0, #0
 800111a:	2901      	cmp	r1, #1
 800111c:	d104      	bne.n	8001128 <L12_GetSubBandAllocTable+0x72>
 800111e:	f3c4 1001 	ubfx	r0, r4, #4, #2
 8001122:	2104      	movs	r1, #4
 8001124:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8001128:	4290      	cmp	r0, r2
 800112a:	db00      	blt.n	800112e <L12_GetSubBandAllocTable+0x78>
 800112c:	4610      	mov	r0, r2
 800112e:	702a      	strb	r2, [r5, #0]
 8001130:	7068      	strb	r0, [r5, #1]
 8001132:	1a10      	subs	r0, r2, r0
 8001134:	70a8      	strb	r0, [r5, #2]
 8001136:	4618      	mov	r0, r3
 8001138:	bd70      	pop	{r4, r5, r6, pc}

0800113a <L12_ReadScaleFactors>:
 800113a:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 800113e:	460f      	mov	r7, r1
 8001140:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8001142:	4690      	mov	r8, r2
 8001144:	469a      	mov	sl, r3
 8001146:	f818 1b01 	ldrb.w	r1, [r8], #1
 800114a:	2013      	movs	r0, #19
 800114c:	40c8      	lsrs	r0, r1
 800114e:	f000 0603 	and.w	r6, r0, #3
 8001152:	2404      	movs	r4, #4
 8001154:	f817 0b01 	ldrb.w	r0, [r7], #1
 8001158:	1d36      	adds	r6, r6, #4
 800115a:	b900      	cbnz	r0, 800115e <L12_ReadScaleFactors+0x24>
 800115c:	2600      	movs	r6, #0
 800115e:	2100      	movs	r1, #0
 8001160:	f8df b24c 	ldr.w	fp, [pc, #588]	; 80013b0 <SpiritMP3GetLastFrameInfo+0x98>
 8001164:	460a      	mov	r2, r1
 8001166:	eb00 0940 	add.w	r9, r0, r0, lsl #1
 800116a:	4226      	tst	r6, r4
 800116c:	d00f      	beq.n	800118e <L12_ReadScaleFactors+0x54>
 800116e:	2106      	movs	r1, #6
 8001170:	9800      	ldr	r0, [sp, #0]
 8001172:	f000 f921 	bl	80013b8 <MP3D_SPCORP_Symbol_006>
 8001176:	212b      	movs	r1, #43	; 0x2b
 8001178:	4341      	muls	r1, r0
 800117a:	11c9      	asrs	r1, r1, #7
 800117c:	1d4a      	adds	r2, r1, #5
 800117e:	4448      	add	r0, r9
 8001180:	eba1 0181 	sub.w	r1, r1, r1, lsl #2
 8001184:	4401      	add	r1, r0
 8001186:	eb0b 0081 	add.w	r0, fp, r1, lsl #2
 800118a:	f850 1c18 	ldr.w	r1, [r0, #-24]
 800118e:	4628      	mov	r0, r5
 8001190:	3508      	adds	r5, #8
 8001192:	e9c0 1200 	strd	r1, r2, [r0]
 8001196:	1064      	asrs	r4, r4, #1
 8001198:	d1e7      	bne.n	800116a <L12_ReadScaleFactors+0x30>
 800119a:	f1ba 0a01 	subs.w	sl, sl, #1
 800119e:	d1d2      	bne.n	8001146 <L12_ReadScaleFactors+0xc>
 80011a0:	e781      	b.n	80010a6 <ReadScaleFactors+0x76>

080011a2 <L12_ApplyScf384>:
 80011a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011a6:	f04f 0e02 	mov.w	lr, #2
 80011aa:	9800      	ldr	r0, [sp, #0]
 80011ac:	9b00      	ldr	r3, [sp, #0]
 80011ae:	f890 8000 	ldrb.w	r8, [r0]
 80011b2:	785b      	ldrb	r3, [r3, #1]
 80011b4:	f502 6010 	add.w	r0, r2, #2304	; 0x900
 80011b8:	b1d3      	cbz	r3, 80011f0 <L12_ApplyScf384+0x4e>
 80011ba:	e9d1 ab00 	ldrd	sl, fp, [r1]
 80011be:	f851 9f18 	ldr.w	r9, [r1, #24]!
 80011c2:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80011c6:	3118      	adds	r1, #24
 80011c8:	240c      	movs	r4, #12
 80011ca:	c840      	ldmia	r0!, {r6}
 80011cc:	6815      	ldr	r5, [r2, #0]
 80011ce:	fb09 f706 	mul.w	r7, r9, r6
 80011d2:	fa47 f70c 	asr.w	r7, r7, ip
 80011d6:	fb0a f605 	mul.w	r6, sl, r5
 80011da:	fa46 f60b 	asr.w	r6, r6, fp
 80011de:	f8c2 7900 	str.w	r7, [r2, #2304]	; 0x900
 80011e2:	c240      	stmia	r2!, {r6}
 80011e4:	1e64      	subs	r4, r4, #1
 80011e6:	d1f0      	bne.n	80011ca <L12_ApplyScf384+0x28>
 80011e8:	3218      	adds	r2, #24
 80011ea:	3018      	adds	r0, #24
 80011ec:	1e5b      	subs	r3, r3, #1
 80011ee:	e7e3      	b.n	80011b8 <L12_ApplyScf384+0x16>
 80011f0:	9800      	ldr	r0, [sp, #0]
 80011f2:	f1be 0e01 	subs.w	lr, lr, #1
 80011f6:	7883      	ldrb	r3, [r0, #2]
 80011f8:	4610      	mov	r0, r2
 80011fa:	d1dd      	bne.n	80011b8 <L12_ApplyScf384+0x16>
 80011fc:	2100      	movs	r1, #0
 80011fe:	4640      	mov	r0, r8
 8001200:	f108 0801 	add.w	r8, r8, #1
 8001204:	2820      	cmp	r0, #32
 8001206:	da07      	bge.n	8001218 <L12_ApplyScf384+0x76>
 8001208:	200c      	movs	r0, #12
 800120a:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
 800120e:	c202      	stmia	r2!, {r1}
 8001210:	1e40      	subs	r0, r0, #1
 8001212:	d1fa      	bne.n	800120a <L12_ApplyScf384+0x68>
 8001214:	3218      	adds	r2, #24
 8001216:	e7f2      	b.n	80011fe <L12_ApplyScf384+0x5c>
 8001218:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800121c <L12_DequantizeGranule>:
 800121c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	2004      	movs	r0, #4
 8001224:	9000      	str	r0, [sp, #0]
 8001226:	9803      	ldr	r0, [sp, #12]
 8001228:	9903      	ldr	r1, [sp, #12]
 800122a:	9a03      	ldr	r2, [sp, #12]
 800122c:	6840      	ldr	r0, [r0, #4]
 800122e:	6809      	ldr	r1, [r1, #0]
 8001230:	6894      	ldr	r4, [r2, #8]
 8001232:	f44f 7910 	mov.w	r9, #576	; 0x240
 8001236:	9a04      	ldr	r2, [sp, #16]
 8001238:	f8dd c008 	ldr.w	ip, [sp, #8]
 800123c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8001240:	7812      	ldrb	r2, [r2, #0]
 8001242:	f108 0803 	add.w	r8, r8, #3
 8001246:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 800124a:	9a05      	ldr	r2, [sp, #20]
 800124c:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8001250:	9202      	str	r2, [sp, #8]
 8001252:	f818 3b01 	ldrb.w	r3, [r8], #1
 8001256:	4662      	mov	r2, ip
 8001258:	eb0c 0c89 	add.w	ip, ip, r9, lsl #2
 800125c:	b1fb      	cbz	r3, 800129e <L12_DequantizeGranule+0x82>
 800125e:	9d05      	ldr	r5, [sp, #20]
 8001260:	2b11      	cmp	r3, #17
 8001262:	da1d      	bge.n	80012a0 <L12_DequantizeGranule+0x84>
 8001264:	f1a3 0701 	sub.w	r7, r3, #1
 8001268:	f04f 0601 	mov.w	r6, #1
 800126c:	fa06 f607 	lsl.w	r6, r6, r7
 8001270:	f1a6 0b01 	sub.w	fp, r6, #1
 8001274:	f1c3 0a20 	rsb	sl, r3, #32
 8001278:	fa21 f60a 	lsr.w	r6, r1, sl
 800127c:	fa01 f103 	lsl.w	r1, r1, r3
 8001280:	18c0      	adds	r0, r0, r3
 8001282:	d407      	bmi.n	8001294 <L12_DequantizeGranule+0x78>
 8001284:	f834 7b02 	ldrh.w	r7, [r4], #2
 8001288:	ba7f      	rev16	r7, r7
 800128a:	fa07 f700 	lsl.w	r7, r7, r0
 800128e:	4339      	orrs	r1, r7
 8001290:	f1a0 0010 	sub.w	r0, r0, #16
 8001294:	eba6 060b 	sub.w	r6, r6, fp
 8001298:	c240      	stmia	r2!, {r6}
 800129a:	1e6d      	subs	r5, r5, #1
 800129c:	d1ec      	bne.n	8001278 <L12_DequantizeGranule+0x5c>
 800129e:	e028      	b.n	80012f2 <L12_DequantizeGranule+0xd6>
 80012a0:	f1a3 0311 	sub.w	r3, r3, #17
 80012a4:	f04f 0701 	mov.w	r7, #1
 80012a8:	4e42      	ldr	r6, [pc, #264]	; (80013b4 <SpiritMP3GetLastFrameInfo+0x9c>)
 80012aa:	fa07 fb03 	lsl.w	fp, r7, r3
 80012ae:	eb07 0a4b 	add.w	sl, r7, fp, lsl #1
 80012b2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	ebaa 03ea 	sub.w	r3, sl, sl, asr #3
 80012bc:	f103 0302 	add.w	r3, r3, #2
 80012c0:	f1c3 0720 	rsb	r7, r3, #32
 80012c4:	fa21 f607 	lsr.w	r6, r1, r7
 80012c8:	fa01 f103 	lsl.w	r1, r1, r3
 80012cc:	18c0      	adds	r0, r0, r3
 80012ce:	d405      	bmi.n	80012dc <L12_DequantizeGranule+0xc0>
 80012d0:	f834 3b02 	ldrh.w	r3, [r4], #2
 80012d4:	ba5b      	rev16	r3, r3
 80012d6:	4083      	lsls	r3, r0
 80012d8:	4319      	orrs	r1, r3
 80012da:	3810      	subs	r0, #16
 80012dc:	9b01      	ldr	r3, [sp, #4]
 80012de:	4373      	muls	r3, r6
 80012e0:	0b5b      	lsrs	r3, r3, #13
 80012e2:	fb03 671a 	mls	r7, r3, sl, r6
 80012e6:	eba7 070b 	sub.w	r7, r7, fp
 80012ea:	c280      	stmia	r2!, {r7}
 80012ec:	461e      	mov	r6, r3
 80012ee:	1e6d      	subs	r5, r5, #1
 80012f0:	d1f4      	bne.n	80012dc <L12_DequantizeGranule+0xc0>
 80012f2:	f1c9 0912 	rsb	r9, r9, #18
 80012f6:	f1be 0e01 	subs.w	lr, lr, #1
 80012fa:	d1aa      	bne.n	8001252 <L12_DequantizeGranule+0x36>
 80012fc:	9a00      	ldr	r2, [sp, #0]
 80012fe:	1e52      	subs	r2, r2, #1
 8001300:	9200      	str	r2, [sp, #0]
 8001302:	d198      	bne.n	8001236 <L12_DequantizeGranule+0x1a>
 8001304:	9a03      	ldr	r2, [sp, #12]
 8001306:	6011      	str	r1, [r2, #0]
 8001308:	9903      	ldr	r1, [sp, #12]
 800130a:	6048      	str	r0, [r1, #4]
 800130c:	9803      	ldr	r0, [sp, #12]
 800130e:	6084      	str	r4, [r0, #8]
 8001310:	9802      	ldr	r0, [sp, #8]
 8001312:	b006      	add	sp, #24
 8001314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001318 <SpiritMP3GetLastFrameInfo>:
 8001318:	b570      	push	{r4, r5, r6, lr}
 800131a:	f8d0 60e8 	ldr.w	r6, [r0, #232]	; 0xe8
 800131e:	4605      	mov	r5, r0
 8001320:	4613      	mov	r3, r2
 8001322:	460c      	mov	r4, r1
 8001324:	b3c6      	cbz	r6, 8001398 <SpiritMP3GetLastFrameInfo+0x80>
 8001326:	4630      	mov	r0, r6
 8001328:	f7fe ff75 	bl	8000216 <MP3D_SPCORP_Symbol_019>
 800132c:	60a0      	str	r0, [r4, #8]
 800132e:	2001      	movs	r0, #1
 8001330:	f3c6 1181 	ubfx	r1, r6, #6, #2
 8001334:	2903      	cmp	r1, #3
 8001336:	d000      	beq.n	800133a <SpiritMP3GetLastFrameInfo+0x22>
 8001338:	2002      	movs	r0, #2
 800133a:	60e0      	str	r0, [r4, #12]
 800133c:	f3c6 4041 	ubfx	r0, r6, #17, #2
 8001340:	f1c0 0004 	rsb	r0, r0, #4
 8001344:	6020      	str	r0, [r4, #0]
 8001346:	4630      	mov	r0, r6
 8001348:	f7ff f98d 	bl	8000666 <MP3D_SPCORP_Symbol_020>
 800134c:	6123      	str	r3, [r4, #16]
 800134e:	6060      	str	r0, [r4, #4]
 8001350:	8a28      	ldrh	r0, [r5, #16]
 8001352:	6160      	str	r0, [r4, #20]
 8001354:	8a68      	ldrh	r0, [r5, #18]
 8001356:	61a0      	str	r0, [r4, #24]
 8001358:	4630      	mov	r0, r6
 800135a:	f8d5 10ec 	ldr.w	r1, [r5, #236]	; 0xec
 800135e:	f7fe ff83 	bl	8000268 <MP3D_SPCORP_Symbol_018>
 8001362:	f8d5 10f0 	ldr.w	r1, [r5, #240]	; 0xf0
 8001366:	4408      	add	r0, r1
 8001368:	f8d5 10f4 	ldr.w	r1, [r5, #244]	; 0xf4
 800136c:	00c0      	lsls	r0, r0, #3
 800136e:	4249      	negs	r1, r1
 8001370:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8001374:	61e0      	str	r0, [r4, #28]
 8001376:	4630      	mov	r0, r6
 8001378:	f7fe ff64 	bl	8000244 <MP3D_SPCORP_Symbol_021>
 800137c:	4602      	mov	r2, r0
 800137e:	6220      	str	r0, [r4, #32]
 8001380:	6828      	ldr	r0, [r5, #0]
 8001382:	2800      	cmp	r0, #0
 8001384:	db0d      	blt.n	80013a2 <SpiritMP3GetLastFrameInfo+0x8a>
 8001386:	6821      	ldr	r1, [r4, #0]
 8001388:	2903      	cmp	r1, #3
 800138a:	d006      	beq.n	800139a <SpiritMP3GetLastFrameInfo+0x82>
 800138c:	2160      	movs	r1, #96	; 0x60
 800138e:	68ab      	ldr	r3, [r5, #8]
 8001390:	441a      	add	r2, r3
 8001392:	fb01 2010 	mls	r0, r1, r0, r2
 8001396:	e005      	b.n	80013a4 <SpiritMP3GetLastFrameInfo+0x8c>
 8001398:	e006      	b.n	80013a8 <SpiritMP3GetLastFrameInfo+0x90>
 800139a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800139e:	1040      	asrs	r0, r0, #1
 80013a0:	e7f5      	b.n	800138e <SpiritMP3GetLastFrameInfo+0x76>
 80013a2:	68a8      	ldr	r0, [r5, #8]
 80013a4:	6260      	str	r0, [r4, #36]	; 0x24
 80013a6:	bd70      	pop	{r4, r5, r6, pc}
 80013a8:	2000      	movs	r0, #0
 80013aa:	6008      	str	r0, [r1, #0]
 80013ac:	bd70      	pop	{r4, r5, r6, pc}
 80013ae:	0000      	.short	0x0000
 80013b0:	0800e2c4 	.word	0x0800e2c4
 80013b4:	0800e18c 	.word	0x0800e18c

080013b8 <MP3D_SPCORP_Symbol_006>:
 80013b8:	e890 000c 	ldmia.w	r0, {r2, r3}
 80013bc:	185b      	adds	r3, r3, r1
 80013be:	d508      	bpl.n	80013d2 <MP3D_SPCORP_Symbol_006+0x1a>
 80013c0:	f1c1 0c20 	rsb	ip, r1, #32
 80013c4:	fa02 f101 	lsl.w	r1, r2, r1
 80013c8:	e880 000a 	stmia.w	r0, {r1, r3}
 80013cc:	fa22 f00c 	lsr.w	r0, r2, ip
 80013d0:	4770      	bx	lr
 80013d2:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80013d6:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80013da:	f83c 4b02 	ldrh.w	r4, [ip], #2
 80013de:	f8c0 c008 	str.w	ip, [r0, #8]
 80013e2:	ba64      	rev16	r4, r4
 80013e4:	f1c1 0c20 	rsb	ip, r1, #32
 80013e8:	fa02 f101 	lsl.w	r1, r2, r1
 80013ec:	fa04 f403 	lsl.w	r4, r4, r3
 80013f0:	ea41 0104 	orr.w	r1, r1, r4
 80013f4:	f1a3 0310 	sub.w	r3, r3, #16
 80013f8:	e880 000a 	stmia.w	r0, {r1, r3}
 80013fc:	fa22 f00c 	lsr.w	r0, r2, ip
 8001400:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	b510      	push	{r4, lr}
 8001408:	3a20      	subs	r2, #32
 800140a:	d30c      	bcc.n	8001426 <MP3D_SPCORP_Symbol_006+0x6e>
 800140c:	bf21      	itttt	cs
 800140e:	e8b1 5018 	ldmiacs.w	r1!, {r3, r4, ip, lr}
 8001412:	e8a0 5018 	stmiacs.w	r0!, {r3, r4, ip, lr}
 8001416:	e8b1 5018 	ldmiacs.w	r1!, {r3, r4, ip, lr}
 800141a:	e8a0 5018 	stmiacs.w	r0!, {r3, r4, ip, lr}
 800141e:	bf28      	it	cs
 8001420:	f1b2 0220 	subscs.w	r2, r2, #32
 8001424:	d2f2      	bcs.n	800140c <MP3D_SPCORP_Symbol_006+0x54>
 8001426:	ea5f 7c02 	movs.w	ip, r2, lsl #28
 800142a:	bf24      	itt	cs
 800142c:	e8b1 5018 	ldmiacs.w	r1!, {r3, r4, ip, lr}
 8001430:	e8a0 5018 	stmiacs.w	r0!, {r3, r4, ip, lr}
 8001434:	bf44      	itt	mi
 8001436:	c918      	ldmiami	r1!, {r3, r4}
 8001438:	c018      	stmiami	r0!, {r3, r4}
 800143a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800143e:	ea5f 7c82 	movs.w	ip, r2, lsl #30
 8001442:	bf24      	itt	cs
 8001444:	f851 3b04 	ldrcs.w	r3, [r1], #4
 8001448:	f840 3b04 	strcs.w	r3, [r0], #4
 800144c:	bf08      	it	eq
 800144e:	4770      	bxeq	lr
 8001450:	07d2      	lsls	r2, r2, #31
 8001452:	bf48      	it	mi
 8001454:	f811 2b01 	ldrbmi.w	r2, [r1], #1
 8001458:	bf24      	itt	cs
 800145a:	f811 3b01 	ldrbcs.w	r3, [r1], #1
 800145e:	f811 cb01 	ldrbcs.w	ip, [r1], #1
 8001462:	bf48      	it	mi
 8001464:	f800 2b01 	strbmi.w	r2, [r0], #1
 8001468:	bf24      	itt	cs
 800146a:	f800 3b01 	strbcs.w	r3, [r0], #1
 800146e:	f800 cb01 	strbcs.w	ip, [r0], #1
 8001472:	4770      	bx	lr

08001474 <MP3D_SPCORP_Symbol_012>:
 8001474:	4694      	mov	ip, r2
 8001476:	461a      	mov	r2, r3
 8001478:	eb00 030c 	add.w	r3, r0, ip
 800147c:	4408      	add	r0, r1
 800147e:	f103 013e 	add.w	r1, r3, #62	; 0x3e
 8001482:	f100 003e 	add.w	r0, r0, #62	; 0x3e
 8001486:	2a03      	cmp	r2, #3
 8001488:	d9e2      	bls.n	8001450 <MP3D_SPCORP_Symbol_006+0x98>
 800148a:	f010 0c03 	ands.w	ip, r0, #3
 800148e:	d014      	beq.n	80014ba <MP3D_SPCORP_Symbol_012+0x46>
 8001490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001494:	f1bc 0f02 	cmp.w	ip, #2
 8001498:	4462      	add	r2, ip
 800149a:	bf98      	it	ls
 800149c:	f811 cb01 	ldrbls.w	ip, [r1], #1
 80014a0:	f800 3b01 	strb.w	r3, [r0], #1
 80014a4:	bf38      	it	cc
 80014a6:	f811 3b01 	ldrbcc.w	r3, [r1], #1
 80014aa:	f1a2 0204 	sub.w	r2, r2, #4
 80014ae:	bf98      	it	ls
 80014b0:	f800 cb01 	strbls.w	ip, [r0], #1
 80014b4:	bf38      	it	cc
 80014b6:	f800 3b01 	strbcc.w	r3, [r0], #1
 80014ba:	f011 0303 	ands.w	r3, r1, #3
 80014be:	d0a2      	beq.n	8001406 <MP3D_SPCORP_Symbol_006+0x4e>
 80014c0:	1f12      	subs	r2, r2, #4
 80014c2:	d3c5      	bcc.n	8001450 <MP3D_SPCORP_Symbol_006+0x98>
 80014c4:	eba1 0103 	sub.w	r1, r1, r3
 80014c8:	f8d1 c000 	ldr.w	ip, [r1]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d00d      	beq.n	80014ec <MP3D_SPCORP_Symbol_012+0x78>
 80014d0:	d819      	bhi.n	8001506 <MP3D_SPCORP_Symbol_012+0x92>
 80014d2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80014d6:	f851 cf04 	ldr.w	ip, [r1, #4]!
 80014da:	1f12      	subs	r2, r2, #4
 80014dc:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80014e0:	f840 3b04 	str.w	r3, [r0], #4
 80014e4:	d2f5      	bcs.n	80014d2 <MP3D_SPCORP_Symbol_012+0x5e>
 80014e6:	f101 0101 	add.w	r1, r1, #1
 80014ea:	e7b1      	b.n	8001450 <MP3D_SPCORP_Symbol_006+0x98>
 80014ec:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80014f0:	f851 cf04 	ldr.w	ip, [r1, #4]!
 80014f4:	1f12      	subs	r2, r2, #4
 80014f6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80014fa:	f840 3b04 	str.w	r3, [r0], #4
 80014fe:	d2f5      	bcs.n	80014ec <MP3D_SPCORP_Symbol_012+0x78>
 8001500:	f101 0102 	add.w	r1, r1, #2
 8001504:	e7a4      	b.n	8001450 <MP3D_SPCORP_Symbol_006+0x98>
 8001506:	ea4f 631c 	mov.w	r3, ip, lsr #24
 800150a:	f851 cf04 	ldr.w	ip, [r1, #4]!
 800150e:	1f12      	subs	r2, r2, #4
 8001510:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8001514:	f840 3b04 	str.w	r3, [r0], #4
 8001518:	d2f5      	bcs.n	8001506 <MP3D_SPCORP_Symbol_012+0x92>
 800151a:	f101 0103 	add.w	r1, r1, #3
 800151e:	e797      	b.n	8001450 <MP3D_SPCORP_Symbol_006+0x98>

08001520 <MP3D_SPCORP_Symbol_013>:
 8001520:	b510      	push	{r4, lr}
 8001522:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8001526:	f000 8095 	beq.w	8001654 <MP3D_SPCORP_Symbol_013+0x134>
 800152a:	ea4f 1c62 	mov.w	ip, r2, asr #5
 800152e:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001532:	f002 021f 	and.w	r2, r2, #31
 8001536:	f1c2 0c20 	rsb	ip, r2, #32
 800153a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800153e:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8001542:	ebb3 030c 	subs.w	r3, r3, ip
 8001546:	bf48      	it	mi
 8001548:	449c      	addmi	ip, r3
 800154a:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800154e:	ea5f 0c5c 	movs.w	ip, ip, lsr #1
 8001552:	bf28      	it	cs
 8001554:	f850 4b48 	ldrcs.w	r4, [r0], #72
 8001558:	f20f 0ed0 	addw	lr, pc, #208	; 0xd0
 800155c:	bf28      	it	cs
 800155e:	f841 4b04 	strcs.w	r4, [r1], #4
 8001562:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8001566:	ebae 0c8c 	sub.w	ip, lr, ip, lsl #2
 800156a:	46e7      	mov	pc, ip
 800156c:	f850 4b48 	ldr.w	r4, [r0], #72
 8001570:	f850 cb48 	ldr.w	ip, [r0], #72
 8001574:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 8001578:	f850 4b48 	ldr.w	r4, [r0], #72
 800157c:	f850 cb48 	ldr.w	ip, [r0], #72
 8001580:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 8001584:	f850 4b48 	ldr.w	r4, [r0], #72
 8001588:	f850 cb48 	ldr.w	ip, [r0], #72
 800158c:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 8001590:	f850 4b48 	ldr.w	r4, [r0], #72
 8001594:	f850 cb48 	ldr.w	ip, [r0], #72
 8001598:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 800159c:	f850 4b48 	ldr.w	r4, [r0], #72
 80015a0:	f850 cb48 	ldr.w	ip, [r0], #72
 80015a4:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015a8:	f850 4b48 	ldr.w	r4, [r0], #72
 80015ac:	f850 cb48 	ldr.w	ip, [r0], #72
 80015b0:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015b4:	f850 4b48 	ldr.w	r4, [r0], #72
 80015b8:	f850 cb48 	ldr.w	ip, [r0], #72
 80015bc:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015c0:	f850 4b48 	ldr.w	r4, [r0], #72
 80015c4:	f850 cb48 	ldr.w	ip, [r0], #72
 80015c8:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015cc:	f850 4b48 	ldr.w	r4, [r0], #72
 80015d0:	f850 cb48 	ldr.w	ip, [r0], #72
 80015d4:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015d8:	f850 4b48 	ldr.w	r4, [r0], #72
 80015dc:	f850 cb48 	ldr.w	ip, [r0], #72
 80015e0:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015e4:	f850 4b48 	ldr.w	r4, [r0], #72
 80015e8:	f850 cb48 	ldr.w	ip, [r0], #72
 80015ec:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015f0:	f850 4b48 	ldr.w	r4, [r0], #72
 80015f4:	f850 cb48 	ldr.w	ip, [r0], #72
 80015f8:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015fc:	f850 4b48 	ldr.w	r4, [r0], #72
 8001600:	f850 cb48 	ldr.w	ip, [r0], #72
 8001604:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 8001608:	f850 4b48 	ldr.w	r4, [r0], #72
 800160c:	f850 cb48 	ldr.w	ip, [r0], #72
 8001610:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 8001614:	f850 4b48 	ldr.w	r4, [r0], #72
 8001618:	f850 cb48 	ldr.w	ip, [r0], #72
 800161c:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 8001620:	f850 4b48 	ldr.w	r4, [r0], #72
 8001624:	f850 cb48 	ldr.w	ip, [r0], #72
 8001628:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 800162c:	eba0 0002 	sub.w	r0, r0, r2
 8001630:	3b20      	subs	r3, #32
 8001632:	da9b      	bge.n	800156c <MP3D_SPCORP_Symbol_013+0x4c>
 8001634:	f113 0c20 	adds.w	ip, r3, #32
 8001638:	bfd8      	it	le
 800163a:	bd10      	pople	{r4, pc}
 800163c:	ea5f 0c5c 	movs.w	ip, ip, lsr #1
 8001640:	bf24      	itt	cs
 8001642:	f850 4b48 	ldrcs.w	r4, [r0], #72
 8001646:	f841 4b04 	strcs.w	r4, [r1], #4
 800164a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800164e:	ebae 0c8c 	sub.w	ip, lr, ip, lsl #2
 8001652:	46e7      	mov	pc, ip
 8001654:	e92d 0fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp}
 8001658:	f04f 0e20 	mov.w	lr, #32
 800165c:	e8b0 07fc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl}
 8001660:	600a      	str	r2, [r1, #0]
 8001662:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8001666:	f8c1 4100 	str.w	r4, [r1, #256]	; 0x100
 800166a:	f8c1 5180 	str.w	r5, [r1, #384]	; 0x180
 800166e:	f8c1 6200 	str.w	r6, [r1, #512]	; 0x200
 8001672:	f8c1 7280 	str.w	r7, [r1, #640]	; 0x280
 8001676:	f8c1 8300 	str.w	r8, [r1, #768]	; 0x300
 800167a:	f8c1 9380 	str.w	r9, [r1, #896]	; 0x380
 800167e:	f8c1 a400 	str.w	sl, [r1, #1024]	; 0x400
 8001682:	e8b0 07fc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl}
 8001686:	f8c1 2480 	str.w	r2, [r1, #1152]	; 0x480
 800168a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800168e:	f8c1 4580 	str.w	r4, [r1, #1408]	; 0x580
 8001692:	f8c1 5600 	str.w	r5, [r1, #1536]	; 0x600
 8001696:	f8c1 6680 	str.w	r6, [r1, #1664]	; 0x680
 800169a:	f8c1 7700 	str.w	r7, [r1, #1792]	; 0x700
 800169e:	f8c1 8780 	str.w	r8, [r1, #1920]	; 0x780
 80016a2:	f8c1 9800 	str.w	r9, [r1, #2048]	; 0x800
 80016a6:	f8c1 a880 	str.w	sl, [r1, #2176]	; 0x880
 80016aa:	f1be 0e01 	subs.w	lr, lr, #1
 80016ae:	f101 0104 	add.w	r1, r1, #4
 80016b2:	d1d3      	bne.n	800165c <MP3D_SPCORP_Symbol_013+0x13c>
 80016b4:	e8bd 0fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp}
 80016b8:	bd10      	pop	{r4, pc}
	...

080016bc <MP3D_SPCORP_Symbol_001>:
 80016bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016c0:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8001778 <MP3D_SPCORP_Symbol_001+0xbc>
 80016c4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80016c8:	e89e 50fc 	ldmia.w	lr, {r2, r3, r4, r5, r6, r7, ip, lr}
 80016cc:	e950 ab02 	ldrd	sl, fp, [r0, #-8]
 80016d0:	e890 0300 	ldmia.w	r0, {r8, r9}
 80016d4:	fb3b 8802 	smlawb	r8, fp, r2, r8
 80016d8:	fb3a 9903 	smlawb	r9, sl, r3, r9
 80016dc:	fb38 bb12 	smlawt	fp, r8, r2, fp
 80016e0:	fb39 aa13 	smlawt	sl, r9, r3, sl
 80016e4:	44c3      	add	fp, r8
 80016e6:	fb3b 8802 	smlawb	r8, fp, r2, r8
 80016ea:	fb3a 9903 	smlawb	r9, sl, r3, r9
 80016ee:	e940 ab02 	strd	sl, fp, [r0, #-8]
 80016f2:	e8a0 0300 	stmia.w	r0!, {r8, r9}
 80016f6:	e950 ab06 	ldrd	sl, fp, [r0, #-24]
 80016fa:	e890 0300 	ldmia.w	r0, {r8, r9}
 80016fe:	fb3b 8804 	smlawb	r8, fp, r4, r8
 8001702:	fb3a 9905 	smlawb	r9, sl, r5, r9
 8001706:	fb38 bb14 	smlawt	fp, r8, r4, fp
 800170a:	fb39 aa15 	smlawt	sl, r9, r5, sl
 800170e:	fb3b 8804 	smlawb	r8, fp, r4, r8
 8001712:	fb3a 9905 	smlawb	r9, sl, r5, r9
 8001716:	e940 ab06 	strd	sl, fp, [r0, #-24]
 800171a:	e8a0 0300 	stmia.w	r0!, {r8, r9}
 800171e:	e950 ab0a 	ldrd	sl, fp, [r0, #-40]	; 0x28
 8001722:	e890 0300 	ldmia.w	r0, {r8, r9}
 8001726:	fb3b 8806 	smlawb	r8, fp, r6, r8
 800172a:	fb3a 9907 	smlawb	r9, sl, r7, r9
 800172e:	fb38 bb16 	smlawt	fp, r8, r6, fp
 8001732:	fb39 aa17 	smlawt	sl, r9, r7, sl
 8001736:	fb3b 8806 	smlawb	r8, fp, r6, r8
 800173a:	fb3a 9907 	smlawb	r9, sl, r7, r9
 800173e:	e940 ab0a 	strd	sl, fp, [r0, #-40]	; 0x28
 8001742:	e8a0 0300 	stmia.w	r0!, {r8, r9}
 8001746:	e950 ab0e 	ldrd	sl, fp, [r0, #-56]	; 0x38
 800174a:	e890 0300 	ldmia.w	r0, {r8, r9}
 800174e:	fb3b 880c 	smlawb	r8, fp, ip, r8
 8001752:	fb3a 990e 	smlawb	r9, sl, lr, r9
 8001756:	fb38 bb1c 	smlawt	fp, r8, ip, fp
 800175a:	fb39 aa1e 	smlawt	sl, r9, lr, sl
 800175e:	fb3b 880c 	smlawb	r8, fp, ip, r8
 8001762:	fb3a 990e 	smlawb	r9, sl, lr, r9
 8001766:	e940 ab0e 	strd	sl, fp, [r0, #-56]	; 0x38
 800176a:	e8e0 890c 	strd	r8, r9, [r0], #48	; 0x30
 800176e:	1e49      	subs	r1, r1, #1
 8001770:	d1ac      	bne.n	80016cc <MP3D_SPCORP_Symbol_001+0x10>
 8001772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001776:	0000      	.short	0x0000
 8001778:	0800e4a0 	.word	0x0800e4a0
 800177c:	fa25 f10b 	lsr.w	r1, r5, fp
 8001780:	4408      	add	r0, r1
 8001782:	f8df 1560 	ldr.w	r1, [pc, #1376]	; 8001ce4 <MP3D_SPCORP_Symbol_000+0x174>
 8001786:	2883      	cmp	r0, #131	; 0x83
 8001788:	bf38      	it	cc
 800178a:	f851 0020 	ldrcc.w	r0, [r1, r0, lsl #2]
 800178e:	d219      	bcs.n	80017c4 <MP3D_SPCORP_Symbol_001+0x108>
 8001790:	fba2 1000 	umull	r1, r0, r2, r0
 8001794:	f1a9 0105 	sub.w	r1, r9, #5
 8001798:	fa20 f001 	lsr.w	r0, r0, r1
 800179c:	f1cb 0121 	rsb	r1, fp, #33	; 0x21
 80017a0:	408d      	lsls	r5, r1
 80017a2:	bf28      	it	cs
 80017a4:	4240      	negcs	r0, r0
 80017a6:	1876      	adds	r6, r6, r1
 80017a8:	f10e 0e12 	add.w	lr, lr, #18
 80017ac:	bf48      	it	mi
 80017ae:	46f7      	movmi	pc, lr
 80017b0:	f837 1b02 	ldrh.w	r1, [r7], #2
 80017b4:	ba49      	rev16	r1, r1
 80017b6:	fa01 f106 	lsl.w	r1, r1, r6
 80017ba:	ea45 0501 	orr.w	r5, r5, r1
 80017be:	f1a6 0610 	sub.w	r6, r6, #16
 80017c2:	46f7      	mov	pc, lr
 80017c4:	b430      	push	{r4, r5}
 80017c6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80017ca:	bfb8      	it	lt
 80017cc:	00c0      	lsllt	r0, r0, #3
 80017ce:	f000 053f 	and.w	r5, r0, #63	; 0x3f
 80017d2:	ea4f 1090 	mov.w	r0, r0, lsr #6
 80017d6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80017da:	c913      	ldmia	r1, {r0, r1, r4}
 80017dc:	f1c5 0540 	rsb	r5, r5, #64	; 0x40
 80017e0:	4420      	add	r0, r4
 80017e2:	eba0 0444 	sub.w	r4, r0, r4, lsl #1
 80017e6:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 80017ea:	fb05 f000 	mul.w	r0, r5, r0
 80017ee:	eb04 10a0 	add.w	r0, r4, r0, asr #6
 80017f2:	fb00 f505 	mul.w	r5, r0, r5
 80017f6:	eb01 14e5 	add.w	r4, r1, r5, asr #7
 80017fa:	fba2 5004 	umull	r5, r0, r2, r4
 80017fe:	f1a9 010d 	sub.w	r1, r9, #13
 8001802:	bfb8      	it	lt
 8001804:	1d09      	addlt	r1, r1, #4
 8001806:	fa20 f001 	lsr.w	r0, r0, r1
 800180a:	bc30      	pop	{r4, r5}
 800180c:	f1cb 0121 	rsb	r1, fp, #33	; 0x21
 8001810:	408d      	lsls	r5, r1
 8001812:	bf28      	it	cs
 8001814:	4240      	negcs	r0, r0
 8001816:	1876      	adds	r6, r6, r1
 8001818:	f10e 0e12 	add.w	lr, lr, #18
 800181c:	bf48      	it	mi
 800181e:	4770      	bxmi	lr
 8001820:	f837 1b02 	ldrh.w	r1, [r7], #2
 8001824:	ba49      	rev16	r1, r1
 8001826:	fa01 f106 	lsl.w	r1, r1, r6
 800182a:	ea45 0501 	orr.w	r5, r5, r1
 800182e:	f1a6 0610 	sub.w	r6, r6, #16
 8001832:	4770      	bx	lr
 8001834:	f04f 0000 	mov.w	r0, #0
 8001838:	f04f 0100 	mov.w	r1, #0
 800183c:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8001840:	f1b4 7480 	subs.w	r4, r4, #16777216	; 0x1000000
 8001844:	dcfa      	bgt.n	800183c <MP3D_SPCORP_Symbol_001+0x180>
 8001846:	e0df      	b.n	8001a08 <MP3D_SPCORP_Symbol_027+0x164>
 8001848:	80000000 	.word	0x80000000
 800184c:	98380000 	.word	0x98380000
 8001850:	b5050000 	.word	0xb5050000
 8001854:	d7450000 	.word	0xd7450000
 8001858:	f8dd a020 	ldr.w	sl, [sp, #32]
 800185c:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8001860:	f10a 0001 	add.w	r0, sl, #1
 8001864:	9008      	str	r0, [sp, #32]
 8001866:	eb0e 030a 	add.w	r3, lr, sl
 800186a:	7bd8      	ldrb	r0, [r3, #15]
 800186c:	7b1b      	ldrb	r3, [r3, #12]
 800186e:	f8df e478 	ldr.w	lr, [pc, #1144]	; 8001ce8 <MP3D_SPCORP_Symbol_000+0x178>
 8001872:	f101 0101 	add.w	r1, r1, #1
 8001876:	ea4f 6ad5 	mov.w	sl, r5, lsr #27
 800187a:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 800187e:	4401      	add	r1, r0
 8001880:	9102      	str	r1, [sp, #8]
 8001882:	f013 0b1f 	ands.w	fp, r3, #31
 8001886:	bf0c      	ite	eq
 8001888:	f20f 111a 	addweq	r1, pc, #282	; 0x11a
 800188c:	f20f 2168 	addwne	r1, pc, #616	; 0x268
 8001890:	095b      	lsrs	r3, r3, #5
 8001892:	bf0e      	itee	eq
 8001894:	f2af 0164 	subweq	r1, pc, #100	; 0x64
 8001898:	eb0e 0343 	addne.w	r3, lr, r3, lsl #1
 800189c:	f833 a01a 	ldrhne.w	sl, [r3, sl, lsl #1]
 80018a0:	910a      	str	r1, [sp, #40]	; 0x28
 80018a2:	e0c1      	b.n	8001a28 <MP3D_SPCORP_Symbol_027+0x184>

080018a4 <MP3D_SPCORP_Symbol_027>:
 80018a4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018a8:	b08c      	sub	sp, #48	; 0x30
 80018aa:	4680      	mov	r8, r0
 80018ac:	f04f 0000 	mov.w	r0, #0
 80018b0:	9008      	str	r0, [sp, #32]
 80018b2:	8851      	ldrh	r1, [r2, #2]
 80018b4:	7a53      	ldrb	r3, [r2, #9]
 80018b6:	9106      	str	r1, [sp, #24]
 80018b8:	4413      	add	r3, r2
 80018ba:	9305      	str	r3, [sp, #20]
 80018bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	e890 00e0 	ldmia.w	r0, {r5, r6, r7}
 80018c4:	e0a0      	b.n	8001a08 <MP3D_SPCORP_Symbol_027+0x164>
 80018c6:	fa05 f501 	lsl.w	r5, r5, r1
 80018ca:	f1ce 0020 	rsb	r0, lr, #32
 80018ce:	fa25 f000 	lsr.w	r0, r5, r0
 80018d2:	eb00 1a5a 	add.w	sl, r0, sl, lsr #5
 80018d6:	1876      	adds	r6, r6, r1
 80018d8:	f833 a01a 	ldrh.w	sl, [r3, sl, lsl #1]
 80018dc:	bf5f      	itttt	pl
 80018de:	f837 0b02 	ldrhpl.w	r0, [r7], #2
 80018e2:	ba40      	rev16pl	r0, r0
 80018e4:	40b0      	lslpl	r0, r6
 80018e6:	4305      	orrpl	r5, r0
 80018e8:	bf58      	it	pl
 80018ea:	3e10      	subpl	r6, #16
 80018ec:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 80018f0:	d25c      	bcs.n	80019ac <MP3D_SPCORP_Symbol_027+0x108>
 80018f2:	fa05 f50e 	lsl.w	r5, r5, lr
 80018f6:	f1c1 0020 	rsb	r0, r1, #32
 80018fa:	fa25 f000 	lsr.w	r0, r5, r0
 80018fe:	eb00 1a5a 	add.w	sl, r0, sl, lsr #5
 8001902:	f833 a01a 	ldrh.w	sl, [r3, sl, lsl #1]
 8001906:	4476      	add	r6, lr
 8001908:	ea14 0e5a 	ands.w	lr, r4, sl, lsr #1
 800190c:	d21c      	bcs.n	8001948 <MP3D_SPCORP_Symbol_027+0xa4>
 800190e:	fa05 f501 	lsl.w	r5, r5, r1
 8001912:	f1ce 0020 	rsb	r0, lr, #32
 8001916:	fa25 f000 	lsr.w	r0, r5, r0
 800191a:	eb00 1a5a 	add.w	sl, r0, sl, lsr #5
 800191e:	f833 a01a 	ldrh.w	sl, [r3, sl, lsl #1]
 8001922:	440e      	add	r6, r1
 8001924:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 8001928:	d240      	bcs.n	80019ac <MP3D_SPCORP_Symbol_027+0x108>
 800192a:	ea4f 1545 	mov.w	r5, r5, lsl #5
 800192e:	f1c1 0020 	rsb	r0, r1, #32
 8001932:	fa25 f000 	lsr.w	r0, r5, r0
 8001936:	eb00 106a 	add.w	r0, r0, sl, asr #5
 800193a:	f833 a010 	ldrh.w	sl, [r3, r0, lsl #1]
 800193e:	f106 0605 	add.w	r6, r6, #5
 8001942:	ea14 0e5a 	ands.w	lr, r4, sl, lsr #1
 8001946:	d3be      	bcc.n	80018c6 <MP3D_SPCORP_Symbol_027+0x22>
 8001948:	eb16 060e 	adds.w	r6, r6, lr
 800194c:	fa05 f50e 	lsl.w	r5, r5, lr
 8001950:	bf5f      	itttt	pl
 8001952:	f837 0b02 	ldrhpl.w	r0, [r7], #2
 8001956:	ba40      	rev16pl	r0, r0
 8001958:	40b0      	lslpl	r0, r6
 800195a:	4305      	orrpl	r5, r0
 800195c:	bf58      	it	pl
 800195e:	3e10      	subpl	r6, #16
 8001960:	ea14 109a 	ands.w	r0, r4, sl, lsr #6
 8001964:	bf1f      	itttt	ne
 8001966:	f85c 0020 	ldrne.w	r0, [ip, r0, lsl #2]
 800196a:	1c76      	addne	r6, r6, #1
 800196c:	fa20 f009 	lsrne.w	r0, r0, r9
 8001970:	ea5f 0545 	movsne.w	r5, r5, lsl #1
 8001974:	bf28      	it	cs
 8001976:	f1d0 0000 	rsbscs	r0, r0, #0
 800197a:	ea14 21da 	ands.w	r1, r4, sl, lsr #11
 800197e:	bf1f      	itttt	ne
 8001980:	f85c 1021 	ldrne.w	r1, [ip, r1, lsl #2]
 8001984:	1c76      	addne	r6, r6, #1
 8001986:	fa21 f109 	lsrne.w	r1, r1, r9
 800198a:	ea5f 0545 	movsne.w	r5, r5, lsl #1
 800198e:	bf28      	it	cs
 8001990:	f1d1 0100 	rsbscs	r1, r1, #0
 8001994:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8001998:	f1b4 7480 	subs.w	r4, r4, #16777216	; 0x1000000
 800199c:	ea4f 6ad5 	mov.w	sl, r5, lsr #27
 80019a0:	f833 a01a 	ldrh.w	sl, [r3, sl, lsl #1]
 80019a4:	dd30      	ble.n	8001a08 <MP3D_SPCORP_Symbol_027+0x164>
 80019a6:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 80019aa:	d3be      	bcc.n	800192a <MP3D_SPCORP_Symbol_027+0x86>
 80019ac:	1876      	adds	r6, r6, r1
 80019ae:	fa05 f501 	lsl.w	r5, r5, r1
 80019b2:	bf5f      	itttt	pl
 80019b4:	f837 0b02 	ldrhpl.w	r0, [r7], #2
 80019b8:	ba40      	rev16pl	r0, r0
 80019ba:	40b0      	lslpl	r0, r6
 80019bc:	4305      	orrpl	r5, r0
 80019be:	bf58      	it	pl
 80019c0:	3e10      	subpl	r6, #16
 80019c2:	ea14 109a 	ands.w	r0, r4, sl, lsr #6
 80019c6:	bf1f      	itttt	ne
 80019c8:	f85c 0020 	ldrne.w	r0, [ip, r0, lsl #2]
 80019cc:	1c76      	addne	r6, r6, #1
 80019ce:	fa20 f009 	lsrne.w	r0, r0, r9
 80019d2:	ea5f 0545 	movsne.w	r5, r5, lsl #1
 80019d6:	bf28      	it	cs
 80019d8:	f1d0 0000 	rsbscs	r0, r0, #0
 80019dc:	ea14 21da 	ands.w	r1, r4, sl, lsr #11
 80019e0:	bf1f      	itttt	ne
 80019e2:	f85c 1021 	ldrne.w	r1, [ip, r1, lsl #2]
 80019e6:	1c76      	addne	r6, r6, #1
 80019e8:	fa21 f109 	lsrne.w	r1, r1, r9
 80019ec:	ea5f 0545 	movsne.w	r5, r5, lsl #1
 80019f0:	bf28      	it	cs
 80019f2:	f1d1 0100 	rsbscs	r1, r1, #0
 80019f6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80019fa:	ea4f 6ad5 	mov.w	sl, r5, lsr #27
 80019fe:	f1b4 7480 	subs.w	r4, r4, #16777216	; 0x1000000
 8001a02:	f833 a01a 	ldrh.w	sl, [r3, sl, lsl #1]
 8001a06:	dcce      	bgt.n	80019a6 <MP3D_SPCORP_Symbol_027+0x102>
 8001a08:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8001a0c:	9905      	ldr	r1, [sp, #20]
 8001a0e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8001a12:	f1d9 0400 	rsbs	r4, r9, #0
 8001a16:	f280 80ab 	bge.w	8001b70 <MP3D_SPCORP_Symbol_000>
 8001a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001a1e:	9802      	ldr	r0, [sp, #8]
 8001a20:	9105      	str	r1, [sp, #20]
 8001a22:	4281      	cmp	r1, r0
 8001a24:	f4bf af18 	bcs.w	8001858 <MP3D_SPCORP_Symbol_001+0x19c>
 8001a28:	ebb9 0904 	subs.w	r9, r9, r4
 8001a2c:	f8cd 9018 	str.w	r9, [sp, #24]
 8001a30:	bfb8      	it	lt
 8001a32:	444c      	addlt	r4, r9
 8001a34:	f1a4 0401 	sub.w	r4, r4, #1
 8001a38:	ea4f 6404 	mov.w	r4, r4, lsl #24
 8001a3c:	f104 040f 	add.w	r4, r4, #15
 8001a40:	f85c eb04 	ldr.w	lr, [ip], #4
 8001a44:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8001a48:	f04f 0119 	mov.w	r1, #25
 8001a4c:	eba1 09ae 	sub.w	r9, r1, lr, asr #2
 8001a50:	49a6      	ldr	r1, [pc, #664]	; (8001cec <MP3D_SPCORP_Symbol_000+0x17c>)
 8001a52:	f00e 0003 	and.w	r0, lr, #3
 8001a56:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8001a5a:	eb01 1c80 	add.w	ip, r1, r0, lsl #6
 8001a5e:	46f7      	mov	pc, lr
 8001a60:	ea4f 1545 	mov.w	r5, r5, lsl #5
 8001a64:	fa25 f001 	lsr.w	r0, r5, r1
 8001a68:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8001a6c:	eb00 105a 	add.w	r0, r0, sl, lsr #5
 8001a70:	f833 a010 	ldrh.w	sl, [r3, r0, lsl #1]
 8001a74:	1d76      	adds	r6, r6, #5
 8001a76:	f1c1 0e10 	rsb	lr, r1, #16
 8001a7a:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 8001a7e:	d242      	bcs.n	8001b06 <MP3D_SPCORP_Symbol_027+0x262>
 8001a80:	fa05 f50e 	lsl.w	r5, r5, lr
 8001a84:	fa25 f001 	lsr.w	r0, r5, r1
 8001a88:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8001a8c:	eb00 105a 	add.w	r0, r0, sl, lsr #5
 8001a90:	f833 a010 	ldrh.w	sl, [r3, r0, lsl #1]
 8001a94:	eb16 060e 	adds.w	r6, r6, lr
 8001a98:	f1c1 0e10 	rsb	lr, r1, #16
 8001a9c:	bf5f      	itttt	pl
 8001a9e:	f837 0b02 	ldrhpl.w	r0, [r7], #2
 8001aa2:	ba40      	rev16pl	r0, r0
 8001aa4:	40b0      	lslpl	r0, r6
 8001aa6:	4305      	orrpl	r5, r0
 8001aa8:	bf58      	it	pl
 8001aaa:	3e10      	subpl	r6, #16
 8001aac:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 8001ab0:	d229      	bcs.n	8001b06 <MP3D_SPCORP_Symbol_027+0x262>
 8001ab2:	fa05 f50e 	lsl.w	r5, r5, lr
 8001ab6:	fa25 f001 	lsr.w	r0, r5, r1
 8001aba:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8001abe:	eb00 105a 	add.w	r0, r0, sl, lsr #5
 8001ac2:	f833 a010 	ldrh.w	sl, [r3, r0, lsl #1]
 8001ac6:	eb16 060e 	adds.w	r6, r6, lr
 8001aca:	f1c1 0e10 	rsb	lr, r1, #16
 8001ace:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 8001ad2:	d218      	bcs.n	8001b06 <MP3D_SPCORP_Symbol_027+0x262>
 8001ad4:	fa05 f50e 	lsl.w	r5, r5, lr
 8001ad8:	fa25 f001 	lsr.w	r0, r5, r1
 8001adc:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8001ae0:	eb00 105a 	add.w	r0, r0, sl, lsr #5
 8001ae4:	f833 a010 	ldrh.w	sl, [r3, r0, lsl #1]
 8001ae8:	eb16 060e 	adds.w	r6, r6, lr
 8001aec:	f1c1 0e10 	rsb	lr, r1, #16
 8001af0:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 8001af4:	d207      	bcs.n	8001b06 <MP3D_SPCORP_Symbol_027+0x262>
 8001af6:	e006      	b.n	8001b06 <MP3D_SPCORP_Symbol_027+0x262>
 8001af8:	f2af 21b4 	subw	r1, pc, #692	; 0x2b4
 8001afc:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 8001b00:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 8001b04:	d3ac      	bcc.n	8001a60 <MP3D_SPCORP_Symbol_027+0x1bc>
 8001b06:	1876      	adds	r6, r6, r1
 8001b08:	fa05 f501 	lsl.w	r5, r5, r1
 8001b0c:	bf5f      	itttt	pl
 8001b0e:	f837 0b02 	ldrhpl.w	r0, [r7], #2
 8001b12:	ba40      	rev16pl	r0, r0
 8001b14:	40b0      	lslpl	r0, r6
 8001b16:	4305      	orrpl	r5, r0
 8001b18:	bf58      	it	pl
 8001b1a:	3e10      	subpl	r6, #16
 8001b1c:	ea14 109a 	ands.w	r0, r4, sl, lsr #6
 8001b20:	d00b      	beq.n	8001b3a <MP3D_SPCORP_Symbol_027+0x296>
 8001b22:	bf28      	it	cs
 8001b24:	f7ff fe2a 	blcs	800177c <MP3D_SPCORP_Symbol_001+0xc0>
 8001b28:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 8001b2c:	f106 0601 	add.w	r6, r6, #1
 8001b30:	fa20 f009 	lsr.w	r0, r0, r9
 8001b34:	006d      	lsls	r5, r5, #1
 8001b36:	bf28      	it	cs
 8001b38:	4240      	negcs	r0, r0
 8001b3a:	f848 0b04 	str.w	r0, [r8], #4
 8001b3e:	ea14 20da 	ands.w	r0, r4, sl, lsr #11
 8001b42:	d00b      	beq.n	8001b5c <MP3D_SPCORP_Symbol_027+0x2b8>
 8001b44:	bf28      	it	cs
 8001b46:	f7ff fe19 	blcs	800177c <MP3D_SPCORP_Symbol_001+0xc0>
 8001b4a:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 8001b4e:	f106 0601 	add.w	r6, r6, #1
 8001b52:	fa20 f009 	lsr.w	r0, r0, r9
 8001b56:	006d      	lsls	r5, r5, #1
 8001b58:	bf28      	it	cs
 8001b5a:	4240      	negcs	r0, r0
 8001b5c:	f848 0b04 	str.w	r0, [r8], #4
 8001b60:	ea4f 6ad5 	mov.w	sl, r5, lsr #27
 8001b64:	f1b4 7480 	subs.w	r4, r4, #16777216	; 0x1000000
 8001b68:	f833 a01a 	ldrh.w	sl, [r3, sl, lsl #1]
 8001b6c:	dcc8      	bgt.n	8001b00 <MP3D_SPCORP_Symbol_027+0x25c>
 8001b6e:	e74b      	b.n	8001a08 <MP3D_SPCORP_Symbol_027+0x164>

08001b70 <MP3D_SPCORP_Symbol_000>:
 8001b70:	bf1c      	itt	ne
 8001b72:	f20f 0e0e 	addwne	lr, pc, #14
 8001b76:	f85c 0c04 	ldrne.w	r0, [ip, #-4]
 8001b7a:	f040 8095 	bne.w	8001ca8 <MP3D_SPCORP_Symbol_000+0x138>
 8001b7e:	f000 f88d 	bl	8001c9c <MP3D_SPCORP_Symbol_000+0x12c>
 8001b82:	f104 0401 	add.w	r4, r4, #1
 8001b86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001b88:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8001b8c:	f8d2 b024 	ldr.w	fp, [r2, #36]	; 0x24
 8001b90:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8001b94:	eba7 0202 	sub.w	r2, r7, r2
 8001b98:	ebab 0bc2 	sub.w	fp, fp, r2, lsl #3
 8001b9c:	f10b 0a10 	add.w	sl, fp, #16
 8001ba0:	4556      	cmp	r6, sl
 8001ba2:	dc5c      	bgt.n	8001c5e <MP3D_SPCORP_Symbol_000+0xee>
 8001ba4:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8001ba8:	f899 9014 	ldrb.w	r9, [r9, #20]
 8001bac:	f10a 0a01 	add.w	sl, sl, #1
 8001bb0:	f019 0f01 	tst.w	r9, #1
 8001bb4:	bf18      	it	ne
 8001bb6:	f20f 0336 	addwne	r3, pc, #54	; 0x36
 8001bba:	d118      	bne.n	8001bee <MP3D_SPCORP_Symbol_000+0x7e>
 8001bbc:	bf08      	it	eq
 8001bbe:	f20f 0302 	addweq	r3, pc, #2
 8001bc2:	006d      	lsls	r5, r5, #1
 8001bc4:	d304      	bcc.n	8001bd0 <MP3D_SPCORP_Symbol_000+0x60>
 8001bc6:	f04f 0900 	mov.w	r9, #0
 8001bca:	1c76      	adds	r6, r6, #1
 8001bcc:	d423      	bmi.n	8001c16 <MP3D_SPCORP_Symbol_000+0xa6>
 8001bce:	e016      	b.n	8001bfe <MP3D_SPCORP_Symbol_000+0x8e>
 8001bd0:	f20f 0ef0 	addw	lr, pc, #240	; 0xf0
 8001bd4:	ea4f 69d5 	mov.w	r9, r5, lsr #27
 8001bd8:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8001bdc:	086d      	lsrs	r5, r5, #1
 8001bde:	ea4f 1e19 	mov.w	lr, r9, lsr #4
 8001be2:	fa05 f50e 	lsl.w	r5, r5, lr
 8001be6:	eb16 060e 	adds.w	r6, r6, lr
 8001bea:	d414      	bmi.n	8001c16 <MP3D_SPCORP_Symbol_000+0xa6>
 8001bec:	e007      	b.n	8001bfe <MP3D_SPCORP_Symbol_000+0x8e>
 8001bee:	ea6f 7915 	mvn.w	r9, r5, lsr #28
 8001bf2:	f009 090f 	and.w	r9, r9, #15
 8001bf6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8001bfa:	1d36      	adds	r6, r6, #4
 8001bfc:	d40b      	bmi.n	8001c16 <MP3D_SPCORP_Symbol_000+0xa6>
 8001bfe:	f837 eb02 	ldrh.w	lr, [r7], #2
 8001c02:	fa9e fe9e 	rev16.w	lr, lr
 8001c06:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 8001c0a:	fa0e fe06 	lsl.w	lr, lr, r6
 8001c0e:	ea45 050e 	orr.w	r5, r5, lr
 8001c12:	f1a6 0610 	sub.w	r6, r6, #16
 8001c16:	ebb6 4f2a 	cmp.w	r6, sl, asr #16
 8001c1a:	dc20      	bgt.n	8001c5e <MP3D_SPCORP_Symbol_000+0xee>
 8001c1c:	1e64      	subs	r4, r4, #1
 8001c1e:	bfd8      	it	le
 8001c20:	f000 f83c 	blle	8001c9c <MP3D_SPCORP_Symbol_000+0x12c>
 8001c24:	ea1a 02d9 	ands.w	r2, sl, r9, lsr #3
 8001c28:	bf18      	it	ne
 8001c2a:	f000 f82a 	blne	8001c82 <MP3D_SPCORP_Symbol_000+0x112>
 8001c2e:	ea1a 0b99 	ands.w	fp, sl, r9, lsr #2
 8001c32:	bf18      	it	ne
 8001c34:	f000 f82b 	blne	8001c8e <MP3D_SPCORP_Symbol_000+0x11e>
 8001c38:	e8a8 0804 	stmia.w	r8!, {r2, fp}
 8001c3c:	1e64      	subs	r4, r4, #1
 8001c3e:	bfd8      	it	le
 8001c40:	f000 f82c 	blle	8001c9c <MP3D_SPCORP_Symbol_000+0x12c>
 8001c44:	ea1a 0259 	ands.w	r2, sl, r9, lsr #1
 8001c48:	bf18      	it	ne
 8001c4a:	f000 f81a 	blne	8001c82 <MP3D_SPCORP_Symbol_000+0x112>
 8001c4e:	ea1a 0b09 	ands.w	fp, sl, r9
 8001c52:	bf18      	it	ne
 8001c54:	f000 f81b 	blne	8001c8e <MP3D_SPCORP_Symbol_000+0x11e>
 8001c58:	e8a8 0804 	stmia.w	r8!, {r2, fp}
 8001c5c:	469f      	mov	pc, r3
 8001c5e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001c60:	b010      	add	sp, #64	; 0x40
 8001c62:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8001c66:	4540      	cmp	r0, r8
 8001c68:	bf98      	it	ls
 8001c6a:	e8bd 8ff0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c6e:	f04f 0100 	mov.w	r1, #0
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	e920 0006 	stmdb	r0!, {r1, r2}
 8001c7a:	4540      	cmp	r0, r8
 8001c7c:	d1fb      	bne.n	8001c76 <MP3D_SPCORP_Symbol_000+0x106>
 8001c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c82:	006d      	lsls	r5, r5, #1
 8001c84:	bf2c      	ite	cs
 8001c86:	4242      	negcs	r2, r0
 8001c88:	4602      	movcc	r2, r0
 8001c8a:	1c76      	adds	r6, r6, #1
 8001c8c:	4770      	bx	lr
 8001c8e:	006d      	lsls	r5, r5, #1
 8001c90:	bf2c      	ite	cs
 8001c92:	f1c0 0b00 	rsbcs	fp, r0, #0
 8001c96:	4683      	movcc	fp, r0
 8001c98:	1c76      	adds	r6, r6, #1
 8001c9a:	4770      	bx	lr
 8001c9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ca0:	f85c 0b04 	ldr.w	r0, [ip], #4
 8001ca4:	2c00      	cmp	r4, #0
 8001ca6:	d0da      	beq.n	8001c5e <MP3D_SPCORP_Symbol_000+0xee>
 8001ca8:	ea4f 0ba0 	mov.w	fp, r0, asr #2
 8001cac:	4a10      	ldr	r2, [pc, #64]	; (8001cf0 <MP3D_SPCORP_Symbol_000+0x180>)
 8001cae:	f000 0003 	and.w	r0, r0, #3
 8001cb2:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8001cb6:	5810      	ldr	r0, [r2, r0]
 8001cb8:	f1cb 0b19 	rsb	fp, fp, #25
 8001cbc:	fa20 f00b 	lsr.w	r0, r0, fp
 8001cc0:	46f7      	mov	pc, lr
 8001cc2:	0000      	.short	0x0000
 8001cc4:	6e6d6f6b 	.word	0x6e6d6f6b
 8001cc8:	59596567 	.word	0x59596567
 8001ccc:	53535656 	.word	0x53535656
 8001cd0:	5c5c5a5a 	.word	0x5c5c5a5a
 8001cd4:	42424242 	.word	0x42424242
 8001cd8:	41414141 	.word	0x41414141
 8001cdc:	44444444 	.word	0x44444444
 8001ce0:	48484848 	.word	0x48484848
 8001ce4:	0800e484 	.word	0x0800e484
 8001ce8:	0800d0a0 	.word	0x0800d0a0
 8001cec:	0800e690 	.word	0x0800e690
 8001cf0:	0800e694 	.word	0x0800e694

08001cf4 <IMDCT12>:
 8001cf4:	c890      	ldmia	r0!, {r4, r7}
 8001cf6:	6905      	ldr	r5, [r0, #16]
 8001cf8:	6946      	ldr	r6, [r0, #20]
 8001cfa:	e9d0 890a 	ldrd	r8, r9, [r0, #40]	; 0x28
 8001cfe:	443d      	add	r5, r7
 8001d00:	ebc5 0747 	rsb	r7, r5, r7, lsl #1
 8001d04:	eba8 0806 	sub.w	r8, r8, r6
 8001d08:	eb08 0646 	add.w	r6, r8, r6, lsl #1
 8001d0c:	fb35 5302 	smlawb	r3, r5, r2, r5
 8001d10:	eba6 0504 	sub.w	r5, r6, r4
 8001d14:	eb04 0466 	add.w	r4, r4, r6, asr #1
 8001d18:	eba3 0404 	sub.w	r4, r3, r4
 8001d1c:	eba4 0643 	sub.w	r6, r4, r3, lsl #1
 8001d20:	fb38 8302 	smlawb	r3, r8, r2, r8
 8001d24:	ebc9 0807 	rsb	r8, r9, r7
 8001d28:	eb09 0967 	add.w	r9, r9, r7, asr #1
 8001d2c:	eba9 0703 	sub.w	r7, r9, r3
 8001d30:	4499      	add	r9, r3
 8001d32:	fb34 990c 	smlawb	r9, r4, ip, r9
 8001d36:	fb35 880b 	smlawb	r8, r5, fp, r8
 8001d3a:	fb36 770a 	smlawb	r7, r6, sl, r7
 8001d3e:	fb39 441c 	smlawt	r4, r9, ip, r4
 8001d42:	fb38 551b 	smlawt	r5, r8, fp, r5
 8001d46:	fb37 661a 	smlawt	r6, r7, sl, r6
 8001d4a:	eba4 0409 	sub.w	r4, r4, r9
 8001d4e:	fb34 990c 	smlawb	r9, r4, ip, r9
 8001d52:	fb35 880b 	smlawb	r8, r5, fp, r8
 8001d56:	fb36 770a 	smlawb	r7, r6, sl, r7
 8001d5a:	680b      	ldr	r3, [r1, #0]
 8001d5c:	600c      	str	r4, [r1, #0]
 8001d5e:	684c      	ldr	r4, [r1, #4]
 8001d60:	604d      	str	r5, [r1, #4]
 8001d62:	688d      	ldr	r5, [r1, #8]
 8001d64:	608e      	str	r6, [r1, #8]
 8001d66:	fb33 990a 	smlawb	r9, r3, sl, r9
 8001d6a:	fb34 880b 	smlawb	r8, r4, fp, r8
 8001d6e:	fb35 770c 	smlawb	r7, r5, ip, r7
 8001d72:	fb39 331a 	smlawt	r3, r9, sl, r3
 8001d76:	fb38 441b 	smlawt	r4, r8, fp, r4
 8001d7a:	fb37 551c 	smlawt	r5, r7, ip, r5
 8001d7e:	fb33 990a 	smlawb	r9, r3, sl, r9
 8001d82:	fb34 880b 	smlawb	r8, r4, fp, r8
 8001d86:	eba5 0507 	sub.w	r5, r5, r7
 8001d8a:	fb35 770c 	smlawb	r7, r5, ip, r7
 8001d8e:	4770      	bx	lr

08001d90 <IMDCT12_TWICE>:
 8001d90:	f20f 039c 	addw	r3, pc, #156	; 0x9c
 8001d94:	e893 1c10 	ldmia.w	r3, {r4, sl, fp, ip}
 8001d98:	eb04 4202 	add.w	r2, r4, r2, lsl #16
 8001d9c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
 8001da0:	e8b1 03f0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9}
 8001da4:	e900 03f0 	stmdb	r0, {r4, r5, r6, r7, r8, r9}
 8001da8:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8001dac:	f7ff ffa2 	bl	8001cf4 <IMDCT12>
 8001db0:	f1a0 0e38 	sub.w	lr, r0, #56	; 0x38
 8001db4:	e88e 03b8 	stmia.w	lr, {r3, r4, r5, r7, r8, r9}
 8001db8:	f7ff ff9c 	bl	8001cf4 <IMDCT12>
 8001dbc:	f1a0 0e28 	sub.w	lr, r0, #40	; 0x28
 8001dc0:	e88e 03b8 	stmia.w	lr, {r3, r4, r5, r7, r8, r9}
 8001dc4:	f7ff ff96 	bl	8001cf4 <IMDCT12>
 8001dc8:	e901 03b8 	stmdb	r1, {r3, r4, r5, r7, r8, r9}
 8001dcc:	f101 010c 	add.w	r1, r1, #12
 8001dd0:	e8b1 03f0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9}
 8001dd4:	f1c5 0500 	rsb	r5, r5, #0
 8001dd8:	f1c7 0700 	rsb	r7, r7, #0
 8001ddc:	f1c9 0900 	rsb	r9, r9, #0
 8001de0:	e900 03f0 	stmdb	r0, {r4, r5, r6, r7, r8, r9}
 8001de4:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8001de8:	f7ff ff84 	bl	8001cf4 <IMDCT12>
 8001dec:	f1a0 0e38 	sub.w	lr, r0, #56	; 0x38
 8001df0:	f1c4 0400 	rsb	r4, r4, #0
 8001df4:	f1c9 0900 	rsb	r9, r9, #0
 8001df8:	f1c7 0700 	rsb	r7, r7, #0
 8001dfc:	e88e 03b8 	stmia.w	lr, {r3, r4, r5, r7, r8, r9}
 8001e00:	f7ff ff78 	bl	8001cf4 <IMDCT12>
 8001e04:	f1a0 0e28 	sub.w	lr, r0, #40	; 0x28
 8001e08:	f1c4 0400 	rsb	r4, r4, #0
 8001e0c:	f1c9 0900 	rsb	r9, r9, #0
 8001e10:	f1c7 0700 	rsb	r7, r7, #0
 8001e14:	e88e 03b8 	stmia.w	lr, {r3, r4, r5, r7, r8, r9}
 8001e18:	f7ff ff6c 	bl	8001cf4 <IMDCT12>
 8001e1c:	e901 03b8 	stmdb	r1, {r3, r4, r5, r7, r8, r9}
 8001e20:	f101 010c 	add.w	r1, r1, #12
 8001e24:	f5b2 3200 	subs.w	r2, r2, #131072	; 0x20000
 8001e28:	d5ba      	bpl.n	8001da0 <IMDCT12_TWICE+0x10>
 8001e2a:	f1a0 0018 	sub.w	r0, r0, #24
 8001e2e:	e2c3      	b.n	80023b8 <MP3D_SPCORP_Symbol_028+0x1c>
 8001e30:	ffffddb4 	.word	0xffffddb4
 8001e34:	de9610c7 	.word	0xde9610c7
 8001e38:	9e0832ec 	.word	0x9e0832ec
 8001e3c:	642856e6 	.word	0x642856e6

08001e40 <IMDCT36_TWICE>:
 8001e40:	f8df 454c 	ldr.w	r4, [pc, #1356]	; 8002390 <IMDCT36_TWICE+0x550>
 8001e44:	f84d ed04 	str.w	lr, [sp, #-4]!
 8001e48:	eb04 4e02 	add.w	lr, r4, r2, lsl #16
 8001e4c:	ea4e 7e83 	orr.w	lr, lr, r3, lsl #30
 8001e50:	f8df 25a0 	ldr.w	r2, [pc, #1440]	; 80023f4 <MP3D_SPCORP_Symbol_028+0x58>
 8001e54:	f100 0004 	add.w	r0, r0, #4
 8001e58:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8001e5a:	4423      	add	r3, r4
 8001e5c:	eba3 0b44 	sub.w	fp, r3, r4, lsl #1
 8001e60:	eba6 0a05 	sub.w	sl, r6, r5
 8001e64:	ebaa 0c46 	sub.w	ip, sl, r6, lsl #1
 8001e68:	f840 3c10 	str.w	r3, [r0, #-16]
 8001e6c:	f840 cc0c 	str.w	ip, [r0, #-12]
 8001e70:	e8b0 1038 	ldmia.w	r0!, {r3, r4, r5, ip}
 8001e74:	4423      	add	r3, r4
 8001e76:	eba3 0944 	sub.w	r9, r3, r4, lsl #1
 8001e7a:	ebac 0805 	sub.w	r8, ip, r5
 8001e7e:	eba8 0c4c 	sub.w	ip, r8, ip, lsl #1
 8001e82:	f840 3c18 	str.w	r3, [r0, #-24]
 8001e86:	f840 cc14 	str.w	ip, [r0, #-20]
 8001e8a:	c888      	ldmia	r0!, {r3, r7}
 8001e8c:	e8b0 1040 	ldmia.w	r0!, {r6, ip}
 8001e90:	443b      	add	r3, r7
 8001e92:	eba3 0747 	sub.w	r7, r3, r7, lsl #1
 8001e96:	ebac 0606 	sub.w	r6, ip, r6
 8001e9a:	eba6 0c4c 	sub.w	ip, r6, ip, lsl #1
 8001e9e:	f840 3c20 	str.w	r3, [r0, #-32]
 8001ea2:	f840 cc1c 	str.w	ip, [r0, #-28]
 8001ea6:	c828      	ldmia	r0!, {r3, r5}
 8001ea8:	e8b0 1010 	ldmia.w	r0!, {r4, ip}
 8001eac:	442b      	add	r3, r5
 8001eae:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
 8001eb2:	ebac 0404 	sub.w	r4, ip, r4
 8001eb6:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8001eba:	f840 3c28 	str.w	r3, [r0, #-40]
 8001ebe:	f840 cc24 	str.w	ip, [r0, #-36]
 8001ec2:	f850 3944 	ldr.w	r3, [r0], #-68
 8001ec6:	eba4 0c08 	sub.w	ip, r4, r8
 8001eca:	ebac 0c0a 	sub.w	ip, ip, sl
 8001ece:	44a0      	add	r8, r4
 8001ed0:	44a2      	add	sl, r4
 8001ed2:	eba3 0409 	sub.w	r4, r3, r9
 8001ed6:	eb03 0369 	add.w	r3, r3, r9, asr #1
 8001eda:	eba5 0907 	sub.w	r9, r5, r7
 8001ede:	eba9 090b 	sub.w	r9, r9, fp
 8001ee2:	442f      	add	r7, r5
 8001ee4:	44ab      	add	fp, r5
 8001ee6:	eb04 0569 	add.w	r5, r4, r9, asr #1
 8001eea:	eba4 0409 	sub.w	r4, r4, r9
 8001eee:	f84d 4d10 	str.w	r4, [sp, #-16]!
 8001ef2:	fb3c cc0e 	smlawb	ip, ip, lr, ip
 8001ef6:	fb36 660e 	smlawb	r6, r6, lr, r6
 8001efa:	f8df 9498 	ldr.w	r9, [pc, #1176]	; 8002394 <IMDCT36_TWICE+0x554>
 8001efe:	ebac 0505 	sub.w	r5, ip, r5
 8001f02:	eba5 0c4c 	sub.w	ip, r5, ip, lsl #1
 8001f06:	fb37 7419 	smlawt	r4, r7, r9, r7
 8001f0a:	fb3b 4409 	smlawb	r4, fp, r9, r4
 8001f0e:	ebab 0b07 	sub.w	fp, fp, r7
 8001f12:	fb3b bb19 	smlawt	fp, fp, r9, fp
 8001f16:	fb37 f709 	smulwb	r7, r7, r9
 8001f1a:	f8df 947c 	ldr.w	r9, [pc, #1148]	; 8002398 <IMDCT36_TWICE+0x558>
 8001f1e:	ebab 0b07 	sub.w	fp, fp, r7
 8001f22:	eba8 070a 	sub.w	r7, r8, sl
 8001f26:	fb38 8809 	smlawb	r8, r8, r9, r8
 8001f2a:	fb3a aa19 	smlawt	sl, sl, r9, sl
 8001f2e:	fb37 aa09 	smlawb	sl, r7, r9, sl
 8001f32:	4433      	add	r3, r6
 8001f34:	44ba      	add	sl, r7
 8001f36:	fb37 7719 	smlawt	r7, r7, r9, r7
 8001f3a:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
 8001f3e:	eba8 0907 	sub.w	r9, r8, r7
 8001f42:	eb04 070b 	add.w	r7, r4, fp
 8001f46:	eba9 080a 	sub.w	r8, r9, sl
 8001f4a:	4454      	add	r4, sl
 8001f4c:	eba4 0a4a 	sub.w	sl, r4, sl, lsl #1
 8001f50:	441c      	add	r4, r3
 8001f52:	44b2      	add	sl, r6
 8001f54:	44cb      	add	fp, r9
 8001f56:	ebab 0949 	sub.w	r9, fp, r9, lsl #1
 8001f5a:	44b3      	add	fp, r6
 8001f5c:	4499      	add	r9, r3
 8001f5e:	4447      	add	r7, r8
 8001f60:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8001f64:	eba7 0706 	sub.w	r7, r7, r6
 8001f68:	eba8 0803 	sub.w	r8, r8, r3
 8001f6c:	e92d 0180 	stmdb	sp!, {r7, r8}
 8001f70:	f84d 9d04 	str.w	r9, [sp, #-4]!
 8001f74:	f84d bd04 	str.w	fp, [sp, #-4]!
 8001f78:	b420      	push	{r5}
 8001f7a:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001f7e:	e92d 0410 	stmdb	sp!, {r4, sl}
 8001f82:	e890 0ff8 	ldmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001f86:	f1c3 0300 	rsb	r3, r3, #0
 8001f8a:	eba4 0c08 	sub.w	ip, r4, r8
 8001f8e:	ebac 0c0a 	sub.w	ip, ip, sl
 8001f92:	44a0      	add	r8, r4
 8001f94:	44a2      	add	sl, r4
 8001f96:	eba3 0409 	sub.w	r4, r3, r9
 8001f9a:	eb03 0369 	add.w	r3, r3, r9, asr #1
 8001f9e:	eba5 0907 	sub.w	r9, r5, r7
 8001fa2:	eba9 090b 	sub.w	r9, r9, fp
 8001fa6:	442f      	add	r7, r5
 8001fa8:	44ab      	add	fp, r5
 8001faa:	eb04 0569 	add.w	r5, r4, r9, asr #1
 8001fae:	eba4 0409 	sub.w	r4, r4, r9
 8001fb2:	940b      	str	r4, [sp, #44]	; 0x2c
 8001fb4:	fb3c cc0e 	smlawb	ip, ip, lr, ip
 8001fb8:	fb36 660e 	smlawb	r6, r6, lr, r6
 8001fbc:	f8df 93d4 	ldr.w	r9, [pc, #980]	; 8002394 <IMDCT36_TWICE+0x554>
 8001fc0:	4465      	add	r5, ip
 8001fc2:	eba5 0c4c 	sub.w	ip, r5, ip, lsl #1
 8001fc6:	fb37 7419 	smlawt	r4, r7, r9, r7
 8001fca:	fb3b 4409 	smlawb	r4, fp, r9, r4
 8001fce:	ebab 0b07 	sub.w	fp, fp, r7
 8001fd2:	fb3b bb19 	smlawt	fp, fp, r9, fp
 8001fd6:	fb37 f709 	smulwb	r7, r7, r9
 8001fda:	f8df 93bc 	ldr.w	r9, [pc, #956]	; 8002398 <IMDCT36_TWICE+0x558>
 8001fde:	ebab 0b07 	sub.w	fp, fp, r7
 8001fe2:	eba8 070a 	sub.w	r7, r8, sl
 8001fe6:	fb38 8809 	smlawb	r8, r8, r9, r8
 8001fea:	fb3a aa19 	smlawt	sl, sl, r9, sl
 8001fee:	fb37 aa09 	smlawb	sl, r7, r9, sl
 8001ff2:	4433      	add	r3, r6
 8001ff4:	44ba      	add	sl, r7
 8001ff6:	fb37 7719 	smlawt	r7, r7, r9, r7
 8001ffa:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
 8001ffe:	eba8 0907 	sub.w	r9, r8, r7
 8002002:	eb04 070b 	add.w	r7, r4, fp
 8002006:	eba9 080a 	sub.w	r8, r9, sl
 800200a:	4454      	add	r4, sl
 800200c:	eba4 0a4a 	sub.w	sl, r4, sl, lsl #1
 8002010:	441c      	add	r4, r3
 8002012:	44b2      	add	sl, r6
 8002014:	44cb      	add	fp, r9
 8002016:	ebab 0949 	sub.w	r9, fp, r9, lsl #1
 800201a:	44b3      	add	fp, r6
 800201c:	4499      	add	r9, r3
 800201e:	4447      	add	r7, r8
 8002020:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8002024:	eba6 0707 	sub.w	r7, r6, r7
 8002028:	eba3 0808 	sub.w	r8, r3, r8
 800202c:	9709      	str	r7, [sp, #36]	; 0x24
 800202e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8002032:	4af1      	ldr	r2, [pc, #964]	; (80023f8 <MP3D_SPCORP_Symbol_028+0x5c>)
 8002034:	f5be 0e01 	subs.w	lr, lr, #8454144	; 0x810000
 8002038:	f100 80ea 	bmi.w	8002210 <IMDCT36_TWICE+0x3d0>
 800203c:	ea5f 284e 	movs.w	r8, lr, lsl #9
 8002040:	bc48      	pop	{r3, r6}
 8002042:	e8b2 0180 	ldmia.w	r2!, {r7, r8}
 8002046:	b500      	push	{lr}
 8002048:	fb34 3307 	smlawb	r3, r4, r7, r3
 800204c:	fb3a 6608 	smlawb	r6, sl, r8, r6
 8002050:	fb33 4417 	smlawt	r4, r3, r7, r4
 8002054:	fb36 aa18 	smlawt	sl, r6, r8, sl
 8002058:	eba4 0403 	sub.w	r4, r4, r3
 800205c:	fb34 3307 	smlawb	r3, r4, r7, r3
 8002060:	fb3a 6608 	smlawb	r6, sl, r8, r6
 8002064:	f8d1 e000 	ldr.w	lr, [r1]
 8002068:	600c      	str	r4, [r1, #0]
 800206a:	4674      	mov	r4, lr
 800206c:	f101 0120 	add.w	r1, r1, #32
 8002070:	f8d1 e000 	ldr.w	lr, [r1]
 8002074:	f8c1 a000 	str.w	sl, [r1]
 8002078:	46f2      	mov	sl, lr
 800207a:	f1a1 011c 	sub.w	r1, r1, #28
 800207e:	fb34 3308 	smlawb	r3, r4, r8, r3
 8002082:	fb3a 6607 	smlawb	r6, sl, r7, r6
 8002086:	fb33 4418 	smlawt	r4, r3, r8, r4
 800208a:	fb36 aa17 	smlawt	sl, r6, r7, sl
 800208e:	fb34 3308 	smlawb	r3, r4, r8, r3
 8002092:	ebaa 0a06 	sub.w	sl, sl, r6
 8002096:	fb3a 6607 	smlawb	r6, sl, r7, r6
 800209a:	bf3c      	itt	cc
 800209c:	425b      	negcc	r3, r3
 800209e:	4276      	negcc	r6, r6
 80020a0:	f840 ac28 	str.w	sl, [r0, #-40]
 80020a4:	f840 6c24 	str.w	r6, [r0, #-36]
 80020a8:	f840 4c48 	str.w	r4, [r0, #-72]
 80020ac:	f840 3c04 	str.w	r3, [r0, #-4]
 80020b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80020b4:	bc48      	pop	{r3, r6}
 80020b6:	e8b2 0180 	ldmia.w	r2!, {r7, r8}
 80020ba:	fb35 3307 	smlawb	r3, r5, r7, r3
 80020be:	fb3c 6608 	smlawb	r6, ip, r8, r6
 80020c2:	fb33 5517 	smlawt	r5, r3, r7, r5
 80020c6:	fb36 cc18 	smlawt	ip, r6, r8, ip
 80020ca:	eba5 0503 	sub.w	r5, r5, r3
 80020ce:	fb35 3307 	smlawb	r3, r5, r7, r3
 80020d2:	fb3c 6608 	smlawb	r6, ip, r8, r6
 80020d6:	f8d1 a000 	ldr.w	sl, [r1]
 80020da:	f841 5b18 	str.w	r5, [r1], #24
 80020de:	680d      	ldr	r5, [r1, #0]
 80020e0:	f841 c914 	str.w	ip, [r1], #-20
 80020e4:	fb3a 3308 	smlawb	r3, sl, r8, r3
 80020e8:	fb35 6607 	smlawb	r6, r5, r7, r6
 80020ec:	fb33 aa18 	smlawt	sl, r3, r8, sl
 80020f0:	fb36 5517 	smlawt	r5, r6, r7, r5
 80020f4:	fb3a 3308 	smlawb	r3, sl, r8, r3
 80020f8:	eba5 0506 	sub.w	r5, r5, r6
 80020fc:	fb35 6607 	smlawb	r6, r5, r7, r6
 8002100:	bf3c      	itt	cc
 8002102:	f1ca 0a00 	rsbcc	sl, sl, #0
 8002106:	426d      	negcc	r5, r5
 8002108:	f840 5c2c 	str.w	r5, [r0, #-44]
 800210c:	f840 6c20 	str.w	r6, [r0, #-32]
 8002110:	f840 ac44 	str.w	sl, [r0, #-68]
 8002114:	f840 3c08 	str.w	r3, [r0, #-8]
 8002118:	bc48      	pop	{r3, r6}
 800211a:	e8b2 0180 	ldmia.w	r2!, {r7, r8}
 800211e:	fb3b 3307 	smlawb	r3, fp, r7, r3
 8002122:	fb39 6608 	smlawb	r6, r9, r8, r6
 8002126:	fb33 bb17 	smlawt	fp, r3, r7, fp
 800212a:	fb36 9918 	smlawt	r9, r6, r8, r9
 800212e:	ebab 0b03 	sub.w	fp, fp, r3
 8002132:	fb3b 3307 	smlawb	r3, fp, r7, r3
 8002136:	fb39 6608 	smlawb	r6, r9, r8, r6
 800213a:	f8d1 a000 	ldr.w	sl, [r1]
 800213e:	f841 bb10 	str.w	fp, [r1], #16
 8002142:	f8d1 b000 	ldr.w	fp, [r1]
 8002146:	f841 990c 	str.w	r9, [r1], #-12
 800214a:	fb3a 3308 	smlawb	r3, sl, r8, r3
 800214e:	fb3b 6607 	smlawb	r6, fp, r7, r6
 8002152:	fb33 aa18 	smlawt	sl, r3, r8, sl
 8002156:	fb36 bb17 	smlawt	fp, r6, r7, fp
 800215a:	fb3a 3308 	smlawb	r3, sl, r8, r3
 800215e:	ebab 0b06 	sub.w	fp, fp, r6
 8002162:	fb3b 6607 	smlawb	r6, fp, r7, r6
 8002166:	bf3c      	itt	cc
 8002168:	425b      	negcc	r3, r3
 800216a:	4276      	negcc	r6, r6
 800216c:	f840 bc30 	str.w	fp, [r0, #-48]
 8002170:	f840 6c1c 	str.w	r6, [r0, #-28]
 8002174:	f840 ac40 	str.w	sl, [r0, #-64]
 8002178:	f840 3c0c 	str.w	r3, [r0, #-12]
 800217c:	e8b2 0118 	ldmia.w	r2!, {r3, r4, r8}
 8002180:	e8bd 1ec0 	ldmia.w	sp!, {r6, r7, r9, sl, fp, ip}
 8002184:	fb3a 6604 	smlawb	r6, sl, r4, r6
 8002188:	fb3b 7708 	smlawb	r7, fp, r8, r7
 800218c:	fb3c 9903 	smlawb	r9, ip, r3, r9
 8002190:	fb36 aa14 	smlawt	sl, r6, r4, sl
 8002194:	fb37 bb18 	smlawt	fp, r7, r8, fp
 8002198:	fb39 cc13 	smlawt	ip, r9, r3, ip
 800219c:	fb3a 6604 	smlawb	r6, sl, r4, r6
 80021a0:	fb3b 7708 	smlawb	r7, fp, r8, r7
 80021a4:	fb3c 9903 	smlawb	r9, ip, r3, r9
 80021a8:	680d      	ldr	r5, [r1, #0]
 80021aa:	f841 ab08 	str.w	sl, [r1], #8
 80021ae:	f8d1 a000 	ldr.w	sl, [r1]
 80021b2:	f841 b904 	str.w	fp, [r1], #-4
 80021b6:	f8d1 b000 	ldr.w	fp, [r1]
 80021ba:	f841 cb14 	str.w	ip, [r1], #20
 80021be:	fb35 6608 	smlawb	r6, r5, r8, r6
 80021c2:	fb3a 7704 	smlawb	r7, sl, r4, r7
 80021c6:	fb3b 9903 	smlawb	r9, fp, r3, r9
 80021ca:	fb36 5518 	smlawt	r5, r6, r8, r5
 80021ce:	fb37 aa14 	smlawt	sl, r7, r4, sl
 80021d2:	fb39 bb13 	smlawt	fp, r9, r3, fp
 80021d6:	fb35 6608 	smlawb	r6, r5, r8, r6
 80021da:	fb3a 7704 	smlawb	r7, sl, r4, r7
 80021de:	fb3b 9903 	smlawb	r9, fp, r3, r9
 80021e2:	bf3e      	ittt	cc
 80021e4:	426d      	negcc	r5, r5
 80021e6:	f1ca 0a00 	rsbcc	sl, sl, #0
 80021ea:	f1c9 0900 	rsbcc	r9, r9, #0
 80021ee:	f840 ac34 	str.w	sl, [r0, #-52]
 80021f2:	f840 7c18 	str.w	r7, [r0, #-24]
 80021f6:	f840 5c3c 	str.w	r5, [r0, #-60]
 80021fa:	f840 6c10 	str.w	r6, [r0, #-16]
 80021fe:	f840 bc38 	str.w	fp, [r0, #-56]
 8002202:	f840 9c14 	str.w	r9, [r0, #-20]
 8002206:	f100 004c 	add.w	r0, r0, #76	; 0x4c
 800220a:	f53f ae25 	bmi.w	8001e58 <IMDCT36_TWICE+0x18>
 800220e:	bd00      	pop	{pc}
 8002210:	ea5f 284e 	movs.w	r8, lr, lsl #9
 8002214:	f1a0 0048 	sub.w	r0, r0, #72	; 0x48
 8002218:	e8b1 01c8 	ldmia.w	r1!, {r3, r6, r7, r8}
 800221c:	bf3c      	itt	cc
 800221e:	4276      	negcc	r6, r6
 8002220:	f1c8 0800 	rsbcc	r8, r8, #0
 8002224:	e8a0 01c8 	stmia.w	r0!, {r3, r6, r7, r8}
 8002228:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800222c:	f851 7910 	ldr.w	r7, [r1], #-16
 8002230:	bf38      	it	cc
 8002232:	f1c8 0800 	rsbcc	r8, r8, #0
 8002236:	f8c0 8004 	str.w	r8, [r0, #4]
 800223a:	f840 7b38 	str.w	r7, [r0], #56
 800223e:	bc48      	pop	{r3, r6}
 8002240:	e8b2 0180 	ldmia.w	r2!, {r7, r8}
 8002244:	fb34 3307 	smlawb	r3, r4, r7, r3
 8002248:	fb3a 6608 	smlawb	r6, sl, r8, r6
 800224c:	fb33 4417 	smlawt	r4, r3, r7, r4
 8002250:	fb36 aa18 	smlawt	sl, r6, r8, sl
 8002254:	eba4 0403 	sub.w	r4, r4, r3
 8002258:	fb34 3307 	smlawb	r3, r4, r7, r3
 800225c:	fb3a 6608 	smlawb	r6, sl, r8, r6
 8002260:	e8b2 0180 	ldmia.w	r2!, {r7, r8}
 8002264:	f841 4b20 	str.w	r4, [r1], #32
 8002268:	680c      	ldr	r4, [r1, #0]
 800226a:	f8c1 a000 	str.w	sl, [r1]
 800226e:	46a2      	mov	sl, r4
 8002270:	bf38      	it	cc
 8002272:	425b      	negcc	r3, r3
 8002274:	fb3a 6607 	smlawb	r6, sl, r7, r6
 8002278:	f1a1 011c 	sub.w	r1, r1, #28
 800227c:	fb36 aa17 	smlawt	sl, r6, r7, sl
 8002280:	f840 3c04 	str.w	r3, [r0, #-4]
 8002284:	ebaa 0a06 	sub.w	sl, sl, r6
 8002288:	fb3a 6607 	smlawb	r6, sl, r7, r6
 800228c:	f840 ac28 	str.w	sl, [r0, #-40]
 8002290:	bf38      	it	cc
 8002292:	4276      	negcc	r6, r6
 8002294:	f840 6c24 	str.w	r6, [r0, #-36]
 8002298:	bc48      	pop	{r3, r6}
 800229a:	fb35 3307 	smlawb	r3, r5, r7, r3
 800229e:	fb3c 6608 	smlawb	r6, ip, r8, r6
 80022a2:	fb33 5517 	smlawt	r5, r3, r7, r5
 80022a6:	fb36 cc18 	smlawt	ip, r6, r8, ip
 80022aa:	eba5 0503 	sub.w	r5, r5, r3
 80022ae:	fb35 3307 	smlawb	r3, r5, r7, r3
 80022b2:	fb3c 6608 	smlawb	r6, ip, r8, r6
 80022b6:	6897      	ldr	r7, [r2, #8]
 80022b8:	f841 5b18 	str.w	r5, [r1], #24
 80022bc:	680d      	ldr	r5, [r1, #0]
 80022be:	f8c1 c000 	str.w	ip, [r1]
 80022c2:	46ac      	mov	ip, r5
 80022c4:	fb3c 6607 	smlawb	r6, ip, r7, r6
 80022c8:	f1a1 0114 	sub.w	r1, r1, #20
 80022cc:	fb36 cc17 	smlawt	ip, r6, r7, ip
 80022d0:	f840 3c08 	str.w	r3, [r0, #-8]
 80022d4:	fb3c 6607 	smlawb	r6, ip, r7, r6
 80022d8:	bf38      	it	cc
 80022da:	f1cc 0c00 	rsbcc	ip, ip, #0
 80022de:	f840 cc2c 	str.w	ip, [r0, #-44]
 80022e2:	f840 6c20 	str.w	r6, [r0, #-32]
 80022e6:	bc48      	pop	{r3, r6}
 80022e8:	e8b2 0180 	ldmia.w	r2!, {r7, r8}
 80022ec:	fb3b 3307 	smlawb	r3, fp, r7, r3
 80022f0:	fb39 6608 	smlawb	r6, r9, r8, r6
 80022f4:	fb33 bb17 	smlawt	fp, r3, r7, fp
 80022f8:	fb36 9918 	smlawt	r9, r6, r8, r9
 80022fc:	ebab 0b03 	sub.w	fp, fp, r3
 8002300:	fb3b 3307 	smlawb	r3, fp, r7, r3
 8002304:	fb39 6608 	smlawb	r6, r9, r8, r6
 8002308:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 800230c:	f841 bb10 	str.w	fp, [r1], #16
 8002310:	f8d1 b000 	ldr.w	fp, [r1]
 8002314:	f8c1 9000 	str.w	r9, [r1]
 8002318:	46d9      	mov	r9, fp
 800231a:	bf38      	it	cc
 800231c:	425b      	negcc	r3, r3
 800231e:	fb39 6607 	smlawb	r6, r9, r7, r6
 8002322:	f1a1 010c 	sub.w	r1, r1, #12
 8002326:	fb36 9917 	smlawt	r9, r6, r7, r9
 800232a:	f840 3c0c 	str.w	r3, [r0, #-12]
 800232e:	fb39 6607 	smlawb	r6, r9, r7, r6
 8002332:	f840 9c30 	str.w	r9, [r0, #-48]
 8002336:	bf38      	it	cc
 8002338:	4276      	negcc	r6, r6
 800233a:	f840 6c1c 	str.w	r6, [r0, #-28]
 800233e:	e8b2 0118 	ldmia.w	r2!, {r3, r4, r8}
 8002342:	e8bd 1ec0 	ldmia.w	sp!, {r6, r7, r9, sl, fp, ip}
 8002346:	fb3a 6604 	smlawb	r6, sl, r4, r6
 800234a:	fb3b 7708 	smlawb	r7, fp, r8, r7
 800234e:	fb3c 9903 	smlawb	r9, ip, r3, r9
 8002352:	fb36 aa14 	smlawt	sl, r6, r4, sl
 8002356:	fb37 bb18 	smlawt	fp, r7, r8, fp
 800235a:	fb39 cc13 	smlawt	ip, r9, r3, ip
 800235e:	fb3a 6604 	smlawb	r6, sl, r4, r6
 8002362:	fb3b 7708 	smlawb	r7, fp, r8, r7
 8002366:	fb3c 9903 	smlawb	r9, ip, r3, r9
 800236a:	e8a1 1400 	stmia.w	r1!, {sl, ip}
 800236e:	f841 bb10 	str.w	fp, [r1], #16
 8002372:	bf38      	it	cc
 8002374:	f1c9 0900 	rsbcc	r9, r9, #0
 8002378:	f840 7c18 	str.w	r7, [r0, #-24]
 800237c:	f840 9c14 	str.w	r9, [r0, #-20]
 8002380:	f840 6c10 	str.w	r6, [r0, #-16]
 8002384:	f100 004c 	add.w	r0, r0, #76	; 0x4c
 8002388:	f53f ad66 	bmi.w	8001e58 <IMDCT36_TWICE+0x18>
 800238c:	bd00      	pop	{pc}
 800238e:	0000      	.short	0x0000
 8002390:	403fddb4 	.word	0x403fddb4
 8002394:	c41b2c74 	.word	0xc41b2c74
 8002398:	fc1ca48e 	.word	0xfc1ca48e

0800239c <MP3D_SPCORP_Symbol_028>:
 800239c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80023a0:	2a00      	cmp	r2, #0
 80023a2:	d117      	bne.n	80023d4 <MP3D_SPCORP_Symbol_028+0x38>
 80023a4:	9a00      	ldr	r2, [sp, #0]
 80023a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	f43f acf0 	beq.w	8001d90 <IMDCT12_TWICE>
 80023b0:	f7ff fd46 	bl	8001e40 <IMDCT36_TWICE>
 80023b4:	f1a0 004c 	sub.w	r0, r0, #76	; 0x4c
 80023b8:	f04f 0100 	mov.w	r1, #0
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	c00e      	stmia	r0!, {r1, r2, r3}
 80023c6:	c00e      	stmia	r0!, {r1, r2, r3}
 80023c8:	c00e      	stmia	r0!, {r1, r2, r3}
 80023ca:	c00e      	stmia	r0!, {r1, r2, r3}
 80023cc:	c00e      	stmia	r0!, {r1, r2, r3}
 80023ce:	c00e      	stmia	r0!, {r1, r2, r3}
 80023d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023d4:	e92d 4ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	f7ff fd30 	bl	8001e40 <IMDCT36_TWICE>
 80023e0:	bc0c      	pop	{r2, r3}
 80023e2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80023e6:	ebd2 020c 	rsbs	r2, r2, ip
 80023ea:	bf88      	it	hi
 80023ec:	1f00      	subhi	r0, r0, #4
 80023ee:	d8dc      	bhi.n	80023aa <MP3D_SPCORP_Symbol_028+0xe>
 80023f0:	e7e0      	b.n	80023b4 <MP3D_SPCORP_Symbol_028+0x18>
 80023f2:	0000      	.short	0x0000
 80023f4:	0800e7b4 	.word	0x0800e7b4
 80023f8:	0800e790 	.word	0x0800e790

080023fc <MP3D_SPCORP_Symbol_032>:
 80023fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002400:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
 8002404:	4558      	cmp	r0, fp
 8002406:	4603      	mov	r3, r0
 8002408:	d247      	bcs.n	800249a <MP3D_SPCORP_Symbol_032+0x9e>
 800240a:	f811 5b03 	ldrb.w	r5, [r1], #3
 800240e:	f8df c098 	ldr.w	ip, [pc, #152]	; 80024a8 <MP3D_SPCORP_Symbol_032+0xac>
 8002412:	f8df e098 	ldr.w	lr, [pc, #152]	; 80024ac <MP3D_SPCORP_Symbol_032+0xb0>
 8002416:	ea4f 0545 	mov.w	r5, r5, lsl #1
 800241a:	f83c c005 	ldrh.w	ip, [ip, r5]
 800241e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002422:	f1a5 0602 	sub.w	r6, r5, #2
 8002426:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
 800242a:	d030      	beq.n	800248e <MP3D_SPCORP_Symbol_032+0x92>
 800242c:	f81e af01 	ldrb.w	sl, [lr, #1]!
 8002430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002434:	d3fa      	bcc.n	800242c <MP3D_SPCORP_Symbol_032+0x30>
 8002436:	4652      	mov	r2, sl
 8002438:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 800243c:	e897 0300 	ldmia.w	r7, {r8, r9}
 8002440:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002444:	ebb2 0246 	subs.w	r2, r2, r6, lsl #1
 8002448:	bf44      	itt	mi
 800244a:	eb12 0206 	addsmi.w	r2, r2, r6
 800244e:	eb12 0206 	addsmi.w	r2, r2, r6
 8002452:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 8002456:	4552      	cmp	r2, sl
 8002458:	bf18      	it	ne
 800245a:	e897 0030 	ldmiane.w	r7, {r4, r5}
 800245e:	e887 0300 	stmia.w	r7, {r8, r9}
 8002462:	d011      	beq.n	8002488 <MP3D_SPCORP_Symbol_032+0x8c>
 8002464:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002468:	ebb2 0246 	subs.w	r2, r2, r6, lsl #1
 800246c:	bf44      	itt	mi
 800246e:	eb12 0206 	addsmi.w	r2, r2, r6
 8002472:	eb12 0206 	addsmi.w	r2, r2, r6
 8002476:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 800247a:	4552      	cmp	r2, sl
 800247c:	bf18      	it	ne
 800247e:	e897 0300 	ldmiane.w	r7, {r8, r9}
 8002482:	e887 0030 	stmia.w	r7, {r4, r5}
 8002486:	d1db      	bne.n	8002440 <MP3D_SPCORP_Symbol_032+0x44>
 8002488:	f1bc 0f00 	cmp.w	ip, #0
 800248c:	d1ce      	bne.n	800242c <MP3D_SPCORP_Symbol_032+0x30>
 800248e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8002492:	f103 0308 	add.w	r3, r3, #8
 8002496:	455b      	cmp	r3, fp
 8002498:	d3b7      	bcc.n	800240a <MP3D_SPCORP_Symbol_032+0xe>
 800249a:	eba3 0000 	sub.w	r0, r3, r0
 800249e:	ea4f 00a0 	mov.w	r0, r0, asr #2
 80024a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024a6:	0000      	.short	0x0000
 80024a8:	0800e7c0 	.word	0x0800e7c0
 80024ac:	0800e7b3 	.word	0x0800e7b3

080024b0 <MP3D_SPCORP_Symbol_031>:
 80024b0:	e92d 09f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp}
 80024b4:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 80024b8:	f101 0102 	add.w	r1, r1, #2
 80024bc:	1089      	asrs	r1, r1, #2
 80024be:	d20e      	bcs.n	80024de <MP3D_SPCORP_Symbol_031+0x2e>
 80024c0:	e890 0018 	ldmia.w	r0, {r3, r4}
 80024c4:	e892 1800 	ldmia.w	r2, {fp, ip}
 80024c8:	1e49      	subs	r1, r1, #1
 80024ca:	445b      	add	r3, fp
 80024cc:	eba3 0b4b 	sub.w	fp, r3, fp, lsl #1
 80024d0:	4464      	add	r4, ip
 80024d2:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 80024d6:	c018      	stmia	r0!, {r3, r4}
 80024d8:	e8a2 1800 	stmia.w	r2!, {fp, ip}
 80024dc:	dd14      	ble.n	8002508 <MP3D_SPCORP_Symbol_031+0x58>
 80024de:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
 80024e2:	e892 1980 	ldmia.w	r2, {r7, r8, fp, ip}
 80024e6:	1e49      	subs	r1, r1, #1
 80024e8:	443b      	add	r3, r7
 80024ea:	eba3 0747 	sub.w	r7, r3, r7, lsl #1
 80024ee:	4444      	add	r4, r8
 80024f0:	eba4 0848 	sub.w	r8, r4, r8, lsl #1
 80024f4:	445d      	add	r5, fp
 80024f6:	eba5 0b4b 	sub.w	fp, r5, fp, lsl #1
 80024fa:	4466      	add	r6, ip
 80024fc:	eba6 0c4c 	sub.w	ip, r6, ip, lsl #1
 8002500:	c078      	stmia	r0!, {r3, r4, r5, r6}
 8002502:	e8a2 1980 	stmia.w	r2!, {r7, r8, fp, ip}
 8002506:	dcea      	bgt.n	80024de <MP3D_SPCORP_Symbol_031+0x2e>
 8002508:	e8bd 09f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp}
 800250c:	4770      	bx	lr

0800250e <IStereo>:
 800250e:	ea4f 33c3 	mov.w	r3, r3, lsl #15
 8002512:	ea4f 32c2 	mov.w	r2, r2, lsl #15
 8002516:	f8db c000 	ldr.w	ip, [fp]
 800251a:	1e76      	subs	r6, r6, #1
 800251c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002520:	fb8c 0103 	smull	r0, r1, ip, r3
 8002524:	f8cb 1900 	str.w	r1, [fp, #2304]	; 0x900
 8002528:	fb8c 0102 	smull	r0, r1, ip, r2
 800252c:	f8db c004 	ldr.w	ip, [fp, #4]
 8002530:	f84b 1b04 	str.w	r1, [fp], #4
 8002534:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002538:	fb8c 0103 	smull	r0, r1, ip, r3
 800253c:	f8cb 1900 	str.w	r1, [fp, #2304]	; 0x900
 8002540:	fb8c 0102 	smull	r0, r1, ip, r2
 8002544:	f84b 1b04 	str.w	r1, [fp], #4
 8002548:	dce5      	bgt.n	8002516 <IStereo+0x8>
 800254a:	e0bb      	b.n	80026c4 <MP3D_SPCORP_Symbol_029+0x178>

0800254c <MP3D_SPCORP_Symbol_029>:
 800254c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002550:	469a      	mov	sl, r3
 8002552:	7a93      	ldrb	r3, [r2, #10]
 8002554:	f892 c00b 	ldrb.w	ip, [r2, #11]
 8002558:	b087      	sub	sp, #28
 800255a:	f10d 0810 	add.w	r8, sp, #16
 800255e:	eb03 070c 	add.w	r7, r3, ip
 8002562:	7a53      	ldrb	r3, [r2, #9]
 8002564:	f500 6e10 	add.w	lr, r0, #2304	; 0x900
 8002568:	f04f 0502 	mov.w	r5, #2
 800256c:	eb03 0c02 	add.w	ip, r3, r2
 8002570:	f06f 0300 	mvn.w	r3, #0
 8002574:	4666      	mov	r6, ip
 8002576:	f04f 0400 	mov.w	r4, #0
 800257a:	9304      	str	r3, [sp, #16]
 800257c:	9305      	str	r3, [sp, #20]
 800257e:	9306      	str	r3, [sp, #24]
 8002580:	e019      	b.n	80025b6 <MP3D_SPCORP_Symbol_029+0x6a>
 8002582:	f816 9b01 	ldrb.w	r9, [r6], #1
 8002586:	4673      	mov	r3, lr
 8002588:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 800258c:	f8d3 9000 	ldr.w	r9, [r3]
 8002590:	f1b9 0f00 	cmp.w	r9, #0
 8002594:	bf06      	itte	eq
 8002596:	f8d3 9004 	ldreq.w	r9, [r3, #4]
 800259a:	f1b9 0f00 	cmpeq.w	r9, #0
 800259e:	f848 4025 	strne.w	r4, [r8, r5, lsl #2]
 80025a2:	d103      	bne.n	80025ac <MP3D_SPCORP_Symbol_029+0x60>
 80025a4:	f103 0308 	add.w	r3, r3, #8
 80025a8:	4573      	cmp	r3, lr
 80025aa:	d3ef      	bcc.n	800258c <MP3D_SPCORP_Symbol_029+0x40>
 80025ac:	1e6d      	subs	r5, r5, #1
 80025ae:	bf48      	it	mi
 80025b0:	2502      	movmi	r5, #2
 80025b2:	f104 0401 	add.w	r4, r4, #1
 80025b6:	42bc      	cmp	r4, r7
 80025b8:	dbe3      	blt.n	8002582 <MP3D_SPCORP_Symbol_029+0x36>
 80025ba:	7a93      	ldrb	r3, [r2, #10]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00f      	beq.n	80025e0 <MP3D_SPCORP_Symbol_029+0x94>
 80025c0:	f10d 0e10 	add.w	lr, sp, #16
 80025c4:	e89e 4008 	ldmia.w	lr, {r3, lr}
 80025c8:	4573      	cmp	r3, lr
 80025ca:	bfd4      	ite	le
 80025cc:	9b05      	ldrle	r3, [sp, #20]
 80025ce:	9b04      	ldrgt	r3, [sp, #16]
 80025d0:	f8dd e018 	ldr.w	lr, [sp, #24]
 80025d4:	459e      	cmp	lr, r3
 80025d6:	bfa8      	it	ge
 80025d8:	9b06      	ldrge	r3, [sp, #24]
 80025da:	9306      	str	r3, [sp, #24]
 80025dc:	9305      	str	r3, [sp, #20]
 80025de:	9304      	str	r3, [sp, #16]
 80025e0:	7ad3      	ldrb	r3, [r2, #11]
 80025e2:	f41a 2500 	ands.w	r5, sl, #524288	; 0x80000
 80025e6:	bf18      	it	ne
 80025e8:	2503      	movne	r5, #3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bf0c      	ite	eq
 80025ee:	2401      	moveq	r4, #1
 80025f0:	2403      	movne	r4, #3
 80025f2:	f1a4 0e01 	sub.w	lr, r4, #1
 80025f6:	eba7 0604 	sub.w	r6, r7, r4
 80025fa:	4643      	mov	r3, r8
 80025fc:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
 8002600:	eba6 0704 	sub.w	r7, r6, r4
 8002604:	45b9      	cmp	r9, r7
 8002606:	bfb4      	ite	lt
 8002608:	57cf      	ldrsblt	r7, [r1, r7]
 800260a:	462f      	movge	r7, r5
 800260c:	f1be 0e01 	subs.w	lr, lr, #1
 8002610:	558f      	strb	r7, [r1, r6]
 8002612:	f106 0601 	add.w	r6, r6, #1
 8002616:	d5f1      	bpl.n	80025fc <MP3D_SPCORP_Symbol_029+0xb0>
 8002618:	4683      	mov	fp, r0
 800261a:	8b50      	ldrh	r0, [r2, #26]
 800261c:	460f      	mov	r7, r1
 800261e:	f04f 0502 	mov.w	r5, #2
 8002622:	f000 0201 	and.w	r2, r0, #1
 8002626:	f04f 0001 	mov.w	r0, #1
 800262a:	ea20 41da 	bic.w	r1, r0, sl, lsr #19
 800262e:	2900      	cmp	r1, #0
 8002630:	a802      	add	r0, sp, #8
 8002632:	e880 0006 	stmia.w	r0, {r1, r2}
 8002636:	bf14      	ite	ne
 8002638:	2140      	movne	r1, #64	; 0x40
 800263a:	2107      	moveq	r1, #7
 800263c:	9101      	str	r1, [sp, #4]
 800263e:	f89c 6000 	ldrb.w	r6, [ip]
 8002642:	bf0c      	ite	eq
 8002644:	f8df 4094 	ldreq.w	r4, [pc, #148]	; 80026dc <MP3D_SPCORP_Symbol_029+0x190>
 8002648:	f8df 4094 	ldrne.w	r4, [pc, #148]	; 80026e0 <MP3D_SPCORP_Symbol_029+0x194>
 800264c:	f01a 0f20 	tst.w	sl, #32
 8002650:	bf08      	it	eq
 8002652:	1d24      	addeq	r4, r4, #4
 8002654:	f10c 0901 	add.w	r9, ip, #1
 8002658:	f04f 0800 	mov.w	r8, #0
 800265c:	a904      	add	r1, sp, #16
 800265e:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8002662:	f917 0b01 	ldrsb.w	r0, [r7], #1
 8002666:	4541      	cmp	r1, r8
 8002668:	da23      	bge.n	80026b2 <MP3D_SPCORP_Symbol_029+0x166>
 800266a:	9901      	ldr	r1, [sp, #4]
 800266c:	4288      	cmp	r0, r1
 800266e:	d220      	bcs.n	80026b2 <MP3D_SPCORP_Symbol_029+0x166>
 8002670:	9902      	ldr	r1, [sp, #8]
 8002672:	2900      	cmp	r1, #0
 8002674:	bf02      	ittt	eq
 8002676:	eb04 00c0 	addeq.w	r0, r4, r0, lsl #3
 800267a:	8802      	ldrheq	r2, [r0, #0]
 800267c:	8843      	ldrheq	r3, [r0, #2]
 800267e:	f43f af46 	beq.w	800250e <IStereo>
 8002682:	9a03      	ldr	r2, [sp, #12]
 8002684:	f100 0101 	add.w	r1, r0, #1
 8002688:	ea4f 0161 	mov.w	r1, r1, asr #1
 800268c:	fa01 f102 	lsl.w	r1, r1, r2
 8002690:	f001 0303 	and.w	r3, r1, #3
 8002694:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	8822      	ldrh	r2, [r4, #0]
 800269c:	ea4f 01a1 	mov.w	r1, r1, asr #2
 80026a0:	f010 0f01 	tst.w	r0, #1
 80026a4:	fa23 f301 	lsr.w	r3, r3, r1
 80026a8:	bf1e      	ittt	ne
 80026aa:	4610      	movne	r0, r2
 80026ac:	461a      	movne	r2, r3
 80026ae:	4603      	movne	r3, r0
 80026b0:	e72d      	b.n	800250e <IStereo>
 80026b2:	f01a 0f20 	tst.w	sl, #32
 80026b6:	bf1e      	ittt	ne
 80026b8:	0071      	lslne	r1, r6, #1
 80026ba:	4658      	movne	r0, fp
 80026bc:	f7ff fef8 	blne	80024b0 <MP3D_SPCORP_Symbol_031>
 80026c0:	eb0b 0bc6 	add.w	fp, fp, r6, lsl #3
 80026c4:	f819 6b01 	ldrb.w	r6, [r9], #1
 80026c8:	1e6d      	subs	r5, r5, #1
 80026ca:	bf48      	it	mi
 80026cc:	2502      	movmi	r5, #2
 80026ce:	2e00      	cmp	r6, #0
 80026d0:	f108 0801 	add.w	r8, r8, #1
 80026d4:	d1c2      	bne.n	800265c <MP3D_SPCORP_Symbol_029+0x110>
 80026d6:	b007      	add	sp, #28
 80026d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026dc:	0800e810 	.word	0x0800e810
 80026e0:	0800e804 	.word	0x0800e804

080026e4 <IDCT32PLONKAS>:
 80026e4:	ea4f 11b1 	mov.w	r1, r1, ror #6
 80026e8:	b50f      	push	{r0, r1, r2, r3, lr}
 80026ea:	f101 5280 	add.w	r2, r1, #268435456	; 0x10000000
 80026ee:	f101 0111 	add.w	r1, r1, #17
 80026f2:	ea4f 61b1 	mov.w	r1, r1, ror #26
 80026f6:	ea4f 62b2 	mov.w	r2, r2, ror #26
 80026fa:	f84d 2d64 	str.w	r2, [sp, #-100]!
 80026fe:	f84d 1d04 	str.w	r1, [sp, #-4]!
 8002702:	f500 6490 	add.w	r4, r0, #1152	; 0x480
 8002706:	f854 1948 	ldr.w	r1, [r4], #-72
 800270a:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 800270e:	f850 3b48 	ldr.w	r3, [r0], #72
 8002712:	f854 5948 	ldr.w	r5, [r4], #-72
 8002716:	f85c eb04 	ldr.w	lr, [ip], #4
 800271a:	4413      	add	r3, r2
 800271c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002720:	440d      	add	r5, r1
 8002722:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 8002726:	fb31 220e 	smlawb	r2, r1, lr, r2
 800272a:	442b      	add	r3, r5
 800272c:	eba3 0b45 	sub.w	fp, r3, r5, lsl #1
 8002730:	fb32 111e 	smlawt	r1, r2, lr, r1
 8002734:	9302      	str	r3, [sp, #8]
 8002736:	fb31 220e 	smlawb	r2, r1, lr, r2
 800273a:	9119      	str	r1, [sp, #100]	; 0x64
 800273c:	920a      	str	r2, [sp, #40]	; 0x28
 800273e:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 8002742:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 8002746:	f850 3b48 	ldr.w	r3, [r0], #72
 800274a:	f854 5948 	ldr.w	r5, [r4], #-72
 800274e:	f85c eb04 	ldr.w	lr, [ip], #4
 8002752:	4413      	add	r3, r2
 8002754:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002758:	440d      	add	r5, r1
 800275a:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 800275e:	fb31 220e 	smlawb	r2, r1, lr, r2
 8002762:	442b      	add	r3, r5
 8002764:	eba3 0a45 	sub.w	sl, r3, r5, lsl #1
 8002768:	fb32 111e 	smlawt	r1, r2, lr, r1
 800276c:	9303      	str	r3, [sp, #12]
 800276e:	fb31 220e 	smlawb	r2, r1, lr, r2
 8002772:	9118      	str	r1, [sp, #96]	; 0x60
 8002774:	920b      	str	r2, [sp, #44]	; 0x2c
 8002776:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 800277a:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 800277e:	f850 3b48 	ldr.w	r3, [r0], #72
 8002782:	f854 5948 	ldr.w	r5, [r4], #-72
 8002786:	f85c eb04 	ldr.w	lr, [ip], #4
 800278a:	4413      	add	r3, r2
 800278c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002790:	440d      	add	r5, r1
 8002792:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 8002796:	fb31 220e 	smlawb	r2, r1, lr, r2
 800279a:	442b      	add	r3, r5
 800279c:	eba3 0945 	sub.w	r9, r3, r5, lsl #1
 80027a0:	fb32 111e 	smlawt	r1, r2, lr, r1
 80027a4:	9304      	str	r3, [sp, #16]
 80027a6:	fb31 220e 	smlawb	r2, r1, lr, r2
 80027aa:	9117      	str	r1, [sp, #92]	; 0x5c
 80027ac:	920c      	str	r2, [sp, #48]	; 0x30
 80027ae:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 80027b2:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 80027b6:	f850 3b48 	ldr.w	r3, [r0], #72
 80027ba:	f854 5948 	ldr.w	r5, [r4], #-72
 80027be:	f85c eb04 	ldr.w	lr, [ip], #4
 80027c2:	4413      	add	r3, r2
 80027c4:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 80027c8:	440d      	add	r5, r1
 80027ca:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 80027ce:	fb31 220e 	smlawb	r2, r1, lr, r2
 80027d2:	442b      	add	r3, r5
 80027d4:	eba3 0845 	sub.w	r8, r3, r5, lsl #1
 80027d8:	fb32 111e 	smlawt	r1, r2, lr, r1
 80027dc:	9305      	str	r3, [sp, #20]
 80027de:	fb31 220e 	smlawb	r2, r1, lr, r2
 80027e2:	9116      	str	r1, [sp, #88]	; 0x58
 80027e4:	920d      	str	r2, [sp, #52]	; 0x34
 80027e6:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 80027ea:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 80027ee:	f850 3b48 	ldr.w	r3, [r0], #72
 80027f2:	f854 5948 	ldr.w	r5, [r4], #-72
 80027f6:	f85c eb04 	ldr.w	lr, [ip], #4
 80027fa:	4413      	add	r3, r2
 80027fc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002800:	440d      	add	r5, r1
 8002802:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 8002806:	fb31 220e 	smlawb	r2, r1, lr, r2
 800280a:	442b      	add	r3, r5
 800280c:	eba3 0745 	sub.w	r7, r3, r5, lsl #1
 8002810:	fb32 111e 	smlawt	r1, r2, lr, r1
 8002814:	9306      	str	r3, [sp, #24]
 8002816:	fb31 220e 	smlawb	r2, r1, lr, r2
 800281a:	9115      	str	r1, [sp, #84]	; 0x54
 800281c:	920e      	str	r2, [sp, #56]	; 0x38
 800281e:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 8002822:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 8002826:	f850 3b48 	ldr.w	r3, [r0], #72
 800282a:	f854 5948 	ldr.w	r5, [r4], #-72
 800282e:	f85c eb04 	ldr.w	lr, [ip], #4
 8002832:	4413      	add	r3, r2
 8002834:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002838:	440d      	add	r5, r1
 800283a:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 800283e:	fb31 220e 	smlawb	r2, r1, lr, r2
 8002842:	442b      	add	r3, r5
 8002844:	eba3 0645 	sub.w	r6, r3, r5, lsl #1
 8002848:	fb32 111e 	smlawt	r1, r2, lr, r1
 800284c:	9307      	str	r3, [sp, #28]
 800284e:	eba1 0102 	sub.w	r1, r1, r2
 8002852:	fb31 220e 	smlawb	r2, r1, lr, r2
 8002856:	9114      	str	r1, [sp, #80]	; 0x50
 8002858:	920f      	str	r2, [sp, #60]	; 0x3c
 800285a:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 800285e:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 8002862:	f850 3b48 	ldr.w	r3, [r0], #72
 8002866:	f854 5948 	ldr.w	r5, [r4], #-72
 800286a:	f85c eb04 	ldr.w	lr, [ip], #4
 800286e:	4413      	add	r3, r2
 8002870:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002874:	440d      	add	r5, r1
 8002876:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 800287a:	fb31 220e 	smlawb	r2, r1, lr, r2
 800287e:	442b      	add	r3, r5
 8002880:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
 8002884:	fb32 111e 	smlawt	r1, r2, lr, r1
 8002888:	9308      	str	r3, [sp, #32]
 800288a:	eba1 0102 	sub.w	r1, r1, r2
 800288e:	fb31 220e 	smlawb	r2, r1, lr, r2
 8002892:	9113      	str	r1, [sp, #76]	; 0x4c
 8002894:	9210      	str	r2, [sp, #64]	; 0x40
 8002896:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 800289a:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 800289e:	6803      	ldr	r3, [r0, #0]
 80028a0:	f2a0 10f8 	subw	r0, r0, #504	; 0x1f8
 80028a4:	6824      	ldr	r4, [r4, #0]
 80028a6:	f85c eb04 	ldr.w	lr, [ip], #4
 80028aa:	4413      	add	r3, r2
 80028ac:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 80028b0:	440c      	add	r4, r1
 80028b2:	eba4 0141 	sub.w	r1, r4, r1, lsl #1
 80028b6:	fb31 220e 	smlawb	r2, r1, lr, r2
 80028ba:	4423      	add	r3, r4
 80028bc:	eba3 0444 	sub.w	r4, r3, r4, lsl #1
 80028c0:	fb32 111e 	smlawt	r1, r2, lr, r1
 80028c4:	9309      	str	r3, [sp, #36]	; 0x24
 80028c6:	eba1 0102 	sub.w	r1, r1, r2
 80028ca:	fb31 220e 	smlawb	r2, r1, lr, r2
 80028ce:	9112      	str	r1, [sp, #72]	; 0x48
 80028d0:	9211      	str	r2, [sp, #68]	; 0x44
 80028d2:	e8bc 400e 	ldmia.w	ip!, {r1, r2, r3, lr}
 80028d6:	fb34 bb01 	smlawb	fp, r4, r1, fp
 80028da:	fb35 aa02 	smlawb	sl, r5, r2, sl
 80028de:	fb3b 4411 	smlawt	r4, fp, r1, r4
 80028e2:	fb3a 5512 	smlawt	r5, sl, r2, r5
 80028e6:	fb34 bb01 	smlawb	fp, r4, r1, fp
 80028ea:	fb35 aa02 	smlawb	sl, r5, r2, sl
 80028ee:	fb36 9903 	smlawb	r9, r6, r3, r9
 80028f2:	fb37 880e 	smlawb	r8, r7, lr, r8
 80028f6:	fb39 6613 	smlawt	r6, r9, r3, r6
 80028fa:	fb38 771e 	smlawt	r7, r8, lr, r7
 80028fe:	fb36 9903 	smlawb	r9, r6, r3, r9
 8002902:	eba7 0708 	sub.w	r7, r7, r8
 8002906:	fb37 880e 	smlawb	r8, r7, lr, r8
 800290a:	44ca      	add	sl, r9
 800290c:	ebaa 0949 	sub.w	r9, sl, r9, lsl #1
 8002910:	44c3      	add	fp, r8
 8002912:	ebab 0848 	sub.w	r8, fp, r8, lsl #1
 8002916:	eba7 0704 	sub.w	r7, r7, r4
 800291a:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800291e:	eba5 0606 	sub.w	r6, r5, r6
 8002922:	eba6 0545 	sub.w	r5, r6, r5, lsl #1
 8002926:	e89c 5009 	ldmia.w	ip, {r0, r3, ip, lr}
 800292a:	44d3      	add	fp, sl
 800292c:	ebab 0a4a 	sub.w	sl, fp, sl, lsl #1
 8002930:	fb3a aa0e 	smlawb	sl, sl, lr, sl
 8002934:	4437      	add	r7, r6
 8002936:	eba7 0646 	sub.w	r6, r7, r6, lsl #1
 800293a:	fb36 660e 	smlawb	r6, r6, lr, r6
 800293e:	fb39 880c 	smlawb	r8, r9, ip, r8
 8002942:	fb35 440c 	smlawb	r4, r5, ip, r4
 8002946:	fb38 991c 	smlawt	r9, r8, ip, r9
 800294a:	fb34 551c 	smlawt	r5, r4, ip, r5
 800294e:	fb39 880c 	smlawb	r8, r9, ip, r8
 8002952:	fb35 440c 	smlawb	r4, r5, ip, r4
 8002956:	44b2      	add	sl, r6
 8002958:	ebaa 0646 	sub.w	r6, sl, r6, lsl #1
 800295c:	eba8 0805 	sub.w	r8, r8, r5
 8002960:	eb08 0545 	add.w	r5, r8, r5, lsl #1
 8002964:	eba4 0909 	sub.w	r9, r4, r9
 8002968:	eba9 0444 	sub.w	r4, r9, r4, lsl #1
 800296c:	bc06      	pop	{r1, r2}
 800296e:	f8c1 6080 	str.w	r6, [r1, #128]	; 0x80
 8002972:	f8c1 4180 	str.w	r4, [r1, #384]	; 0x180
 8002976:	f8c1 9280 	str.w	r9, [r1, #640]	; 0x280
 800297a:	f8c1 7380 	str.w	r7, [r1, #896]	; 0x380
 800297e:	f8c2 a080 	str.w	sl, [r2, #128]	; 0x80
 8002982:	f8c2 8180 	str.w	r8, [r2, #384]	; 0x180
 8002986:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
 800298a:	f8c2 b380 	str.w	fp, [r2, #896]	; 0x380
 800298e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002992:	4447      	add	r7, r8
 8002994:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8002998:	444e      	add	r6, r9
 800299a:	eba6 0949 	sub.w	r9, r6, r9, lsl #1
 800299e:	4455      	add	r5, sl
 80029a0:	eba5 0a4a 	sub.w	sl, r5, sl, lsl #1
 80029a4:	445c      	add	r4, fp
 80029a6:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 80029aa:	fb38 bb00 	smlawb	fp, r8, r0, fp
 80029ae:	4435      	add	r5, r6
 80029b0:	fb39 aa03 	smlawb	sl, r9, r3, sl
 80029b4:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80029b8:	fb3b 8810 	smlawt	r8, fp, r0, r8
 80029bc:	443c      	add	r4, r7
 80029be:	fb3a 9913 	smlawt	r9, sl, r3, r9
 80029c2:	eba4 0747 	sub.w	r7, r4, r7, lsl #1
 80029c6:	fb38 bb00 	smlawb	fp, r8, r0, fp
 80029ca:	442c      	add	r4, r5
 80029cc:	eba9 090a 	sub.w	r9, r9, sl
 80029d0:	fb39 aa03 	smlawb	sl, r9, r3, sl
 80029d4:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 80029d8:	fb36 770c 	smlawb	r7, r6, ip, r7
 80029dc:	44d3      	add	fp, sl
 80029de:	ebab 0a4a 	sub.w	sl, fp, sl, lsl #1
 80029e2:	fb37 661c 	smlawt	r6, r7, ip, r6
 80029e6:	eba9 0908 	sub.w	r9, r9, r8
 80029ea:	eb09 0848 	add.w	r8, r9, r8, lsl #1
 80029ee:	fb3a aa0e 	smlawb	sl, sl, lr, sl
 80029f2:	fb38 880e 	smlawb	r8, r8, lr, r8
 80029f6:	fb36 770c 	smlawb	r7, r6, ip, r7
 80029fa:	fb35 550e 	smlawb	r5, r5, lr, r5
 80029fe:	44c2      	add	sl, r8
 8002a00:	ebaa 0848 	sub.w	r8, sl, r8, lsl #1
 8002a04:	f1c6 0600 	rsb	r6, r6, #0
 8002a08:	f8c2 8100 	str.w	r8, [r2, #256]	; 0x100
 8002a0c:	f8c2 7200 	str.w	r7, [r2, #512]	; 0x200
 8002a10:	f8c2 b300 	str.w	fp, [r2, #768]	; 0x300
 8002a14:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8002a18:	600d      	str	r5, [r1, #0]
 8002a1a:	6015      	str	r5, [r2, #0]
 8002a1c:	f8c1 a100 	str.w	sl, [r1, #256]	; 0x100
 8002a20:	f8c1 6200 	str.w	r6, [r1, #512]	; 0x200
 8002a24:	f8c1 9300 	str.w	r9, [r1, #768]	; 0x300
 8002a28:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002a2c:	4447      	add	r7, r8
 8002a2e:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8002a32:	444e      	add	r6, r9
 8002a34:	eba6 0949 	sub.w	r9, r6, r9, lsl #1
 8002a38:	4455      	add	r5, sl
 8002a3a:	eba5 0a4a 	sub.w	sl, r5, sl, lsl #1
 8002a3e:	445c      	add	r4, fp
 8002a40:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8002a44:	fb38 bb00 	smlawb	fp, r8, r0, fp
 8002a48:	4435      	add	r5, r6
 8002a4a:	fb39 aa03 	smlawb	sl, r9, r3, sl
 8002a4e:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8002a52:	fb3b 8810 	smlawt	r8, fp, r0, r8
 8002a56:	443c      	add	r4, r7
 8002a58:	fb3a 9913 	smlawt	r9, sl, r3, r9
 8002a5c:	eba4 0747 	sub.w	r7, r4, r7, lsl #1
 8002a60:	fb38 bb00 	smlawb	fp, r8, r0, fp
 8002a64:	442c      	add	r4, r5
 8002a66:	eba9 090a 	sub.w	r9, r9, sl
 8002a6a:	fb39 aa03 	smlawb	sl, r9, r3, sl
 8002a6e:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8002a72:	fb36 770c 	smlawb	r7, r6, ip, r7
 8002a76:	44d3      	add	fp, sl
 8002a78:	ebab 0a4a 	sub.w	sl, fp, sl, lsl #1
 8002a7c:	fb37 661c 	smlawt	r6, r7, ip, r6
 8002a80:	eba9 0908 	sub.w	r9, r9, r8
 8002a84:	eb09 0848 	add.w	r8, r9, r8, lsl #1
 8002a88:	fb3a aa0e 	smlawb	sl, sl, lr, sl
 8002a8c:	fb38 880e 	smlawb	r8, r8, lr, r8
 8002a90:	fb36 770c 	smlawb	r7, r6, ip, r7
 8002a94:	fb35 550e 	smlawb	r5, r5, lr, r5
 8002a98:	44c2      	add	sl, r8
 8002a9a:	ebaa 0848 	sub.w	r8, sl, r8, lsl #1
 8002a9e:	f8c2 43c0 	str.w	r4, [r2, #960]	; 0x3c0
 8002aa2:	e92d 0fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp}
 8002aa6:	f10d 0b1c 	add.w	fp, sp, #28
 8002aaa:	e89b 0ff0 	ldmia.w	fp, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002aae:	eba8 0707 	sub.w	r7, r8, r7
 8002ab2:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8002ab6:	eba6 0609 	sub.w	r6, r6, r9
 8002aba:	eb06 0949 	add.w	r9, r6, r9, lsl #1
 8002abe:	ebaa 0505 	sub.w	r5, sl, r5
 8002ac2:	eba5 0a4a 	sub.w	sl, r5, sl, lsl #1
 8002ac6:	eba4 040b 	sub.w	r4, r4, fp
 8002aca:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8002ace:	fb38 bb00 	smlawb	fp, r8, r0, fp
 8002ad2:	4435      	add	r5, r6
 8002ad4:	fb39 aa03 	smlawb	sl, r9, r3, sl
 8002ad8:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8002adc:	fb3b 8810 	smlawt	r8, fp, r0, r8
 8002ae0:	443c      	add	r4, r7
 8002ae2:	fb3a 9913 	smlawt	r9, sl, r3, r9
 8002ae6:	eba4 0747 	sub.w	r7, r4, r7, lsl #1
 8002aea:	fb38 bb00 	smlawb	fp, r8, r0, fp
 8002aee:	442c      	add	r4, r5
 8002af0:	eba9 090a 	sub.w	r9, r9, sl
 8002af4:	fb39 aa03 	smlawb	sl, r9, r3, sl
 8002af8:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8002afc:	fb36 770c 	smlawb	r7, r6, ip, r7
 8002b00:	44d3      	add	fp, sl
 8002b02:	ebab 0a4a 	sub.w	sl, fp, sl, lsl #1
 8002b06:	fb37 661c 	smlawt	r6, r7, ip, r6
 8002b0a:	eba9 0908 	sub.w	r9, r9, r8
 8002b0e:	eb09 0848 	add.w	r8, r9, r8, lsl #1
 8002b12:	fb3a aa0e 	smlawb	sl, sl, lr, sl
 8002b16:	fb38 880e 	smlawb	r8, r8, lr, r8
 8002b1a:	fb36 770c 	smlawb	r7, r6, ip, r7
 8002b1e:	fb35 550e 	smlawb	r5, r5, lr, r5
 8002b22:	44c2      	add	sl, r8
 8002b24:	ebaa 0848 	sub.w	r8, sl, r8, lsl #1
 8002b28:	f8c1 43c0 	str.w	r4, [r1, #960]	; 0x3c0
 8002b2c:	e8bd 5018 	ldmia.w	sp!, {r3, r4, ip, lr}
 8002b30:	441d      	add	r5, r3
 8002b32:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 8002b36:	6415      	str	r5, [r2, #64]	; 0x40
 8002b38:	640b      	str	r3, [r1, #64]	; 0x40
 8002b3a:	eba7 0404 	sub.w	r4, r7, r4
 8002b3e:	eba4 0747 	sub.w	r7, r4, r7, lsl #1
 8002b42:	f8c1 41c0 	str.w	r4, [r1, #448]	; 0x1c0
 8002b46:	f8c1 7240 	str.w	r7, [r1, #576]	; 0x240
 8002b4a:	44b4      	add	ip, r6
 8002b4c:	ebac 0646 	sub.w	r6, ip, r6, lsl #1
 8002b50:	f8c2 6240 	str.w	r6, [r2, #576]	; 0x240
 8002b54:	f8c2 c1c0 	str.w	ip, [r2, #448]	; 0x1c0
 8002b58:	e8bd 1018 	ldmia.w	sp!, {r3, r4, ip}
 8002b5c:	44d6      	add	lr, sl
 8002b5e:	ebae 0a4a 	sub.w	sl, lr, sl, lsl #1
 8002b62:	f8c2 e0c0 	str.w	lr, [r2, #192]	; 0xc0
 8002b66:	f8c2 a140 	str.w	sl, [r2, #320]	; 0x140
 8002b6a:	445b      	add	r3, fp
 8002b6c:	eba3 0b4b 	sub.w	fp, r3, fp, lsl #1
 8002b70:	f8c1 3340 	str.w	r3, [r1, #832]	; 0x340
 8002b74:	f8c1 b2c0 	str.w	fp, [r1, #704]	; 0x2c0
 8002b78:	4444      	add	r4, r8
 8002b7a:	eba4 0848 	sub.w	r8, r4, r8, lsl #1
 8002b7e:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
 8002b82:	f8c1 80c0 	str.w	r8, [r1, #192]	; 0xc0
 8002b86:	44cc      	add	ip, r9
 8002b88:	ebac 0949 	sub.w	r9, ip, r9, lsl #1
 8002b8c:	f8c2 c2c0 	str.w	ip, [r2, #704]	; 0x2c0
 8002b90:	f8c2 9340 	str.w	r9, [r2, #832]	; 0x340
 8002b94:	b008      	add	sp, #32
 8002b96:	9803      	ldr	r0, [sp, #12]
 8002b98:	ea4f 11b1 	mov.w	r1, r1, ror #6
 8002b9c:	f001 4270 	and.w	r2, r1, #4026531840	; 0xf0000000
 8002ba0:	f8df c890 	ldr.w	ip, [pc, #2192]	; 8003434 <MP3D_SPCORP_Symbol_033+0x34>
 8002ba4:	ea4f 1181 	mov.w	r1, r1, lsl #6
 8002ba8:	ebac 6cd2 	sub.w	ip, ip, r2, lsr #27
 8002bac:	f102 43e0 	add.w	r3, r2, #1879048192	; 0x70000000
 8002bb0:	eb01 6793 	add.w	r7, r1, r3, lsr #26
 8002bb4:	683f      	ldr	r7, [r7, #0]
 8002bb6:	f103 5880 	add.w	r8, r3, #268435456	; 0x10000000
 8002bba:	eb01 6898 	add.w	r8, r1, r8, lsr #26
 8002bbe:	e898 0120 	ldmia.w	r8, {r5, r8}
 8002bc2:	442f      	add	r7, r5
 8002bc4:	eba7 0708 	sub.w	r7, r7, r8
 8002bc8:	e8bc 4010 	ldmia.w	ip!, {r4, lr}
 8002bcc:	e8b1 0f00 	ldmia.w	r1!, {r8, r9, sl, fp}
 8002bd0:	fb38 7704 	smlawb	r7, r8, r4, r7
 8002bd4:	fb39 7714 	smlawt	r7, r9, r4, r7
 8002bd8:	fb3a 770e 	smlawb	r7, sl, lr, r7
 8002bdc:	fb3b 771e 	smlawt	r7, fp, lr, r7
 8002be0:	e8bc 4010 	ldmia.w	ip!, {r4, lr}
 8002be4:	e8b1 0f00 	ldmia.w	r1!, {r8, r9, sl, fp}
 8002be8:	fb38 7704 	smlawb	r7, r8, r4, r7
 8002bec:	fb39 7714 	smlawt	r7, r9, r4, r7
 8002bf0:	fb3a 770e 	smlawb	r7, sl, lr, r7
 8002bf4:	fb3b 771e 	smlawt	r7, fp, lr, r7
 8002bf8:	e8bc 4010 	ldmia.w	ip!, {r4, lr}
 8002bfc:	e8b1 0f00 	ldmia.w	r1!, {r8, r9, sl, fp}
 8002c00:	fb38 7704 	smlawb	r7, r8, r4, r7
 8002c04:	fb39 7714 	smlawt	r7, r9, r4, r7
 8002c08:	fb3a 770e 	smlawb	r7, sl, lr, r7
 8002c0c:	fb3b 771e 	smlawt	r7, fp, lr, r7
 8002c10:	e8bc 4010 	ldmia.w	ip!, {r4, lr}
 8002c14:	e8b1 0f00 	ldmia.w	r1!, {r8, r9, sl, fp}
 8002c18:	fb38 7704 	smlawb	r7, r8, r4, r7
 8002c1c:	fb39 7714 	smlawt	r7, r9, r4, r7
 8002c20:	fb3a 770e 	smlawb	r7, sl, lr, r7
 8002c24:	fb3b 771e 	smlawt	r7, fp, lr, r7
 8002c28:	f10c 0c20 	add.w	ip, ip, #32
 8002c2c:	f501 7471 	add.w	r4, r1, #964	; 0x3c4
 8002c30:	f854 ab08 	ldr.w	sl, [r4], #8
 8002c34:	f854 bb08 	ldr.w	fp, [r4], #8
 8002c38:	e8bc 4020 	ldmia.w	ip!, {r5, lr}
 8002c3c:	fb3a f615 	smulwt	r6, sl, r5
 8002c40:	fb3b 661e 	smlawt	r6, fp, lr, r6
 8002c44:	f854 ab08 	ldr.w	sl, [r4], #8
 8002c48:	f854 bb08 	ldr.w	fp, [r4], #8
 8002c4c:	e8bc 4020 	ldmia.w	ip!, {r5, lr}
 8002c50:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002c54:	fb3b 661e 	smlawt	r6, fp, lr, r6
 8002c58:	f854 ab08 	ldr.w	sl, [r4], #8
 8002c5c:	f854 bb08 	ldr.w	fp, [r4], #8
 8002c60:	e8bc 4020 	ldmia.w	ip!, {r5, lr}
 8002c64:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002c68:	fb3b 661e 	smlawt	r6, fp, lr, r6
 8002c6c:	f854 ab08 	ldr.w	sl, [r4], #8
 8002c70:	f854 b93c 	ldr.w	fp, [r4], #-60
 8002c74:	e8bc 4020 	ldmia.w	ip!, {r5, lr}
 8002c78:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002c7c:	fb3b 661e 	smlawt	r6, fp, lr, r6
 8002c80:	eb04 6a93 	add.w	sl, r4, r3, lsr #26
 8002c84:	f8da a000 	ldr.w	sl, [sl]
 8002c88:	eb01 6492 	add.w	r4, r1, r2, lsr #26
 8002c8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c90:	ebaa 0606 	sub.w	r6, sl, r6
 8002c94:	f506 7600 	add.w	r6, r6, #512	; 0x200
 8002c98:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002c9c:	f326 268f 	ssat	r6, #16, r6, asr #10
 8002ca0:	f327 278f 	ssat	r7, #16, r7, asr #10
 8002ca4:	f820 7b48 	strh.w	r7, [r0], #72
 8002ca8:	f500 6390 	add.w	r3, r0, #1152	; 0x480
 8002cac:	f823 6c48 	strh.w	r6, [r3, #-72]
 8002cb0:	f500 6307 	add.w	r3, r0, #2160	; 0x870
 8002cb4:	f8df c780 	ldr.w	ip, [pc, #1920]	; 8003438 <MP3D_SPCORP_Symbol_033+0x38>
 8002cb8:	f1a4 0408 	sub.w	r4, r4, #8
 8002cbc:	f20f 080c 	addw	r8, pc, #12
 8002cc0:	eb08 68d2 	add.w	r8, r8, r2, lsr #27
 8002cc4:	f8d8 8000 	ldr.w	r8, [r8]
 8002cc8:	46c7      	mov	pc, r8
 8002cca:	0000      	.short	0x0000
 8002ccc:	08002ced 	.word	0x08002ced
 8002cd0:	08002dcf 	.word	0x08002dcf
 8002cd4:	08002ea9 	.word	0x08002ea9
 8002cd8:	08002f83 	.word	0x08002f83
 8002cdc:	0800305d 	.word	0x0800305d
 8002ce0:	08003137 	.word	0x08003137
 8002ce4:	08003211 	.word	0x08003211
 8002ce8:	080032eb 	.word	0x080032eb

08002cec <offset_0>:
 8002cec:	f104 0408 	add.w	r4, r4, #8
 8002cf0:	e8f4 8902 	ldrd	r8, r9, [r4], #8
 8002cf4:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002cf8:	e9d4 ab0c 	ldrd	sl, fp, [r4, #48]	; 0x30
 8002cfc:	fb38 1602 	smlawb	r6, r8, r2, r1
 8002d00:	fb3b fe12 	smulwt	lr, fp, r2
 8002d04:	fb38 1712 	smlawt	r7, r8, r2, r1
 8002d08:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002d0c:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002d10:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002d14:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002d18:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002d1c:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002d20:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002d24:	e9d4 ab08 	ldrd	sl, fp, [r4, #32]
 8002d28:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002d2c:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002d30:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002d34:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002d38:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002d3c:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002d40:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002d44:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002d48:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002d4c:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002d50:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
 8002d54:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002d58:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002d5c:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002d60:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002d64:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002d68:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002d6c:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002d70:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002d74:	e894 0f00 	ldmia.w	r4, {r8, r9, sl, fp}
 8002d78:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002d7c:	f104 0428 	add.w	r4, r4, #40	; 0x28
 8002d80:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002d84:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002d88:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002d8c:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002d90:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 8002d94:	eb07 0768 	add.w	r7, r7, r8, asr #1
 8002d98:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002d9c:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002da0:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002da4:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002da8:	ebae 0e09 	sub.w	lr, lr, r9
 8002dac:	4456      	add	r6, sl
 8002dae:	eba7 070a 	sub.w	r7, r7, sl
 8002db2:	eba6 060e 	sub.w	r6, r6, lr
 8002db6:	444f      	add	r7, r9
 8002db8:	f326 268f 	ssat	r6, #16, r6, asr #10
 8002dbc:	f327 278f 	ssat	r7, #16, r7, asr #10
 8002dc0:	f820 6b48 	strh.w	r6, [r0], #72
 8002dc4:	f823 7948 	strh.w	r7, [r3], #-72
 8002dc8:	4298      	cmp	r0, r3
 8002dca:	d191      	bne.n	8002cf0 <offset_0+0x4>
 8002dcc:	e2fc      	b.n	80033c8 <offset_14+0xde>

08002dce <offset_2>:
 8002dce:	e8b4 0f00 	ldmia.w	r4!, {r8, r9, sl, fp}
 8002dd2:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002dd6:	fb3a 1602 	smlawb	r6, sl, r2, r1
 8002dda:	fb39 fe12 	smulwt	lr, r9, r2
 8002dde:	fb3a 1712 	smlawt	r7, sl, r2, r1
 8002de2:	fb39 7702 	smlawb	r7, r9, r2, r7
 8002de6:	fb3b ee05 	smlawb	lr, fp, r5, lr
 8002dea:	fb38 6615 	smlawt	r6, r8, r5, r6
 8002dee:	fb3b 7715 	smlawt	r7, fp, r5, r7
 8002df2:	fb38 7705 	smlawb	r7, r8, r5, r7
 8002df6:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002dfa:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002dfe:	e9d4 ab08 	ldrd	sl, fp, [r4, #32]
 8002e02:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002e06:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002e0a:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002e0e:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002e12:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002e16:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002e1a:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002e1e:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002e22:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002e26:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002e2a:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
 8002e2e:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002e32:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002e36:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002e3a:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002e3e:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002e42:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002e46:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002e4a:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002e4e:	e894 0f00 	ldmia.w	r4, {r8, r9, sl, fp}
 8002e52:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002e56:	f104 0420 	add.w	r4, r4, #32
 8002e5a:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002e5e:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002e62:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002e66:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002e6a:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 8002e6e:	eb07 0768 	add.w	r7, r7, r8, asr #1
 8002e72:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002e76:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002e7a:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002e7e:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002e82:	ebae 0e09 	sub.w	lr, lr, r9
 8002e86:	4456      	add	r6, sl
 8002e88:	eba7 070a 	sub.w	r7, r7, sl
 8002e8c:	eba6 060e 	sub.w	r6, r6, lr
 8002e90:	444f      	add	r7, r9
 8002e92:	f326 268f 	ssat	r6, #16, r6, asr #10
 8002e96:	f327 278f 	ssat	r7, #16, r7, asr #10
 8002e9a:	f820 6b48 	strh.w	r6, [r0], #72
 8002e9e:	f823 7948 	strh.w	r7, [r3], #-72
 8002ea2:	4298      	cmp	r0, r3
 8002ea4:	d193      	bne.n	8002dce <offset_2>
 8002ea6:	e28f      	b.n	80033c8 <offset_14+0xde>

08002ea8 <offset_4>:
 8002ea8:	e8b4 0f00 	ldmia.w	r4!, {r8, r9, sl, fp}
 8002eac:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002eb0:	fb3a 1602 	smlawb	r6, sl, r2, r1
 8002eb4:	fb39 fe12 	smulwt	lr, r9, r2
 8002eb8:	fb3a 1712 	smlawt	r7, sl, r2, r1
 8002ebc:	fb39 7702 	smlawb	r7, r9, r2, r7
 8002ec0:	fb3b ee05 	smlawb	lr, fp, r5, lr
 8002ec4:	fb38 6615 	smlawt	r6, r8, r5, r6
 8002ec8:	fb3b 7715 	smlawt	r7, fp, r5, r7
 8002ecc:	fb38 7705 	smlawb	r7, r8, r5, r7
 8002ed0:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002ed4:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002ed8:	e954 ab08 	ldrd	sl, fp, [r4, #-32]
 8002edc:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002ee0:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002ee4:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002ee8:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002eec:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002ef0:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002ef4:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002ef8:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002efc:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002f00:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002f04:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
 8002f08:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002f0c:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002f10:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002f14:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002f18:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002f1c:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002f20:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002f24:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002f28:	e894 0f00 	ldmia.w	r4, {r8, r9, sl, fp}
 8002f2c:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002f30:	f104 0420 	add.w	r4, r4, #32
 8002f34:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002f38:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002f3c:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002f40:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002f44:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 8002f48:	eb07 0768 	add.w	r7, r7, r8, asr #1
 8002f4c:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002f50:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002f54:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002f58:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002f5c:	ebae 0e09 	sub.w	lr, lr, r9
 8002f60:	4456      	add	r6, sl
 8002f62:	eba7 070a 	sub.w	r7, r7, sl
 8002f66:	eba6 060e 	sub.w	r6, r6, lr
 8002f6a:	444f      	add	r7, r9
 8002f6c:	f326 268f 	ssat	r6, #16, r6, asr #10
 8002f70:	f327 278f 	ssat	r7, #16, r7, asr #10
 8002f74:	f820 6b48 	strh.w	r6, [r0], #72
 8002f78:	f823 7948 	strh.w	r7, [r3], #-72
 8002f7c:	4298      	cmp	r0, r3
 8002f7e:	d193      	bne.n	8002ea8 <offset_4>
 8002f80:	e222      	b.n	80033c8 <offset_14+0xde>

08002f82 <offset_6>:
 8002f82:	e8b4 0f00 	ldmia.w	r4!, {r8, r9, sl, fp}
 8002f86:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002f8a:	fb3a 1602 	smlawb	r6, sl, r2, r1
 8002f8e:	fb39 fe12 	smulwt	lr, r9, r2
 8002f92:	fb3a 1712 	smlawt	r7, sl, r2, r1
 8002f96:	fb39 7702 	smlawb	r7, r9, r2, r7
 8002f9a:	fb3b ee05 	smlawb	lr, fp, r5, lr
 8002f9e:	fb38 6615 	smlawt	r6, r8, r5, r6
 8002fa2:	fb3b 7715 	smlawt	r7, fp, r5, r7
 8002fa6:	fb38 7705 	smlawb	r7, r8, r5, r7
 8002faa:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002fae:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002fb2:	e954 ab08 	ldrd	sl, fp, [r4, #-32]
 8002fb6:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002fba:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002fbe:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002fc2:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002fc6:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002fca:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002fce:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002fd2:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002fd6:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002fda:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002fde:	e954 ab0c 	ldrd	sl, fp, [r4, #-48]	; 0x30
 8002fe2:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002fe6:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002fea:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002fee:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002ff2:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002ff6:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002ffa:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002ffe:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8003002:	e894 0f00 	ldmia.w	r4, {r8, r9, sl, fp}
 8003006:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 800300a:	f104 0420 	add.w	r4, r4, #32
 800300e:	fb38 7712 	smlawt	r7, r8, r2, r7
 8003012:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8003016:	fb3b 7702 	smlawb	r7, fp, r2, r7
 800301a:	fb38 6602 	smlawb	r6, r8, r2, r6
 800301e:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 8003022:	eb07 0768 	add.w	r7, r7, r8, asr #1
 8003026:	fb39 ee05 	smlawb	lr, r9, r5, lr
 800302a:	fb3a 6615 	smlawt	r6, sl, r5, r6
 800302e:	fb39 7715 	smlawt	r7, r9, r5, r7
 8003032:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8003036:	ebae 0e09 	sub.w	lr, lr, r9
 800303a:	4456      	add	r6, sl
 800303c:	eba7 070a 	sub.w	r7, r7, sl
 8003040:	eba6 060e 	sub.w	r6, r6, lr
 8003044:	444f      	add	r7, r9
 8003046:	f326 268f 	ssat	r6, #16, r6, asr #10
 800304a:	f327 278f 	ssat	r7, #16, r7, asr #10
 800304e:	f820 6b48 	strh.w	r6, [r0], #72
 8003052:	f823 7948 	strh.w	r7, [r3], #-72
 8003056:	4298      	cmp	r0, r3
 8003058:	d193      	bne.n	8002f82 <offset_6>
 800305a:	e1b5      	b.n	80033c8 <offset_14+0xde>

0800305c <offset_8>:
 800305c:	e8b4 0f00 	ldmia.w	r4!, {r8, r9, sl, fp}
 8003060:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003064:	fb3a 1602 	smlawb	r6, sl, r2, r1
 8003068:	fb39 fe12 	smulwt	lr, r9, r2
 800306c:	fb3a 1712 	smlawt	r7, sl, r2, r1
 8003070:	fb39 7702 	smlawb	r7, r9, r2, r7
 8003074:	fb3b ee05 	smlawb	lr, fp, r5, lr
 8003078:	fb38 6615 	smlawt	r6, r8, r5, r6
 800307c:	fb3b 7715 	smlawt	r7, fp, r5, r7
 8003080:	fb38 7705 	smlawb	r7, r8, r5, r7
 8003084:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8003088:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 800308c:	e954 ab08 	ldrd	sl, fp, [r4, #-32]
 8003090:	fb38 6602 	smlawb	r6, r8, r2, r6
 8003094:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8003098:	fb38 7712 	smlawt	r7, r8, r2, r7
 800309c:	fb3b 7702 	smlawb	r7, fp, r2, r7
 80030a0:	fb39 ee05 	smlawb	lr, r9, r5, lr
 80030a4:	fb3a 6615 	smlawt	r6, sl, r5, r6
 80030a8:	fb39 7715 	smlawt	r7, r9, r5, r7
 80030ac:	fb3a 7705 	smlawb	r7, sl, r5, r7
 80030b0:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 80030b4:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 80030b8:	e954 ab0c 	ldrd	sl, fp, [r4, #-48]	; 0x30
 80030bc:	fb38 6602 	smlawb	r6, r8, r2, r6
 80030c0:	fb3b ee12 	smlawt	lr, fp, r2, lr
 80030c4:	fb38 7712 	smlawt	r7, r8, r2, r7
 80030c8:	fb3b 7702 	smlawb	r7, fp, r2, r7
 80030cc:	fb39 ee05 	smlawb	lr, r9, r5, lr
 80030d0:	fb3a 6615 	smlawt	r6, sl, r5, r6
 80030d4:	fb39 7715 	smlawt	r7, r9, r5, r7
 80030d8:	fb3a 7705 	smlawb	r7, sl, r5, r7
 80030dc:	e874 890e 	ldrd	r8, r9, [r4], #-56	; 0x38
 80030e0:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 80030e4:	e8f4 ab16 	ldrd	sl, fp, [r4], #88	; 0x58
 80030e8:	fb38 7712 	smlawt	r7, r8, r2, r7
 80030ec:	fb3b ee12 	smlawt	lr, fp, r2, lr
 80030f0:	fb3b 7702 	smlawb	r7, fp, r2, r7
 80030f4:	fb38 6602 	smlawb	r6, r8, r2, r6
 80030f8:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 80030fc:	eb07 0768 	add.w	r7, r7, r8, asr #1
 8003100:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8003104:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8003108:	fb39 7715 	smlawt	r7, r9, r5, r7
 800310c:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8003110:	ebae 0e09 	sub.w	lr, lr, r9
 8003114:	4456      	add	r6, sl
 8003116:	eba7 070a 	sub.w	r7, r7, sl
 800311a:	eba6 060e 	sub.w	r6, r6, lr
 800311e:	444f      	add	r7, r9
 8003120:	f326 268f 	ssat	r6, #16, r6, asr #10
 8003124:	f327 278f 	ssat	r7, #16, r7, asr #10
 8003128:	f820 6b48 	strh.w	r6, [r0], #72
 800312c:	f823 7948 	strh.w	r7, [r3], #-72
 8003130:	4298      	cmp	r0, r3
 8003132:	d193      	bne.n	800305c <offset_8>
 8003134:	e148      	b.n	80033c8 <offset_14+0xde>

08003136 <offset_10>:
 8003136:	e8b4 0f00 	ldmia.w	r4!, {r8, r9, sl, fp}
 800313a:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 800313e:	fb3a 1602 	smlawb	r6, sl, r2, r1
 8003142:	fb39 fe12 	smulwt	lr, r9, r2
 8003146:	fb3a 1712 	smlawt	r7, sl, r2, r1
 800314a:	fb39 7702 	smlawb	r7, r9, r2, r7
 800314e:	fb3b ee05 	smlawb	lr, fp, r5, lr
 8003152:	fb38 6615 	smlawt	r6, r8, r5, r6
 8003156:	fb3b 7715 	smlawt	r7, fp, r5, r7
 800315a:	fb38 7705 	smlawb	r7, r8, r5, r7
 800315e:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8003162:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003166:	e954 ab08 	ldrd	sl, fp, [r4, #-32]
 800316a:	fb38 6602 	smlawb	r6, r8, r2, r6
 800316e:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8003172:	fb38 7712 	smlawt	r7, r8, r2, r7
 8003176:	fb3b 7702 	smlawb	r7, fp, r2, r7
 800317a:	fb39 ee05 	smlawb	lr, r9, r5, lr
 800317e:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8003182:	fb39 7715 	smlawt	r7, r9, r5, r7
 8003186:	fb3a 7705 	smlawb	r7, sl, r5, r7
 800318a:	e874 890a 	ldrd	r8, r9, [r4], #-40	; 0x28
 800318e:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003192:	e874 ab04 	ldrd	sl, fp, [r4], #-16
 8003196:	fb38 6602 	smlawb	r6, r8, r2, r6
 800319a:	fb3b ee12 	smlawt	lr, fp, r2, lr
 800319e:	fb38 7712 	smlawt	r7, r8, r2, r7
 80031a2:	fb3b 7702 	smlawb	r7, fp, r2, r7
 80031a6:	fb39 ee05 	smlawb	lr, r9, r5, lr
 80031aa:	fb3a 6615 	smlawt	r6, sl, r5, r6
 80031ae:	fb39 7715 	smlawt	r7, r9, r5, r7
 80031b2:	fb3a 7705 	smlawb	r7, sl, r5, r7
 80031b6:	e894 0f00 	ldmia.w	r4, {r8, r9, sl, fp}
 80031ba:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 80031be:	f104 0460 	add.w	r4, r4, #96	; 0x60
 80031c2:	fb38 7712 	smlawt	r7, r8, r2, r7
 80031c6:	fb3b ee12 	smlawt	lr, fp, r2, lr
 80031ca:	fb3b 7702 	smlawb	r7, fp, r2, r7
 80031ce:	fb38 6602 	smlawb	r6, r8, r2, r6
 80031d2:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 80031d6:	eb07 0768 	add.w	r7, r7, r8, asr #1
 80031da:	fb39 ee05 	smlawb	lr, r9, r5, lr
 80031de:	fb3a 6615 	smlawt	r6, sl, r5, r6
 80031e2:	fb39 7715 	smlawt	r7, r9, r5, r7
 80031e6:	fb3a 7705 	smlawb	r7, sl, r5, r7
 80031ea:	ebae 0e09 	sub.w	lr, lr, r9
 80031ee:	4456      	add	r6, sl
 80031f0:	eba7 070a 	sub.w	r7, r7, sl
 80031f4:	eba6 060e 	sub.w	r6, r6, lr
 80031f8:	444f      	add	r7, r9
 80031fa:	f326 268f 	ssat	r6, #16, r6, asr #10
 80031fe:	f327 278f 	ssat	r7, #16, r7, asr #10
 8003202:	f820 6b48 	strh.w	r6, [r0], #72
 8003206:	f823 7948 	strh.w	r7, [r3], #-72
 800320a:	4298      	cmp	r0, r3
 800320c:	d193      	bne.n	8003136 <offset_10>
 800320e:	e0db      	b.n	80033c8 <offset_14+0xde>

08003210 <offset_12>:
 8003210:	e8b4 0f00 	ldmia.w	r4!, {r8, r9, sl, fp}
 8003214:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003218:	fb3a 1602 	smlawb	r6, sl, r2, r1
 800321c:	fb39 fe12 	smulwt	lr, r9, r2
 8003220:	fb3a 1712 	smlawt	r7, sl, r2, r1
 8003224:	fb39 7702 	smlawb	r7, r9, r2, r7
 8003228:	fb3b ee05 	smlawb	lr, fp, r5, lr
 800322c:	fb38 6615 	smlawt	r6, r8, r5, r6
 8003230:	fb3b 7715 	smlawt	r7, fp, r5, r7
 8003234:	fb38 7705 	smlawb	r7, r8, r5, r7
 8003238:	e874 8906 	ldrd	r8, r9, [r4], #-24
 800323c:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003240:	e874 ab08 	ldrd	sl, fp, [r4], #-32
 8003244:	fb38 6602 	smlawb	r6, r8, r2, r6
 8003248:	fb3b ee12 	smlawt	lr, fp, r2, lr
 800324c:	fb38 7712 	smlawt	r7, r8, r2, r7
 8003250:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8003254:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8003258:	fb3a 6615 	smlawt	r6, sl, r5, r6
 800325c:	fb39 7715 	smlawt	r7, r9, r5, r7
 8003260:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8003264:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8003268:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 800326c:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
 8003270:	fb38 6602 	smlawb	r6, r8, r2, r6
 8003274:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8003278:	fb38 7712 	smlawt	r7, r8, r2, r7
 800327c:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8003280:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8003284:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8003288:	fb39 7715 	smlawt	r7, r9, r5, r7
 800328c:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8003290:	e894 0f00 	ldmia.w	r4, {r8, r9, sl, fp}
 8003294:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003298:	f104 0460 	add.w	r4, r4, #96	; 0x60
 800329c:	fb38 7712 	smlawt	r7, r8, r2, r7
 80032a0:	fb3b ee12 	smlawt	lr, fp, r2, lr
 80032a4:	fb3b 7702 	smlawb	r7, fp, r2, r7
 80032a8:	fb38 6602 	smlawb	r6, r8, r2, r6
 80032ac:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 80032b0:	eb07 0768 	add.w	r7, r7, r8, asr #1
 80032b4:	fb39 ee05 	smlawb	lr, r9, r5, lr
 80032b8:	fb3a 6615 	smlawt	r6, sl, r5, r6
 80032bc:	fb39 7715 	smlawt	r7, r9, r5, r7
 80032c0:	fb3a 7705 	smlawb	r7, sl, r5, r7
 80032c4:	ebae 0e09 	sub.w	lr, lr, r9
 80032c8:	4456      	add	r6, sl
 80032ca:	eba7 070a 	sub.w	r7, r7, sl
 80032ce:	eba6 060e 	sub.w	r6, r6, lr
 80032d2:	444f      	add	r7, r9
 80032d4:	f326 268f 	ssat	r6, #16, r6, asr #10
 80032d8:	f327 278f 	ssat	r7, #16, r7, asr #10
 80032dc:	f820 6b48 	strh.w	r6, [r0], #72
 80032e0:	f823 7948 	strh.w	r7, [r3], #-72
 80032e4:	4298      	cmp	r0, r3
 80032e6:	d193      	bne.n	8003210 <offset_12>
 80032e8:	e06e      	b.n	80033c8 <offset_14+0xde>

080032ea <offset_14>:
 80032ea:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 80032ee:	e874 ab0e 	ldrd	sl, fp, [r4], #-56	; 0x38
 80032f2:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 80032f6:	fb3a 1602 	smlawb	r6, sl, r2, r1
 80032fa:	fb39 fe12 	smulwt	lr, r9, r2
 80032fe:	fb3a 1712 	smlawt	r7, sl, r2, r1
 8003302:	fb39 7702 	smlawb	r7, r9, r2, r7
 8003306:	fb3b ee05 	smlawb	lr, fp, r5, lr
 800330a:	fb38 6615 	smlawt	r6, r8, r5, r6
 800330e:	fb3b 7715 	smlawt	r7, fp, r5, r7
 8003312:	fb38 7705 	smlawb	r7, r8, r5, r7
 8003316:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 800331a:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 800331e:	e9d4 ab08 	ldrd	sl, fp, [r4, #32]
 8003322:	fb38 6602 	smlawb	r6, r8, r2, r6
 8003326:	fb3b ee12 	smlawt	lr, fp, r2, lr
 800332a:	fb38 7712 	smlawt	r7, r8, r2, r7
 800332e:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8003332:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8003336:	fb3a 6615 	smlawt	r6, sl, r5, r6
 800333a:	fb39 7715 	smlawt	r7, r9, r5, r7
 800333e:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8003342:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8003346:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 800334a:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
 800334e:	fb38 6602 	smlawb	r6, r8, r2, r6
 8003352:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8003356:	fb38 7712 	smlawt	r7, r8, r2, r7
 800335a:	fb3b 7702 	smlawb	r7, fp, r2, r7
 800335e:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8003362:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8003366:	fb39 7715 	smlawt	r7, r9, r5, r7
 800336a:	fb3a 7705 	smlawb	r7, sl, r5, r7
 800336e:	e8f4 8902 	ldrd	r8, r9, [r4], #8
 8003372:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003376:	e8f4 ab16 	ldrd	sl, fp, [r4], #88	; 0x58
 800337a:	fb38 7712 	smlawt	r7, r8, r2, r7
 800337e:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8003382:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8003386:	fb38 6602 	smlawb	r6, r8, r2, r6
 800338a:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 800338e:	eb07 0768 	add.w	r7, r7, r8, asr #1
 8003392:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8003396:	fb3a 6615 	smlawt	r6, sl, r5, r6
 800339a:	fb39 7715 	smlawt	r7, r9, r5, r7
 800339e:	fb3a 7705 	smlawb	r7, sl, r5, r7
 80033a2:	ebae 0e09 	sub.w	lr, lr, r9
 80033a6:	4456      	add	r6, sl
 80033a8:	eba7 070a 	sub.w	r7, r7, sl
 80033ac:	eba6 060e 	sub.w	r6, r6, lr
 80033b0:	444f      	add	r7, r9
 80033b2:	f326 268f 	ssat	r6, #16, r6, asr #10
 80033b6:	f327 278f 	ssat	r7, #16, r7, asr #10
 80033ba:	f820 6b48 	strh.w	r6, [r0], #72
 80033be:	f823 7948 	strh.w	r7, [r3], #-72
 80033c2:	4298      	cmp	r0, r3
 80033c4:	d191      	bne.n	80032ea <offset_14>
 80033c6:	e7ff      	b.n	80033c8 <offset_14+0xde>
 80033c8:	bc0f      	pop	{r0, r1, r2, r3}
 80033ca:	f100 0004 	add.w	r0, r0, #4
 80033ce:	f103 0304 	add.w	r3, r3, #4
 80033d2:	f012 0f01 	tst.w	r2, #1
 80033d6:	d006      	beq.n	80033e6 <offset_14+0xfc>
 80033d8:	1e52      	subs	r2, r2, #1
 80033da:	f1a1 5100 	sub.w	r1, r1, #536870912	; 0x20000000
 80033de:	dd0b      	ble.n	80033f8 <offset_14+0x10e>
 80033e0:	b40f      	push	{r0, r1, r2, r3}
 80033e2:	f7ff b982 	b.w	80026ea <IDCT32PLONKAS+0x6>
 80033e6:	f1a2 0201 	sub.w	r2, r2, #1
 80033ea:	b40f      	push	{r0, r1, r2, r3}
 80033ec:	f1a1 5280 	sub.w	r2, r1, #268435456	; 0x10000000
 80033f0:	f102 0211 	add.w	r2, r2, #17
 80033f4:	f7ff b97d 	b.w	80026f2 <IDCT32PLONKAS+0xe>
 80033f8:	ea4f 64b1 	mov.w	r4, r1, ror #26
 80033fc:	f85d fb04 	ldr.w	pc, [sp], #4

08003400 <MP3D_SPCORP_Symbol_033>:
 8003400:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003404:	6809      	ldr	r1, [r1, #0]
 8003406:	4603      	mov	r3, r0
 8003408:	f8df c030 	ldr.w	ip, [pc, #48]	; 800343c <MP3D_SPCORP_Symbol_033+0x3c>
 800340c:	f7ff f96a 	bl	80026e4 <IDCT32PLONKAS>
 8003410:	bc0f      	pop	{r0, r1, r2, r3}
 8003412:	680d      	ldr	r5, [r1, #0]
 8003414:	600c      	str	r4, [r1, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	bf08      	it	eq
 800341a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800341e:	f505 6108 	add.w	r1, r5, #2176	; 0x880
 8003422:	f100 0302 	add.w	r3, r0, #2
 8003426:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800342a:	f7ff f95b 	bl	80026e4 <IDCT32PLONKAS>
 800342e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003432:	0000      	.short	0x0000
 8003434:	0800e868 	.word	0x0800e868
 8003438:	0800e8c8 	.word	0x0800e8c8
 800343c:	0800eaa8 	.word	0x0800eaa8

08003440 <strlen>:
 8003440:	4603      	mov	r3, r0
 8003442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003446:	2a00      	cmp	r2, #0
 8003448:	d1fb      	bne.n	8003442 <strlen+0x2>
 800344a:	1a18      	subs	r0, r3, r0
 800344c:	3801      	subs	r0, #1
 800344e:	4770      	bx	lr

08003450 <memchr>:
 8003450:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8003454:	2a10      	cmp	r2, #16
 8003456:	db2b      	blt.n	80034b0 <memchr+0x60>
 8003458:	f010 0f07 	tst.w	r0, #7
 800345c:	d008      	beq.n	8003470 <memchr+0x20>
 800345e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003462:	3a01      	subs	r2, #1
 8003464:	428b      	cmp	r3, r1
 8003466:	d02d      	beq.n	80034c4 <memchr+0x74>
 8003468:	f010 0f07 	tst.w	r0, #7
 800346c:	b342      	cbz	r2, 80034c0 <memchr+0x70>
 800346e:	d1f6      	bne.n	800345e <memchr+0xe>
 8003470:	b4f0      	push	{r4, r5, r6, r7}
 8003472:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8003476:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800347a:	f022 0407 	bic.w	r4, r2, #7
 800347e:	f07f 0700 	mvns.w	r7, #0
 8003482:	2300      	movs	r3, #0
 8003484:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8003488:	3c08      	subs	r4, #8
 800348a:	ea85 0501 	eor.w	r5, r5, r1
 800348e:	ea86 0601 	eor.w	r6, r6, r1
 8003492:	fa85 f547 	uadd8	r5, r5, r7
 8003496:	faa3 f587 	sel	r5, r3, r7
 800349a:	fa86 f647 	uadd8	r6, r6, r7
 800349e:	faa5 f687 	sel	r6, r5, r7
 80034a2:	b98e      	cbnz	r6, 80034c8 <memchr+0x78>
 80034a4:	d1ee      	bne.n	8003484 <memchr+0x34>
 80034a6:	bcf0      	pop	{r4, r5, r6, r7}
 80034a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80034ac:	f002 0207 	and.w	r2, r2, #7
 80034b0:	b132      	cbz	r2, 80034c0 <memchr+0x70>
 80034b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80034b6:	3a01      	subs	r2, #1
 80034b8:	ea83 0301 	eor.w	r3, r3, r1
 80034bc:	b113      	cbz	r3, 80034c4 <memchr+0x74>
 80034be:	d1f8      	bne.n	80034b2 <memchr+0x62>
 80034c0:	2000      	movs	r0, #0
 80034c2:	4770      	bx	lr
 80034c4:	3801      	subs	r0, #1
 80034c6:	4770      	bx	lr
 80034c8:	2d00      	cmp	r5, #0
 80034ca:	bf06      	itte	eq
 80034cc:	4635      	moveq	r5, r6
 80034ce:	3803      	subeq	r0, #3
 80034d0:	3807      	subne	r0, #7
 80034d2:	f015 0f01 	tst.w	r5, #1
 80034d6:	d107      	bne.n	80034e8 <memchr+0x98>
 80034d8:	3001      	adds	r0, #1
 80034da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80034de:	bf02      	ittt	eq
 80034e0:	3001      	addeq	r0, #1
 80034e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80034e6:	3001      	addeq	r0, #1
 80034e8:	bcf0      	pop	{r4, r5, r6, r7}
 80034ea:	3801      	subs	r0, #1
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop

080034f0 <__aeabi_uldivmod>:
 80034f0:	b953      	cbnz	r3, 8003508 <__aeabi_uldivmod+0x18>
 80034f2:	b94a      	cbnz	r2, 8003508 <__aeabi_uldivmod+0x18>
 80034f4:	2900      	cmp	r1, #0
 80034f6:	bf08      	it	eq
 80034f8:	2800      	cmpeq	r0, #0
 80034fa:	bf1c      	itt	ne
 80034fc:	f04f 31ff 	movne.w	r1, #4294967295
 8003500:	f04f 30ff 	movne.w	r0, #4294967295
 8003504:	f000 b972 	b.w	80037ec <__aeabi_idiv0>
 8003508:	f1ad 0c08 	sub.w	ip, sp, #8
 800350c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8003510:	f000 f806 	bl	8003520 <__udivmoddi4>
 8003514:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800351c:	b004      	add	sp, #16
 800351e:	4770      	bx	lr

08003520 <__udivmoddi4>:
 8003520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003524:	9e08      	ldr	r6, [sp, #32]
 8003526:	4604      	mov	r4, r0
 8003528:	4688      	mov	r8, r1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d14b      	bne.n	80035c6 <__udivmoddi4+0xa6>
 800352e:	428a      	cmp	r2, r1
 8003530:	4615      	mov	r5, r2
 8003532:	d967      	bls.n	8003604 <__udivmoddi4+0xe4>
 8003534:	fab2 f282 	clz	r2, r2
 8003538:	b14a      	cbz	r2, 800354e <__udivmoddi4+0x2e>
 800353a:	f1c2 0720 	rsb	r7, r2, #32
 800353e:	fa01 f302 	lsl.w	r3, r1, r2
 8003542:	fa20 f707 	lsr.w	r7, r0, r7
 8003546:	4095      	lsls	r5, r2
 8003548:	ea47 0803 	orr.w	r8, r7, r3
 800354c:	4094      	lsls	r4, r2
 800354e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8003552:	0c23      	lsrs	r3, r4, #16
 8003554:	fbb8 f7fe 	udiv	r7, r8, lr
 8003558:	fa1f fc85 	uxth.w	ip, r5
 800355c:	fb0e 8817 	mls	r8, lr, r7, r8
 8003560:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8003564:	fb07 f10c 	mul.w	r1, r7, ip
 8003568:	4299      	cmp	r1, r3
 800356a:	d909      	bls.n	8003580 <__udivmoddi4+0x60>
 800356c:	18eb      	adds	r3, r5, r3
 800356e:	f107 30ff 	add.w	r0, r7, #4294967295
 8003572:	f080 811b 	bcs.w	80037ac <__udivmoddi4+0x28c>
 8003576:	4299      	cmp	r1, r3
 8003578:	f240 8118 	bls.w	80037ac <__udivmoddi4+0x28c>
 800357c:	3f02      	subs	r7, #2
 800357e:	442b      	add	r3, r5
 8003580:	1a5b      	subs	r3, r3, r1
 8003582:	b2a4      	uxth	r4, r4
 8003584:	fbb3 f0fe 	udiv	r0, r3, lr
 8003588:	fb0e 3310 	mls	r3, lr, r0, r3
 800358c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8003590:	fb00 fc0c 	mul.w	ip, r0, ip
 8003594:	45a4      	cmp	ip, r4
 8003596:	d909      	bls.n	80035ac <__udivmoddi4+0x8c>
 8003598:	192c      	adds	r4, r5, r4
 800359a:	f100 33ff 	add.w	r3, r0, #4294967295
 800359e:	f080 8107 	bcs.w	80037b0 <__udivmoddi4+0x290>
 80035a2:	45a4      	cmp	ip, r4
 80035a4:	f240 8104 	bls.w	80037b0 <__udivmoddi4+0x290>
 80035a8:	3802      	subs	r0, #2
 80035aa:	442c      	add	r4, r5
 80035ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80035b0:	eba4 040c 	sub.w	r4, r4, ip
 80035b4:	2700      	movs	r7, #0
 80035b6:	b11e      	cbz	r6, 80035c0 <__udivmoddi4+0xa0>
 80035b8:	40d4      	lsrs	r4, r2
 80035ba:	2300      	movs	r3, #0
 80035bc:	e9c6 4300 	strd	r4, r3, [r6]
 80035c0:	4639      	mov	r1, r7
 80035c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035c6:	428b      	cmp	r3, r1
 80035c8:	d909      	bls.n	80035de <__udivmoddi4+0xbe>
 80035ca:	2e00      	cmp	r6, #0
 80035cc:	f000 80eb 	beq.w	80037a6 <__udivmoddi4+0x286>
 80035d0:	2700      	movs	r7, #0
 80035d2:	e9c6 0100 	strd	r0, r1, [r6]
 80035d6:	4638      	mov	r0, r7
 80035d8:	4639      	mov	r1, r7
 80035da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035de:	fab3 f783 	clz	r7, r3
 80035e2:	2f00      	cmp	r7, #0
 80035e4:	d147      	bne.n	8003676 <__udivmoddi4+0x156>
 80035e6:	428b      	cmp	r3, r1
 80035e8:	d302      	bcc.n	80035f0 <__udivmoddi4+0xd0>
 80035ea:	4282      	cmp	r2, r0
 80035ec:	f200 80fa 	bhi.w	80037e4 <__udivmoddi4+0x2c4>
 80035f0:	1a84      	subs	r4, r0, r2
 80035f2:	eb61 0303 	sbc.w	r3, r1, r3
 80035f6:	2001      	movs	r0, #1
 80035f8:	4698      	mov	r8, r3
 80035fa:	2e00      	cmp	r6, #0
 80035fc:	d0e0      	beq.n	80035c0 <__udivmoddi4+0xa0>
 80035fe:	e9c6 4800 	strd	r4, r8, [r6]
 8003602:	e7dd      	b.n	80035c0 <__udivmoddi4+0xa0>
 8003604:	b902      	cbnz	r2, 8003608 <__udivmoddi4+0xe8>
 8003606:	deff      	udf	#255	; 0xff
 8003608:	fab2 f282 	clz	r2, r2
 800360c:	2a00      	cmp	r2, #0
 800360e:	f040 808f 	bne.w	8003730 <__udivmoddi4+0x210>
 8003612:	1b49      	subs	r1, r1, r5
 8003614:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8003618:	fa1f f885 	uxth.w	r8, r5
 800361c:	2701      	movs	r7, #1
 800361e:	fbb1 fcfe 	udiv	ip, r1, lr
 8003622:	0c23      	lsrs	r3, r4, #16
 8003624:	fb0e 111c 	mls	r1, lr, ip, r1
 8003628:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800362c:	fb08 f10c 	mul.w	r1, r8, ip
 8003630:	4299      	cmp	r1, r3
 8003632:	d907      	bls.n	8003644 <__udivmoddi4+0x124>
 8003634:	18eb      	adds	r3, r5, r3
 8003636:	f10c 30ff 	add.w	r0, ip, #4294967295
 800363a:	d202      	bcs.n	8003642 <__udivmoddi4+0x122>
 800363c:	4299      	cmp	r1, r3
 800363e:	f200 80cd 	bhi.w	80037dc <__udivmoddi4+0x2bc>
 8003642:	4684      	mov	ip, r0
 8003644:	1a59      	subs	r1, r3, r1
 8003646:	b2a3      	uxth	r3, r4
 8003648:	fbb1 f0fe 	udiv	r0, r1, lr
 800364c:	fb0e 1410 	mls	r4, lr, r0, r1
 8003650:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003654:	fb08 f800 	mul.w	r8, r8, r0
 8003658:	45a0      	cmp	r8, r4
 800365a:	d907      	bls.n	800366c <__udivmoddi4+0x14c>
 800365c:	192c      	adds	r4, r5, r4
 800365e:	f100 33ff 	add.w	r3, r0, #4294967295
 8003662:	d202      	bcs.n	800366a <__udivmoddi4+0x14a>
 8003664:	45a0      	cmp	r8, r4
 8003666:	f200 80b6 	bhi.w	80037d6 <__udivmoddi4+0x2b6>
 800366a:	4618      	mov	r0, r3
 800366c:	eba4 0408 	sub.w	r4, r4, r8
 8003670:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8003674:	e79f      	b.n	80035b6 <__udivmoddi4+0x96>
 8003676:	f1c7 0c20 	rsb	ip, r7, #32
 800367a:	40bb      	lsls	r3, r7
 800367c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8003680:	ea4e 0e03 	orr.w	lr, lr, r3
 8003684:	fa01 f407 	lsl.w	r4, r1, r7
 8003688:	fa20 f50c 	lsr.w	r5, r0, ip
 800368c:	fa21 f30c 	lsr.w	r3, r1, ip
 8003690:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8003694:	4325      	orrs	r5, r4
 8003696:	fbb3 f9f8 	udiv	r9, r3, r8
 800369a:	0c2c      	lsrs	r4, r5, #16
 800369c:	fb08 3319 	mls	r3, r8, r9, r3
 80036a0:	fa1f fa8e 	uxth.w	sl, lr
 80036a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80036a8:	fb09 f40a 	mul.w	r4, r9, sl
 80036ac:	429c      	cmp	r4, r3
 80036ae:	fa02 f207 	lsl.w	r2, r2, r7
 80036b2:	fa00 f107 	lsl.w	r1, r0, r7
 80036b6:	d90b      	bls.n	80036d0 <__udivmoddi4+0x1b0>
 80036b8:	eb1e 0303 	adds.w	r3, lr, r3
 80036bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80036c0:	f080 8087 	bcs.w	80037d2 <__udivmoddi4+0x2b2>
 80036c4:	429c      	cmp	r4, r3
 80036c6:	f240 8084 	bls.w	80037d2 <__udivmoddi4+0x2b2>
 80036ca:	f1a9 0902 	sub.w	r9, r9, #2
 80036ce:	4473      	add	r3, lr
 80036d0:	1b1b      	subs	r3, r3, r4
 80036d2:	b2ad      	uxth	r5, r5
 80036d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80036d8:	fb08 3310 	mls	r3, r8, r0, r3
 80036dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80036e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80036e4:	45a2      	cmp	sl, r4
 80036e6:	d908      	bls.n	80036fa <__udivmoddi4+0x1da>
 80036e8:	eb1e 0404 	adds.w	r4, lr, r4
 80036ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80036f0:	d26b      	bcs.n	80037ca <__udivmoddi4+0x2aa>
 80036f2:	45a2      	cmp	sl, r4
 80036f4:	d969      	bls.n	80037ca <__udivmoddi4+0x2aa>
 80036f6:	3802      	subs	r0, #2
 80036f8:	4474      	add	r4, lr
 80036fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80036fe:	fba0 8902 	umull	r8, r9, r0, r2
 8003702:	eba4 040a 	sub.w	r4, r4, sl
 8003706:	454c      	cmp	r4, r9
 8003708:	46c2      	mov	sl, r8
 800370a:	464b      	mov	r3, r9
 800370c:	d354      	bcc.n	80037b8 <__udivmoddi4+0x298>
 800370e:	d051      	beq.n	80037b4 <__udivmoddi4+0x294>
 8003710:	2e00      	cmp	r6, #0
 8003712:	d069      	beq.n	80037e8 <__udivmoddi4+0x2c8>
 8003714:	ebb1 050a 	subs.w	r5, r1, sl
 8003718:	eb64 0403 	sbc.w	r4, r4, r3
 800371c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8003720:	40fd      	lsrs	r5, r7
 8003722:	40fc      	lsrs	r4, r7
 8003724:	ea4c 0505 	orr.w	r5, ip, r5
 8003728:	e9c6 5400 	strd	r5, r4, [r6]
 800372c:	2700      	movs	r7, #0
 800372e:	e747      	b.n	80035c0 <__udivmoddi4+0xa0>
 8003730:	f1c2 0320 	rsb	r3, r2, #32
 8003734:	fa20 f703 	lsr.w	r7, r0, r3
 8003738:	4095      	lsls	r5, r2
 800373a:	fa01 f002 	lsl.w	r0, r1, r2
 800373e:	fa21 f303 	lsr.w	r3, r1, r3
 8003742:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8003746:	4338      	orrs	r0, r7
 8003748:	0c01      	lsrs	r1, r0, #16
 800374a:	fbb3 f7fe 	udiv	r7, r3, lr
 800374e:	fa1f f885 	uxth.w	r8, r5
 8003752:	fb0e 3317 	mls	r3, lr, r7, r3
 8003756:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800375a:	fb07 f308 	mul.w	r3, r7, r8
 800375e:	428b      	cmp	r3, r1
 8003760:	fa04 f402 	lsl.w	r4, r4, r2
 8003764:	d907      	bls.n	8003776 <__udivmoddi4+0x256>
 8003766:	1869      	adds	r1, r5, r1
 8003768:	f107 3cff 	add.w	ip, r7, #4294967295
 800376c:	d22f      	bcs.n	80037ce <__udivmoddi4+0x2ae>
 800376e:	428b      	cmp	r3, r1
 8003770:	d92d      	bls.n	80037ce <__udivmoddi4+0x2ae>
 8003772:	3f02      	subs	r7, #2
 8003774:	4429      	add	r1, r5
 8003776:	1acb      	subs	r3, r1, r3
 8003778:	b281      	uxth	r1, r0
 800377a:	fbb3 f0fe 	udiv	r0, r3, lr
 800377e:	fb0e 3310 	mls	r3, lr, r0, r3
 8003782:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8003786:	fb00 f308 	mul.w	r3, r0, r8
 800378a:	428b      	cmp	r3, r1
 800378c:	d907      	bls.n	800379e <__udivmoddi4+0x27e>
 800378e:	1869      	adds	r1, r5, r1
 8003790:	f100 3cff 	add.w	ip, r0, #4294967295
 8003794:	d217      	bcs.n	80037c6 <__udivmoddi4+0x2a6>
 8003796:	428b      	cmp	r3, r1
 8003798:	d915      	bls.n	80037c6 <__udivmoddi4+0x2a6>
 800379a:	3802      	subs	r0, #2
 800379c:	4429      	add	r1, r5
 800379e:	1ac9      	subs	r1, r1, r3
 80037a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80037a4:	e73b      	b.n	800361e <__udivmoddi4+0xfe>
 80037a6:	4637      	mov	r7, r6
 80037a8:	4630      	mov	r0, r6
 80037aa:	e709      	b.n	80035c0 <__udivmoddi4+0xa0>
 80037ac:	4607      	mov	r7, r0
 80037ae:	e6e7      	b.n	8003580 <__udivmoddi4+0x60>
 80037b0:	4618      	mov	r0, r3
 80037b2:	e6fb      	b.n	80035ac <__udivmoddi4+0x8c>
 80037b4:	4541      	cmp	r1, r8
 80037b6:	d2ab      	bcs.n	8003710 <__udivmoddi4+0x1f0>
 80037b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80037bc:	eb69 020e 	sbc.w	r2, r9, lr
 80037c0:	3801      	subs	r0, #1
 80037c2:	4613      	mov	r3, r2
 80037c4:	e7a4      	b.n	8003710 <__udivmoddi4+0x1f0>
 80037c6:	4660      	mov	r0, ip
 80037c8:	e7e9      	b.n	800379e <__udivmoddi4+0x27e>
 80037ca:	4618      	mov	r0, r3
 80037cc:	e795      	b.n	80036fa <__udivmoddi4+0x1da>
 80037ce:	4667      	mov	r7, ip
 80037d0:	e7d1      	b.n	8003776 <__udivmoddi4+0x256>
 80037d2:	4681      	mov	r9, r0
 80037d4:	e77c      	b.n	80036d0 <__udivmoddi4+0x1b0>
 80037d6:	3802      	subs	r0, #2
 80037d8:	442c      	add	r4, r5
 80037da:	e747      	b.n	800366c <__udivmoddi4+0x14c>
 80037dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80037e0:	442b      	add	r3, r5
 80037e2:	e72f      	b.n	8003644 <__udivmoddi4+0x124>
 80037e4:	4638      	mov	r0, r7
 80037e6:	e708      	b.n	80035fa <__udivmoddi4+0xda>
 80037e8:	4637      	mov	r7, r6
 80037ea:	e6e9      	b.n	80035c0 <__udivmoddi4+0xa0>

080037ec <__aeabi_idiv0>:
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop

080037f0 <cs43l22_SetFrequency>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
  return 0;
}
 80037f0:	2000      	movs	r0, #0
 80037f2:	4770      	bx	lr

080037f4 <cs43l22_Reset>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
  return 0;
}
 80037f4:	2000      	movs	r0, #0
 80037f6:	4770      	bx	lr

080037f8 <cs43l22_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80037f8:	2964      	cmp	r1, #100	; 0x64
 80037fa:	bf98      	it	ls
 80037fc:	ebc1 2101 	rsbls	r1, r1, r1, lsl #8
{
 8003800:	b538      	push	{r3, r4, r5, lr}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8003802:	bf8f      	iteee	hi
 8003804:	22ff      	movhi	r2, #255	; 0xff
 8003806:	2364      	movls	r3, #100	; 0x64
 8003808:	fb91 f1f3 	sdivls	r1, r1, r3
 800380c:	b2ca      	uxtbls	r2, r1
 800380e:	3219      	adds	r2, #25
 8003810:	b2c5      	uxtb	r5, r0
 8003812:	b2d4      	uxtb	r4, r2
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  uint32_t result = 0;
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8003814:	4622      	mov	r2, r4
 8003816:	4628      	mov	r0, r5
 8003818:	2120      	movs	r1, #32
 800381a:	f000 f9c1 	bl	8003ba0 <AUDIO_IO_Write>
 800381e:	4628      	mov	r0, r5
 8003820:	4622      	mov	r2, r4
 8003822:	2121      	movs	r1, #33	; 0x21
 8003824:	f000 f9bc 	bl	8003ba0 <AUDIO_IO_Write>
}
 8003828:	2000      	movs	r0, #0
 800382a:	bd38      	pop	{r3, r4, r5, pc}

0800382c <cs43l22_Init>:
{
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	4606      	mov	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8003830:	b2f4      	uxtb	r4, r6
{
 8003832:	460d      	mov	r5, r1
 8003834:	4617      	mov	r7, r2
  AUDIO_IO_Init();     
 8003836:	f000 f97f 	bl	8003b38 <AUDIO_IO_Init>
  AUDIO_IO_Write(Addr, Reg, Value);
 800383a:	2201      	movs	r2, #1
 800383c:	2102      	movs	r1, #2
 800383e:	4620      	mov	r0, r4
 8003840:	f000 f9ae 	bl	8003ba0 <AUDIO_IO_Write>
  switch (OutputDevice)
 8003844:	1e6a      	subs	r2, r5, #1
 8003846:	4b2a      	ldr	r3, [pc, #168]	; (80038f0 <cs43l22_Init+0xc4>)
 8003848:	2a03      	cmp	r2, #3
 800384a:	d84e      	bhi.n	80038ea <cs43l22_Init+0xbe>
 800384c:	e8df f002 	tbb	[pc, r2]
 8003850:	4d4b4902 	.word	0x4d4b4902
    OutputDev = 0xFA;
 8003854:	22fa      	movs	r2, #250	; 0xfa
    OutputDev = 0x05;
 8003856:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8003858:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 800385a:	2104      	movs	r1, #4
 800385c:	4620      	mov	r0, r4
 800385e:	f000 f99f 	bl	8003ba0 <AUDIO_IO_Write>
 8003862:	2281      	movs	r2, #129	; 0x81
 8003864:	2105      	movs	r1, #5
 8003866:	4620      	mov	r0, r4
 8003868:	f000 f99a 	bl	8003ba0 <AUDIO_IO_Write>
 800386c:	2204      	movs	r2, #4
 800386e:	2106      	movs	r1, #6
 8003870:	4620      	mov	r0, r4
 8003872:	f000 f995 	bl	8003ba0 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8003876:	4630      	mov	r0, r6
 8003878:	4639      	mov	r1, r7
 800387a:	f7ff ffbd 	bl	80037f8 <cs43l22_SetVolume>
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 800387e:	2d02      	cmp	r5, #2
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8003880:	4606      	mov	r6, r0
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8003882:	d00e      	beq.n	80038a2 <cs43l22_Init+0x76>
  AUDIO_IO_Write(Addr, Reg, Value);
 8003884:	2206      	movs	r2, #6
 8003886:	210f      	movs	r1, #15
 8003888:	4620      	mov	r0, r4
 800388a:	f000 f989 	bl	8003ba0 <AUDIO_IO_Write>
 800388e:	2200      	movs	r2, #0
 8003890:	2124      	movs	r1, #36	; 0x24
 8003892:	4620      	mov	r0, r4
 8003894:	f000 f984 	bl	8003ba0 <AUDIO_IO_Write>
 8003898:	2200      	movs	r2, #0
 800389a:	2125      	movs	r1, #37	; 0x25
 800389c:	4620      	mov	r0, r4
 800389e:	f000 f97f 	bl	8003ba0 <AUDIO_IO_Write>
 80038a2:	4620      	mov	r0, r4
 80038a4:	2200      	movs	r2, #0
 80038a6:	210a      	movs	r1, #10
 80038a8:	f000 f97a 	bl	8003ba0 <AUDIO_IO_Write>
 80038ac:	4620      	mov	r0, r4
 80038ae:	2204      	movs	r2, #4
 80038b0:	210e      	movs	r1, #14
 80038b2:	f000 f975 	bl	8003ba0 <AUDIO_IO_Write>
 80038b6:	4620      	mov	r0, r4
 80038b8:	2200      	movs	r2, #0
 80038ba:	2127      	movs	r1, #39	; 0x27
 80038bc:	f000 f970 	bl	8003ba0 <AUDIO_IO_Write>
 80038c0:	4620      	mov	r0, r4
 80038c2:	220f      	movs	r2, #15
 80038c4:	211f      	movs	r1, #31
 80038c6:	f000 f96b 	bl	8003ba0 <AUDIO_IO_Write>
 80038ca:	4620      	mov	r0, r4
 80038cc:	220a      	movs	r2, #10
 80038ce:	211a      	movs	r1, #26
 80038d0:	f000 f966 	bl	8003ba0 <AUDIO_IO_Write>
 80038d4:	4620      	mov	r0, r4
 80038d6:	220a      	movs	r2, #10
 80038d8:	211b      	movs	r1, #27
 80038da:	f000 f961 	bl	8003ba0 <AUDIO_IO_Write>
}
 80038de:	4630      	mov	r0, r6
 80038e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OutputDev = 0xAF;
 80038e2:	22af      	movs	r2, #175	; 0xaf
 80038e4:	e7b7      	b.n	8003856 <cs43l22_Init+0x2a>
    OutputDev = 0xAA;
 80038e6:	22aa      	movs	r2, #170	; 0xaa
 80038e8:	e7b5      	b.n	8003856 <cs43l22_Init+0x2a>
    OutputDev = 0x05;
 80038ea:	2205      	movs	r2, #5
 80038ec:	e7b3      	b.n	8003856 <cs43l22_Init+0x2a>
 80038ee:	bf00      	nop
 80038f0:	20000108 	.word	0x20000108

080038f4 <cs43l22_DeInit>:
  AUDIO_IO_DeInit();
 80038f4:	f000 b952 	b.w	8003b9c <AUDIO_IO_DeInit>

080038f8 <cs43l22_ReadID>:
{
 80038f8:	b510      	push	{r4, lr}
 80038fa:	4604      	mov	r4, r0
  AUDIO_IO_Init(); 
 80038fc:	f000 f91c 	bl	8003b38 <AUDIO_IO_Init>
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8003900:	2101      	movs	r1, #1
 8003902:	b2e0      	uxtb	r0, r4
 8003904:	f000 f968 	bl	8003bd8 <AUDIO_IO_Read>
}
 8003908:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800390c:	bd10      	pop	{r4, pc}

0800390e <cs43l22_SetMute.part.0>:
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
 800390e:	b510      	push	{r4, lr}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8003910:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8003912:	4620      	mov	r0, r4
 8003914:	22ff      	movs	r2, #255	; 0xff
 8003916:	2104      	movs	r1, #4
 8003918:	f000 f942 	bl	8003ba0 <AUDIO_IO_Write>
 800391c:	4620      	mov	r0, r4
 800391e:	2201      	movs	r2, #1
 8003920:	2122      	movs	r1, #34	; 0x22
 8003922:	f000 f93d 	bl	8003ba0 <AUDIO_IO_Write>
 8003926:	4620      	mov	r0, r4
 8003928:	2201      	movs	r2, #1
 800392a:	2123      	movs	r1, #35	; 0x23
}
 800392c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AUDIO_IO_Write(Addr, Reg, Value);
 8003930:	f000 b936 	b.w	8003ba0 <AUDIO_IO_Write>

08003934 <cs43l22_SetMute>:
  if(Cmd == AUDIO_MUTE_ON)
 8003934:	2901      	cmp	r1, #1
{
 8003936:	b510      	push	{r4, lr}
  if(Cmd == AUDIO_MUTE_ON)
 8003938:	d103      	bne.n	8003942 <cs43l22_SetMute+0xe>
 800393a:	f7ff ffe8 	bl	800390e <cs43l22_SetMute.part.0>
}
 800393e:	2000      	movs	r0, #0
 8003940:	bd10      	pop	{r4, pc}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8003942:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8003944:	4620      	mov	r0, r4
 8003946:	2200      	movs	r2, #0
 8003948:	2122      	movs	r1, #34	; 0x22
 800394a:	f000 f929 	bl	8003ba0 <AUDIO_IO_Write>
 800394e:	4620      	mov	r0, r4
 8003950:	2200      	movs	r2, #0
 8003952:	2123      	movs	r1, #35	; 0x23
 8003954:	f000 f924 	bl	8003ba0 <AUDIO_IO_Write>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8003958:	4b03      	ldr	r3, [pc, #12]	; (8003968 <cs43l22_SetMute+0x34>)
  AUDIO_IO_Write(Addr, Reg, Value);
 800395a:	2104      	movs	r1, #4
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800395c:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 800395e:	4620      	mov	r0, r4
 8003960:	f000 f91e 	bl	8003ba0 <AUDIO_IO_Write>
 8003964:	e7eb      	b.n	800393e <cs43l22_SetMute+0xa>
 8003966:	bf00      	nop
 8003968:	20000108 	.word	0x20000108

0800396c <cs43l22_Resume>:
{
 800396c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  volatile uint32_t index = 0x00;
 800396e:	2500      	movs	r5, #0
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003970:	4629      	mov	r1, r5
{
 8003972:	4604      	mov	r4, r0
  volatile uint32_t index = 0x00;
 8003974:	9501      	str	r5, [sp, #4]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003976:	f7ff ffdd 	bl	8003934 <cs43l22_SetMute>
  for(index = 0x00; index < 0xFF; index++);
 800397a:	9501      	str	r5, [sp, #4]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800397c:	4606      	mov	r6, r0
  for(index = 0x00; index < 0xFF; index++);
 800397e:	9b01      	ldr	r3, [sp, #4]
 8003980:	2bfe      	cmp	r3, #254	; 0xfe
 8003982:	d90e      	bls.n	80039a2 <cs43l22_Resume+0x36>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8003984:	4b09      	ldr	r3, [pc, #36]	; (80039ac <cs43l22_Resume+0x40>)
 8003986:	b2e4      	uxtb	r4, r4
 8003988:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 800398a:	4620      	mov	r0, r4
 800398c:	2104      	movs	r1, #4
 800398e:	f000 f907 	bl	8003ba0 <AUDIO_IO_Write>
 8003992:	4620      	mov	r0, r4
 8003994:	229e      	movs	r2, #158	; 0x9e
 8003996:	2102      	movs	r1, #2
 8003998:	f000 f902 	bl	8003ba0 <AUDIO_IO_Write>
}
 800399c:	4630      	mov	r0, r6
 800399e:	b002      	add	sp, #8
 80039a0:	bd70      	pop	{r4, r5, r6, pc}
  for(index = 0x00; index < 0xFF; index++);
 80039a2:	9b01      	ldr	r3, [sp, #4]
 80039a4:	3301      	adds	r3, #1
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	e7e9      	b.n	800397e <cs43l22_Resume+0x12>
 80039aa:	bf00      	nop
 80039ac:	20000108 	.word	0x20000108

080039b0 <cs43l22_Pause>:
{  
 80039b0:	b510      	push	{r4, lr}
 80039b2:	4604      	mov	r4, r0
 80039b4:	f7ff ffab 	bl	800390e <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 80039b8:	b2e0      	uxtb	r0, r4
 80039ba:	2201      	movs	r2, #1
 80039bc:	2102      	movs	r1, #2
 80039be:	f000 f8ef 	bl	8003ba0 <AUDIO_IO_Write>
}
 80039c2:	2000      	movs	r0, #0
 80039c4:	bd10      	pop	{r4, pc}
	...

080039c8 <cs43l22_Stop>:
{
 80039c8:	b510      	push	{r4, lr}
 80039ca:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80039cc:	b2e4      	uxtb	r4, r4
 80039ce:	f7ff ff9e 	bl	800390e <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 80039d2:	4620      	mov	r0, r4
 80039d4:	2204      	movs	r2, #4
 80039d6:	210e      	movs	r1, #14
 80039d8:	f000 f8e2 	bl	8003ba0 <AUDIO_IO_Write>
 80039dc:	4620      	mov	r0, r4
 80039de:	229f      	movs	r2, #159	; 0x9f
 80039e0:	2102      	movs	r1, #2
 80039e2:	f000 f8dd 	bl	8003ba0 <AUDIO_IO_Write>
  Is_cs43l22_Stop = 1;
 80039e6:	4b02      	ldr	r3, [pc, #8]	; (80039f0 <cs43l22_Stop+0x28>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	701a      	strb	r2, [r3, #0]
}
 80039ec:	2000      	movs	r0, #0
 80039ee:	bd10      	pop	{r4, pc}
 80039f0:	20000000 	.word	0x20000000

080039f4 <cs43l22_Play>:
{
 80039f4:	b570      	push	{r4, r5, r6, lr}
  if(Is_cs43l22_Stop == 1)
 80039f6:	4d0d      	ldr	r5, [pc, #52]	; (8003a2c <cs43l22_Play+0x38>)
 80039f8:	782b      	ldrb	r3, [r5, #0]
 80039fa:	2b01      	cmp	r3, #1
{
 80039fc:	4604      	mov	r4, r0
  if(Is_cs43l22_Stop == 1)
 80039fe:	d113      	bne.n	8003a28 <cs43l22_Play+0x34>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8003a00:	b2c6      	uxtb	r6, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8003a02:	2206      	movs	r2, #6
 8003a04:	210e      	movs	r1, #14
 8003a06:	4630      	mov	r0, r6
 8003a08:	f000 f8ca 	bl	8003ba0 <AUDIO_IO_Write>
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f7ff ff90 	bl	8003934 <cs43l22_SetMute>
  AUDIO_IO_Write(Addr, Reg, Value);
 8003a14:	229e      	movs	r2, #158	; 0x9e
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003a16:	4604      	mov	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8003a18:	2102      	movs	r1, #2
 8003a1a:	4630      	mov	r0, r6
 8003a1c:	f000 f8c0 	bl	8003ba0 <AUDIO_IO_Write>
    Is_cs43l22_Stop = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	702b      	strb	r3, [r5, #0]
}
 8003a24:	4620      	mov	r0, r4
 8003a26:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t counter = 0;
 8003a28:	2400      	movs	r4, #0
  return counter;  
 8003a2a:	e7fb      	b.n	8003a24 <cs43l22_Play+0x30>
 8003a2c:	20000000 	.word	0x20000000

08003a30 <cs43l22_SetOutputMode>:
  switch (Output) 
 8003a30:	3901      	subs	r1, #1
{
 8003a32:	b510      	push	{r4, lr}
 8003a34:	b2c0      	uxtb	r0, r0
 8003a36:	4c10      	ldr	r4, [pc, #64]	; (8003a78 <cs43l22_SetOutputMode+0x48>)
  switch (Output) 
 8003a38:	2903      	cmp	r1, #3
 8003a3a:	d817      	bhi.n	8003a6c <cs43l22_SetOutputMode+0x3c>
 8003a3c:	e8df f001 	tbb	[pc, r1]
 8003a40:	16100a02 	.word	0x16100a02
  AUDIO_IO_Write(Addr, Reg, Value);
 8003a44:	22fa      	movs	r2, #250	; 0xfa
 8003a46:	2104      	movs	r1, #4
 8003a48:	f000 f8aa 	bl	8003ba0 <AUDIO_IO_Write>
      OutputDev = 0xFA;
 8003a4c:	23fa      	movs	r3, #250	; 0xfa
      OutputDev = 0x05;
 8003a4e:	7023      	strb	r3, [r4, #0]
}
 8003a50:	2000      	movs	r0, #0
 8003a52:	bd10      	pop	{r4, pc}
  AUDIO_IO_Write(Addr, Reg, Value);
 8003a54:	22af      	movs	r2, #175	; 0xaf
 8003a56:	2104      	movs	r1, #4
 8003a58:	f000 f8a2 	bl	8003ba0 <AUDIO_IO_Write>
      OutputDev = 0xAF;
 8003a5c:	23af      	movs	r3, #175	; 0xaf
 8003a5e:	e7f6      	b.n	8003a4e <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 8003a60:	22aa      	movs	r2, #170	; 0xaa
 8003a62:	2104      	movs	r1, #4
 8003a64:	f000 f89c 	bl	8003ba0 <AUDIO_IO_Write>
      OutputDev = 0xAA;
 8003a68:	23aa      	movs	r3, #170	; 0xaa
 8003a6a:	e7f0      	b.n	8003a4e <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 8003a6c:	2205      	movs	r2, #5
 8003a6e:	2104      	movs	r1, #4
 8003a70:	f000 f896 	bl	8003ba0 <AUDIO_IO_Write>
      OutputDev = 0x05;
 8003a74:	2305      	movs	r3, #5
 8003a76:	e7ea      	b.n	8003a4e <cs43l22_SetOutputMode+0x1e>
 8003a78:	20000108 	.word	0x20000108

08003a7c <I2Cx_Init>:
/******************************* I2C Routines**********************************/
/**
  * @brief  Configures I2C interface.
  */
static void I2Cx_Init(void)
{
 8003a7c:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003a7e:	4e29      	ldr	r6, [pc, #164]	; (8003b24 <I2Cx_Init+0xa8>)
{
 8003a80:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003a82:	4630      	mov	r0, r6
 8003a84:	f002 f884 	bl	8005b90 <HAL_I2C_GetState>
 8003a88:	4605      	mov	r5, r0
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	d147      	bne.n	8003b1e <I2Cx_Init+0xa2>
  {
    /* DISCOVERY_I2Cx peripheral configuration */
    I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 8003a8e:	4b26      	ldr	r3, [pc, #152]	; (8003b28 <I2Cx_Init+0xac>)
static void I2Cx_MspInit(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003a90:	4c26      	ldr	r4, [pc, #152]	; (8003b2c <I2Cx_Init+0xb0>)
 8003a92:	9001      	str	r0, [sp, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a94:	e9c6 3001 	strd	r3, r0, [r6, #4]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a98:	2233      	movs	r2, #51	; 0x33
 8003a9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a9e:	e9c6 2303 	strd	r2, r3, [r6, #12]
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8003aa2:	4b23      	ldr	r3, [pc, #140]	; (8003b30 <I2Cx_Init+0xb4>)
 8003aa4:	6033      	str	r3, [r6, #0]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003aa6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003aa8:	f043 0302 	orr.w	r3, r3, #2
 8003aac:	6323      	str	r3, [r4, #48]	; 0x30
 8003aae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	9b01      	ldr	r3, [sp, #4]

  /* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ab8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003abc:	2312      	movs	r3, #18
 8003abe:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003ac2:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8003ac4:	e9cd 0305 	strd	r0, r3, [sp, #20]
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8003ac8:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003aca:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8003acc:	4819      	ldr	r0, [pc, #100]	; (8003b34 <I2Cx_Init+0xb8>)
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003ace:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8003ad0:	f000 fe32 	bl	8004738 <HAL_GPIO_Init>

  /* Enable the DISCOVERY_I2Cx peripheral clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8003ad4:	9502      	str	r5, [sp, #8]
 8003ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ad8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003adc:	6423      	str	r3, [r4, #64]	; 0x40
 8003ade:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae4:	9302      	str	r3, [sp, #8]
 8003ae6:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003ae8:	6a23      	ldr	r3, [r4, #32]
 8003aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003aee:	6223      	str	r3, [r4, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003af0:	6a23      	ldr	r3, [r4, #32]
 8003af2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003af6:	6223      	str	r3, [r4, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 8003af8:	462a      	mov	r2, r5
 8003afa:	4629      	mov	r1, r5
 8003afc:	201f      	movs	r0, #31
 8003afe:	f000 fa97 	bl	8004030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003b02:	201f      	movs	r0, #31
 8003b04:	f000 fad8 	bl	80040b8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 8003b08:	462a      	mov	r2, r5
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	2020      	movs	r0, #32
 8003b0e:	f000 fa8f 	bl	8004030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8003b12:	2020      	movs	r0, #32
 8003b14:	f000 fad0 	bl	80040b8 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 8003b18:	4630      	mov	r0, r6
 8003b1a:	f001 fd7b 	bl	8005614 <HAL_I2C_Init>
}
 8003b1e:	b008      	add	sp, #32
 8003b20:	bd70      	pop	{r4, r5, r6, pc}
 8003b22:	bf00      	nop
 8003b24:	2000010c 	.word	0x2000010c
 8003b28:	000186a0 	.word	0x000186a0
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40005400 	.word	0x40005400
 8003b34:	40020400 	.word	0x40020400

08003b38 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8003b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3a:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8003b3c:	2600      	movs	r6, #0
 8003b3e:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <AUDIO_IO_Init+0x5c>)
 8003b40:	9600      	str	r6, [sp, #0]
 8003b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8003b44:	4c14      	ldr	r4, [pc, #80]	; (8003b98 <AUDIO_IO_Init+0x60>)
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8003b46:	f042 0208 	orr.w	r2, r2, #8
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b54:	2510      	movs	r5, #16
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8003b56:	a901      	add	r1, sp, #4
 8003b58:	4620      	mov	r0, r4
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8003b5a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b5c:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003b5e:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8003b60:	e9cd 6303 	strd	r6, r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b64:	e9cd 5701 	strd	r5, r7, [sp, #4]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8003b68:	f000 fde6 	bl	8004738 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8003b6c:	f7ff ff86 	bl	8003a7c <I2Cx_Init>
  
  /* Power Down the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8003b70:	4632      	mov	r2, r6
 8003b72:	4629      	mov	r1, r5
 8003b74:	4620      	mov	r0, r4
 8003b76:	f000 ff25 	bl	80049c4 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8003b7a:	2005      	movs	r0, #5
 8003b7c:	f000 fa26 	bl	8003fcc <HAL_Delay>
  
  /* Power on the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8003b80:	463a      	mov	r2, r7
 8003b82:	4629      	mov	r1, r5
 8003b84:	4620      	mov	r0, r4
 8003b86:	f000 ff1d 	bl	80049c4 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8003b8a:	2005      	movs	r0, #5
 8003b8c:	f000 fa1e 	bl	8003fcc <HAL_Delay>
}
 8003b90:	b007      	add	sp, #28
 8003b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40020c00 	.word	0x40020c00

08003b9c <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
  
}
 8003b9c:	4770      	bx	lr
	...

08003ba0 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003ba0:	b510      	push	{r4, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <AUDIO_IO_Write+0x30>)
 8003ba8:	f804 2d01 	strb.w	r2, [r4, #-1]!
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	9302      	str	r3, [sp, #8]
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	460a      	mov	r2, r1
 8003bb4:	e9cd 4300 	strd	r4, r3, [sp]
 8003bb8:	4601      	mov	r1, r0
 8003bba:	4806      	ldr	r0, [pc, #24]	; (8003bd4 <AUDIO_IO_Write+0x34>)
 8003bbc:	f001 fe2e 	bl	800581c <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8003bc0:	b120      	cbz	r0, 8003bcc <AUDIO_IO_Write+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 8003bc2:	4804      	ldr	r0, [pc, #16]	; (8003bd4 <AUDIO_IO_Write+0x34>)
 8003bc4:	f001 fdfa 	bl	80057bc <HAL_I2C_DeInit>
  I2Cx_Init();
 8003bc8:	f7ff ff58 	bl	8003a7c <I2Cx_Init>
  I2Cx_WriteData(Addr, Reg, Value);
}
 8003bcc:	b006      	add	sp, #24
 8003bce:	bd10      	pop	{r4, pc}
 8003bd0:	20000034 	.word	0x20000034
 8003bd4:	2000010c 	.word	0x2000010c

08003bd8 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003bd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8003bda:	aa06      	add	r2, sp, #24
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &value, 1,I2cxTimeout);
 8003be2:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <AUDIO_IO_Read+0x38>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	9302      	str	r3, [sp, #8]
 8003be8:	2301      	movs	r3, #1
 8003bea:	e9cd 2300 	strd	r2, r3, [sp]
 8003bee:	460a      	mov	r2, r1
 8003bf0:	4601      	mov	r1, r0
 8003bf2:	4808      	ldr	r0, [pc, #32]	; (8003c14 <AUDIO_IO_Read+0x3c>)
 8003bf4:	f001 feb4 	bl	8005960 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8003bf8:	b120      	cbz	r0, 8003c04 <AUDIO_IO_Read+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 8003bfa:	4806      	ldr	r0, [pc, #24]	; (8003c14 <AUDIO_IO_Read+0x3c>)
 8003bfc:	f001 fdde 	bl	80057bc <HAL_I2C_DeInit>
  I2Cx_Init();
 8003c00:	f7ff ff3c 	bl	8003a7c <I2Cx_Init>
  return I2Cx_ReadData(Addr, Reg);
}
 8003c04:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8003c08:	b007      	add	sp, #28
 8003c0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c0e:	bf00      	nop
 8003c10:	20000034 	.word	0x20000034
 8003c14:	2000010c 	.word	0x2000010c

08003c18 <I2S3_Init>:
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8003c18:	4a0d      	ldr	r2, [pc, #52]	; (8003c50 <I2S3_Init+0x38>)

 /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8003c1a:	69d1      	ldr	r1, [r2, #28]
 8003c1c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
{
 8003c20:	b508      	push	{r3, lr}
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8003c22:	0409      	lsls	r1, r1, #16
  hAudioOutI2s.Instance         = I2S3;
 8003c24:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <I2S3_Init+0x3c>)
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8003c26:	0c09      	lsrs	r1, r1, #16
  hAudioOutI2s.Instance         = I2S3;
 8003c28:	601a      	str	r2, [r3, #0]
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8003c2a:	61d1      	str	r1, [r2, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8003c2c:	2200      	movs	r2, #0
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8003c2e:	f44f 7100 	mov.w	r1, #512	; 0x200
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8003c32:	6158      	str	r0, [r3, #20]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8003c34:	4618      	mov	r0, r3
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8003c36:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8003c3a:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8003c3c:	6119      	str	r1, [r3, #16]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8003c3e:	e9c3 1201 	strd	r1, r2, [r3, #4]
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8003c42:	f002 f86b 	bl	8005d1c <HAL_I2S_Init>
  }
  else
  {
    return AUDIO_OK;
  }
}
 8003c46:	3000      	adds	r0, #0
 8003c48:	bf18      	it	ne
 8003c4a:	2001      	movne	r0, #1
 8003c4c:	bd08      	pop	{r3, pc}
 8003c4e:	bf00      	nop
 8003c50:	40003c00 	.word	0x40003c00
 8003c54:	200002f4 	.word	0x200002f4

08003c58 <BSP_AUDIO_OUT_Play>:
{
 8003c58:	b538      	push	{r3, r4, r5, lr}
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8003c5a:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <BSP_AUDIO_OUT_Play+0x34>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
{
 8003c5e:	4605      	mov	r5, r0
 8003c60:	460c      	mov	r4, r1
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8003c62:	b28a      	uxth	r2, r1
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	4601      	mov	r1, r0
 8003c68:	2094      	movs	r0, #148	; 0x94
 8003c6a:	4798      	blx	r3
 8003c6c:	b960      	cbnz	r0, 8003c88 <BSP_AUDIO_OUT_Play+0x30>
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8003c6e:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 8003c72:	bf34      	ite	cc
 8003c74:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 8003c78:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 8003c7c:	4629      	mov	r1, r5
 8003c7e:	4804      	ldr	r0, [pc, #16]	; (8003c90 <BSP_AUDIO_OUT_Play+0x38>)
 8003c80:	f001 ff8a 	bl	8005b98 <HAL_I2S_Transmit_DMA>
    return AUDIO_OK;
 8003c84:	2000      	movs	r0, #0
}
 8003c86:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8003c88:	2001      	movs	r0, #1
 8003c8a:	e7fc      	b.n	8003c86 <BSP_AUDIO_OUT_Play+0x2e>
 8003c8c:	200001c0 	.word	0x200001c0
 8003c90:	200002f4 	.word	0x200002f4

08003c94 <BSP_AUDIO_OUT_ChangeBuffer>:
  HAL_I2S_Transmit_DMA(&hAudioOutI2s, pData, Size); 
 8003c94:	460a      	mov	r2, r1
 8003c96:	4601      	mov	r1, r0
 8003c98:	4801      	ldr	r0, [pc, #4]	; (8003ca0 <BSP_AUDIO_OUT_ChangeBuffer+0xc>)
 8003c9a:	f001 bf7d 	b.w	8005b98 <HAL_I2S_Transmit_DMA>
 8003c9e:	bf00      	nop
 8003ca0:	200002f4 	.word	0x200002f4

08003ca4 <BSP_AUDIO_OUT_Stop>:
{
 8003ca4:	b538      	push	{r3, r4, r5, lr}
 8003ca6:	4605      	mov	r5, r0
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8003ca8:	480c      	ldr	r0, [pc, #48]	; (8003cdc <BSP_AUDIO_OUT_Stop+0x38>)
 8003caa:	f001 ffc7 	bl	8005c3c <HAL_I2S_DMAStop>
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8003cae:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <BSP_AUDIO_OUT_Stop+0x3c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4629      	mov	r1, r5
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2094      	movs	r0, #148	; 0x94
 8003cb8:	4798      	blx	r3
 8003cba:	4604      	mov	r4, r0
 8003cbc:	b958      	cbnz	r0, 8003cd6 <BSP_AUDIO_OUT_Stop+0x32>
    if(Option == CODEC_PDWN_HW)
 8003cbe:	2d01      	cmp	r5, #1
 8003cc0:	d107      	bne.n	8003cd2 <BSP_AUDIO_OUT_Stop+0x2e>
      HAL_Delay(1);
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	f000 f982 	bl	8003fcc <HAL_Delay>
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8003cc8:	4622      	mov	r2, r4
 8003cca:	2110      	movs	r1, #16
 8003ccc:	4805      	ldr	r0, [pc, #20]	; (8003ce4 <BSP_AUDIO_OUT_Stop+0x40>)
 8003cce:	f000 fe79 	bl	80049c4 <HAL_GPIO_WritePin>
    return AUDIO_OK;
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	e000      	b.n	8003cd8 <BSP_AUDIO_OUT_Stop+0x34>
    return AUDIO_ERROR;
 8003cd6:	2001      	movs	r0, #1
}
 8003cd8:	bd38      	pop	{r3, r4, r5, pc}
 8003cda:	bf00      	nop
 8003cdc:	200002f4 	.word	0x200002f4
 8003ce0:	200001c0 	.word	0x200001c0
 8003ce4:	40020c00 	.word	0x40020c00

08003ce8 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8003ce8:	b530      	push	{r4, r5, lr}
    if(I2SFreq[index] == AudioFreq)
 8003cea:	4d14      	ldr	r5, [pc, #80]	; (8003d3c <BSP_AUDIO_OUT_ClockConfig+0x54>)
{ 
 8003cec:	b085      	sub	sp, #20
 8003cee:	2300      	movs	r3, #0
  uint8_t index = 0, freqindex = 0xFF;
 8003cf0:	24ff      	movs	r4, #255	; 0xff
    if(I2SFreq[index] == AudioFreq)
 8003cf2:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	4288      	cmp	r0, r1
 8003cfc:	bf08      	it	eq
 8003cfe:	4614      	moveq	r4, r2
  for(index = 0; index < 8; index++)
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d1f6      	bne.n	8003cf2 <BSP_AUDIO_OUT_ClockConfig+0xa>
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8003d04:	4668      	mov	r0, sp
 8003d06:	f002 fef5 	bl	8006af4 <HAL_RCCEx_GetPeriphCLKConfig>
 8003d0a:	2301      	movs	r3, #1
  if ((freqindex & 0x7) == 0)
 8003d0c:	f014 0f07 	tst.w	r4, #7
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003d10:	9300      	str	r3, [sp, #0]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8003d12:	bf01      	itttt	eq
 8003d14:	4b0a      	ldreq	r3, [pc, #40]	; (8003d40 <BSP_AUDIO_OUT_ClockConfig+0x58>)
 8003d16:	f853 3024 	ldreq.w	r3, [r3, r4, lsl #2]
 8003d1a:	9301      	streq	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8003d1c:	4b09      	ldreq	r3, [pc, #36]	; (8003d44 <BSP_AUDIO_OUT_ClockConfig+0x5c>)
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8003d1e:	bf16      	itet	ne
 8003d20:	f44f 7381 	movne.w	r3, #258	; 0x102
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8003d24:	f853 3024 	ldreq.w	r3, [r3, r4, lsl #2]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8003d28:	9301      	strne	r3, [sp, #4]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8003d2a:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8003d2c:	bf18      	it	ne
 8003d2e:	2303      	movne	r3, #3
 8003d30:	9302      	str	r3, [sp, #8]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8003d32:	f002 fdf1 	bl	8006918 <HAL_RCCEx_PeriphCLKConfig>
}
 8003d36:	b005      	add	sp, #20
 8003d38:	bd30      	pop	{r4, r5, pc}
 8003d3a:	bf00      	nop
 8003d3c:	0800c790 	.word	0x0800c790
 8003d40:	0800c7b0 	.word	0x0800c7b0
 8003d44:	0800c7d0 	.word	0x0800c7d0

08003d48 <BSP_AUDIO_OUT_MspInit>:
{
 8003d48:	b570      	push	{r4, r5, r6, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
  I2S3_CLK_ENABLE();
 8003d4c:	4c3e      	ldr	r4, [pc, #248]	; (8003e48 <BSP_AUDIO_OUT_MspInit+0x100>)
 8003d4e:	2500      	movs	r5, #0
 8003d50:	9500      	str	r5, [sp, #0]
 8003d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d58:	6423      	str	r3, [r4, #64]	; 0x40
 8003d5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	9b00      	ldr	r3, [sp, #0]
  I2S3_SCK_SD_CLK_ENABLE();
 8003d64:	9501      	str	r5, [sp, #4]
 8003d66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d68:	f043 0304 	orr.w	r3, r3, #4
 8003d6c:	6323      	str	r3, [r4, #48]	; 0x30
 8003d6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	9301      	str	r3, [sp, #4]
 8003d76:	9b01      	ldr	r3, [sp, #4]
  I2S3_WS_CLK_ENABLE();
 8003d78:	9502      	str	r5, [sp, #8]
 8003d7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	6323      	str	r3, [r4, #48]	; 0x30
 8003d82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	9302      	str	r3, [sp, #8]
{
 8003d8a:	4606      	mov	r6, r0
  I2S3_WS_CLK_ENABLE();
 8003d8c:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8003d8e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003d92:	2302      	movs	r3, #2
 8003d94:	e9cd 0305 	strd	r0, r3, [sp, #20]
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8003d98:	e9cd 5307 	strd	r5, r3, [sp, #28]
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8003d9c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8003d9e:	2306      	movs	r3, #6
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8003da0:	482a      	ldr	r0, [pc, #168]	; (8003e4c <BSP_AUDIO_OUT_MspInit+0x104>)
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8003da2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8003da4:	f000 fcc8 	bl	8004738 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8003da8:	2310      	movs	r3, #16
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8003daa:	a905      	add	r1, sp, #20
 8003dac:	4828      	ldr	r0, [pc, #160]	; (8003e50 <BSP_AUDIO_OUT_MspInit+0x108>)
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8003dae:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8003db0:	f000 fcc2 	bl	8004738 <HAL_GPIO_Init>
  I2S3_MCK_CLK_ENABLE();
 8003db4:	9503      	str	r5, [sp, #12]
 8003db6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8003db8:	4824      	ldr	r0, [pc, #144]	; (8003e4c <BSP_AUDIO_OUT_MspInit+0x104>)
  I2S3_MCK_CLK_ENABLE();
 8003dba:	f043 0304 	orr.w	r3, r3, #4
 8003dbe:	6323      	str	r3, [r4, #48]	; 0x30
 8003dc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	9303      	str	r3, [sp, #12]
 8003dc8:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8003dca:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8003dd0:	f000 fcb2 	bl	8004738 <HAL_GPIO_Init>
  I2S3_DMAx_CLK_ENABLE(); 
 8003dd4:	9504      	str	r5, [sp, #16]
 8003dd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hi2s->Instance == I2S3)
 8003dd8:	6832      	ldr	r2, [r6, #0]
  I2S3_DMAx_CLK_ENABLE(); 
 8003dda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dde:	6323      	str	r3, [r4, #48]	; 0x30
 8003de0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de6:	9304      	str	r3, [sp, #16]
 8003de8:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S3)
 8003dea:	4b1a      	ldr	r3, [pc, #104]	; (8003e54 <BSP_AUDIO_OUT_MspInit+0x10c>)
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d121      	bne.n	8003e34 <BSP_AUDIO_OUT_MspInit+0xec>
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8003df0:	4c19      	ldr	r4, [pc, #100]	; (8003e58 <BSP_AUDIO_OUT_MspInit+0x110>)
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8003df2:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003df4:	2340      	movs	r3, #64	; 0x40
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003df6:	e9c4 3502 	strd	r3, r5, [r4, #8]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8003dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e02:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8003e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8003e0a:	e9c4 3506 	strd	r3, r5, [r4, #24]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8003e0e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003e12:	2304      	movs	r3, #4
 8003e14:	e9c4 1308 	strd	r1, r3, [r4, #32]
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003e18:	2303      	movs	r3, #3
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003e1a:	e9c4 350a 	strd	r3, r5, [r4, #40]	; 0x28
    HAL_DMA_DeInit(&hdma_i2sTx);
 8003e1e:	4620      	mov	r0, r4
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8003e20:	4b0e      	ldr	r3, [pc, #56]	; (8003e5c <BSP_AUDIO_OUT_MspInit+0x114>)
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8003e22:	6065      	str	r5, [r4, #4]
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003e24:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8003e26:	6023      	str	r3, [r4, #0]
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8003e28:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_DMA_DeInit(&hdma_i2sTx);
 8003e2a:	f000 facd 	bl	80043c8 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_i2sTx);
 8003e2e:	4620      	mov	r0, r4
 8003e30:	f000 f9a2 	bl	8004178 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8003e34:	2200      	movs	r2, #0
 8003e36:	210e      	movs	r1, #14
 8003e38:	202f      	movs	r0, #47	; 0x2f
 8003e3a:	f000 f8f9 	bl	8004030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ); 
 8003e3e:	202f      	movs	r0, #47	; 0x2f
 8003e40:	f000 f93a 	bl	80040b8 <HAL_NVIC_EnableIRQ>
}
 8003e44:	b00a      	add	sp, #40	; 0x28
 8003e46:	bd70      	pop	{r4, r5, r6, pc}
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	40020800 	.word	0x40020800
 8003e50:	40020000 	.word	0x40020000
 8003e54:	40003c00 	.word	0x40003c00
 8003e58:	20000160 	.word	0x20000160
 8003e5c:	400260b8 	.word	0x400260b8

08003e60 <BSP_AUDIO_OUT_Init>:
{    
 8003e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8003e64:	4c16      	ldr	r4, [pc, #88]	; (8003ec0 <BSP_AUDIO_OUT_Init+0x60>)
{    
 8003e66:	4615      	mov	r5, r2
 8003e68:	4607      	mov	r7, r0
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	4620      	mov	r0, r4
{    
 8003e6e:	4688      	mov	r8, r1
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8003e70:	4629      	mov	r1, r5
 8003e72:	f7ff ff39 	bl	8003ce8 <BSP_AUDIO_OUT_ClockConfig>
  hAudioOutI2s.Instance = I2S3;
 8003e76:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <BSP_AUDIO_OUT_Init+0x64>)
 8003e78:	6023      	str	r3, [r4, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f002 f8d8 	bl	8006030 <HAL_I2S_GetState>
 8003e80:	4601      	mov	r1, r0
 8003e82:	b910      	cbnz	r0, 8003e8a <BSP_AUDIO_OUT_Init+0x2a>
    BSP_AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8003e84:	4620      	mov	r0, r4
 8003e86:	f7ff ff5f 	bl	8003d48 <BSP_AUDIO_OUT_MspInit>
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	f7ff fec4 	bl	8003c18 <I2S3_Init>
 8003e90:	4604      	mov	r4, r0
 8003e92:	b118      	cbz	r0, 8003e9c <BSP_AUDIO_OUT_Init+0x3c>
    ret = AUDIO_ERROR;
 8003e94:	2401      	movs	r4, #1
}
 8003e96:	4620      	mov	r0, r4
 8003e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8003e9c:	4e0a      	ldr	r6, [pc, #40]	; (8003ec8 <BSP_AUDIO_OUT_Init+0x68>)
 8003e9e:	2094      	movs	r0, #148	; 0x94
 8003ea0:	68b3      	ldr	r3, [r6, #8]
 8003ea2:	4798      	blx	r3
 8003ea4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8003ea8:	28e0      	cmp	r0, #224	; 0xe0
 8003eaa:	d1f3      	bne.n	8003e94 <BSP_AUDIO_OUT_Init+0x34>
      pAudioDrv = &cs43l22_drv; 
 8003eac:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <BSP_AUDIO_OUT_Init+0x6c>)
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8003eae:	4642      	mov	r2, r8
      pAudioDrv = &cs43l22_drv; 
 8003eb0:	601e      	str	r6, [r3, #0]
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8003eb2:	4639      	mov	r1, r7
 8003eb4:	6836      	ldr	r6, [r6, #0]
 8003eb6:	462b      	mov	r3, r5
 8003eb8:	2094      	movs	r0, #148	; 0x94
 8003eba:	47b0      	blx	r6
 8003ebc:	e7eb      	b.n	8003e96 <BSP_AUDIO_OUT_Init+0x36>
 8003ebe:	bf00      	nop
 8003ec0:	200002f4 	.word	0x200002f4
 8003ec4:	40003c00 	.word	0x40003c00
 8003ec8:	20000004 	.word	0x20000004
 8003ecc:	200001c0 	.word	0x200001c0

08003ed0 <HAL_I2S_TxCpltCallback>:
{
 8003ed0:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 8003ed2:	6802      	ldr	r2, [r0, #0]
 8003ed4:	4b02      	ldr	r3, [pc, #8]	; (8003ee0 <HAL_I2S_TxCpltCallback+0x10>)
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d101      	bne.n	8003ede <HAL_I2S_TxCpltCallback+0xe>
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8003eda:	f007 f943 	bl	800b164 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8003ede:	bd08      	pop	{r3, pc}
 8003ee0:	40003c00 	.word	0x40003c00

08003ee4 <HAL_I2S_TxHalfCpltCallback>:
{
 8003ee4:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 8003ee6:	6802      	ldr	r2, [r0, #0]
 8003ee8:	4b02      	ldr	r3, [pc, #8]	; (8003ef4 <HAL_I2S_TxHalfCpltCallback+0x10>)
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d101      	bne.n	8003ef2 <HAL_I2S_TxHalfCpltCallback+0xe>
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8003eee:	f007 f947 	bl	800b180 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8003ef2:	bd08      	pop	{r3, pc}
 8003ef4:	40003c00 	.word	0x40003c00

08003ef8 <BSP_AUDIO_IN_TransferComplete_CallBack>:
 8003ef8:	4770      	bx	lr

08003efa <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003efa:	b508      	push	{r3, lr}
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8003efc:	f7ff fffc 	bl	8003ef8 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8003f00:	bd08      	pop	{r3, pc}

08003f02 <BSP_AUDIO_IN_Error_Callback>:
 8003f02:	4770      	bx	lr

08003f04 <HAL_I2S_ErrorCallback>:
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 8003f04:	6802      	ldr	r2, [r0, #0]
 8003f06:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <HAL_I2S_ErrorCallback+0x20>)
 8003f08:	429a      	cmp	r2, r3
{
 8003f0a:	b510      	push	{r4, lr}
 8003f0c:	4604      	mov	r4, r0
  if(hi2s->Instance == I2S3)
 8003f0e:	d101      	bne.n	8003f14 <HAL_I2S_ErrorCallback+0x10>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8003f10:	f007 f93c 	bl	800b18c <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8003f14:	6822      	ldr	r2, [r4, #0]
 8003f16:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <HAL_I2S_ErrorCallback+0x24>)
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d101      	bne.n	8003f20 <HAL_I2S_ErrorCallback+0x1c>
  {
    BSP_AUDIO_IN_Error_Callback();
 8003f1c:	f7ff fff1 	bl	8003f02 <BSP_AUDIO_IN_Error_Callback>
  }
}
 8003f20:	bd10      	pop	{r4, pc}
 8003f22:	bf00      	nop
 8003f24:	40003c00 	.word	0x40003c00
 8003f28:	40003800 	.word	0x40003800

08003f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f2c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f2e:	4a0e      	ldr	r2, [pc, #56]	; (8003f68 <HAL_InitTick+0x3c>)
 8003f30:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <HAL_InitTick+0x40>)
{
 8003f32:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f34:	7818      	ldrb	r0, [r3, #0]
 8003f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f3a:	fbb3 f3f0 	udiv	r3, r3, r0
 8003f3e:	6810      	ldr	r0, [r2, #0]
 8003f40:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f44:	f000 f8ce 	bl	80040e4 <HAL_SYSTICK_Config>
 8003f48:	4604      	mov	r4, r0
 8003f4a:	b958      	cbnz	r0, 8003f64 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f4c:	2d0f      	cmp	r5, #15
 8003f4e:	d809      	bhi.n	8003f64 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f50:	4602      	mov	r2, r0
 8003f52:	4629      	mov	r1, r5
 8003f54:	f04f 30ff 	mov.w	r0, #4294967295
 8003f58:	f000 f86a 	bl	8004030 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f5c:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <HAL_InitTick+0x44>)
 8003f5e:	4620      	mov	r0, r4
 8003f60:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003f62:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003f64:	2001      	movs	r0, #1
 8003f66:	e7fc      	b.n	8003f62 <HAL_InitTick+0x36>
 8003f68:	20000084 	.word	0x20000084
 8003f6c:	20000038 	.word	0x20000038
 8003f70:	2000003c 	.word	0x2000003c

08003f74 <HAL_Init>:
{
 8003f74:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_Init+0x30>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f86:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f8e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f90:	2003      	movs	r0, #3
 8003f92:	f000 f82f 	bl	8003ff4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f96:	2000      	movs	r0, #0
 8003f98:	f7ff ffc8 	bl	8003f2c <HAL_InitTick>
  HAL_MspInit();
 8003f9c:	f007 f8fc 	bl	800b198 <HAL_MspInit>
}
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	bd08      	pop	{r3, pc}
 8003fa4:	40023c00 	.word	0x40023c00

08003fa8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003fa8:	4a03      	ldr	r2, [pc, #12]	; (8003fb8 <HAL_IncTick+0x10>)
 8003faa:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <HAL_IncTick+0x14>)
 8003fac:	6811      	ldr	r1, [r2, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	440b      	add	r3, r1
 8003fb2:	6013      	str	r3, [r2, #0]
}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20000384 	.word	0x20000384
 8003fbc:	20000038 	.word	0x20000038

08003fc0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003fc0:	4b01      	ldr	r3, [pc, #4]	; (8003fc8 <HAL_GetTick+0x8>)
 8003fc2:	6818      	ldr	r0, [r3, #0]
}
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	20000384 	.word	0x20000384

08003fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fcc:	b538      	push	{r3, r4, r5, lr}
 8003fce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003fd0:	f7ff fff6 	bl	8003fc0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fd4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003fd6:	bf1c      	itt	ne
 8003fd8:	4b05      	ldrne	r3, [pc, #20]	; (8003ff0 <HAL_Delay+0x24>)
 8003fda:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8003fdc:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8003fde:	bf18      	it	ne
 8003fe0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fe2:	f7ff ffed 	bl	8003fc0 <HAL_GetTick>
 8003fe6:	1b40      	subs	r0, r0, r5
 8003fe8:	42a0      	cmp	r0, r4
 8003fea:	d3fa      	bcc.n	8003fe2 <HAL_Delay+0x16>
  {
  }
}
 8003fec:	bd38      	pop	{r3, r4, r5, pc}
 8003fee:	bf00      	nop
 8003ff0:	20000038 	.word	0x20000038

08003ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003ff4:	1ec3      	subs	r3, r0, #3
 8003ff6:	2b04      	cmp	r3, #4
{
 8003ff8:	b510      	push	{r4, lr}
 8003ffa:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003ffc:	d903      	bls.n	8004006 <HAL_NVIC_SetPriorityGrouping+0x12>
 8003ffe:	21a2      	movs	r1, #162	; 0xa2
 8004000:	4809      	ldr	r0, [pc, #36]	; (8004028 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8004002:	f007 f814 	bl	800b02e <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004006:	4a09      	ldr	r2, [pc, #36]	; (800402c <HAL_NVIC_SetPriorityGrouping+0x38>)
 8004008:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800400a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800400e:	041b      	lsls	r3, r3, #16
 8004010:	0c1b      	lsrs	r3, r3, #16
 8004012:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8004016:	0224      	lsls	r4, r4, #8
 8004018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800401c:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8004020:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8004022:	60d4      	str	r4, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004024:	bd10      	pop	{r4, pc}
 8004026:	bf00      	nop
 8004028:	0800c7f0 	.word	0x0800c7f0
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004030:	2a0f      	cmp	r2, #15
{ 
 8004032:	b570      	push	{r4, r5, r6, lr}
 8004034:	4605      	mov	r5, r0
 8004036:	460c      	mov	r4, r1
 8004038:	4616      	mov	r6, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800403a:	d903      	bls.n	8004044 <HAL_NVIC_SetPriority+0x14>
 800403c:	21ba      	movs	r1, #186	; 0xba
 800403e:	481b      	ldr	r0, [pc, #108]	; (80040ac <HAL_NVIC_SetPriority+0x7c>)
 8004040:	f006 fff5 	bl	800b02e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004044:	2c0f      	cmp	r4, #15
 8004046:	d903      	bls.n	8004050 <HAL_NVIC_SetPriority+0x20>
 8004048:	21bb      	movs	r1, #187	; 0xbb
 800404a:	4818      	ldr	r0, [pc, #96]	; (80040ac <HAL_NVIC_SetPriority+0x7c>)
 800404c:	f006 ffef 	bl	800b02e <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004050:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <HAL_NVIC_SetPriority+0x80>)
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004058:	f1c2 0307 	rsb	r3, r2, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800405c:	1d11      	adds	r1, r2, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800405e:	2b04      	cmp	r3, #4
 8004060:	bf28      	it	cs
 8004062:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004064:	2906      	cmp	r1, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004066:	f04f 31ff 	mov.w	r1, #4294967295
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800406e:	bf8c      	ite	hi
 8004070:	3a03      	subhi	r2, #3
 8004072:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004074:	ea24 0303 	bic.w	r3, r4, r3
 8004078:	4093      	lsls	r3, r2
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800407a:	fa01 f202 	lsl.w	r2, r1, r2
 800407e:	ea26 0602 	bic.w	r6, r6, r2
  if ((int32_t)(IRQn) < 0)
 8004082:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004084:	ea43 0306 	orr.w	r3, r3, r6
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004088:	bfa8      	it	ge
 800408a:	f105 4560 	addge.w	r5, r5, #3758096384	; 0xe0000000
 800408e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004092:	bfbc      	itt	lt
 8004094:	f005 050f 	andlt.w	r5, r5, #15
 8004098:	4a06      	ldrlt	r2, [pc, #24]	; (80040b4 <HAL_NVIC_SetPriority+0x84>)
 800409a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409c:	bfaa      	itet	ge
 800409e:	f505 4561 	addge.w	r5, r5, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040a2:	5553      	strblt	r3, [r2, r5]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040a4:	f885 3300 	strbge.w	r3, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80040a8:	bd70      	pop	{r4, r5, r6, pc}
 80040aa:	bf00      	nop
 80040ac:	0800c7f0 	.word	0x0800c7f0
 80040b0:	e000ed00 	.word	0xe000ed00
 80040b4:	e000ed14 	.word	0xe000ed14

080040b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040b8:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80040ba:	1e04      	subs	r4, r0, #0
 80040bc:	da03      	bge.n	80040c6 <HAL_NVIC_EnableIRQ+0xe>
 80040be:	21ce      	movs	r1, #206	; 0xce
 80040c0:	4806      	ldr	r0, [pc, #24]	; (80040dc <HAL_NVIC_EnableIRQ+0x24>)
 80040c2:	f006 ffb4 	bl	800b02e <assert_failed>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80040c6:	0962      	lsrs	r2, r4, #5
 80040c8:	2301      	movs	r3, #1
 80040ca:	f004 041f 	and.w	r4, r4, #31
 80040ce:	fa03 f404 	lsl.w	r4, r3, r4
 80040d2:	4b03      	ldr	r3, [pc, #12]	; (80040e0 <HAL_NVIC_EnableIRQ+0x28>)
 80040d4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80040d8:	bd10      	pop	{r4, pc}
 80040da:	bf00      	nop
 80040dc:	0800c7f0 	.word	0x0800c7f0
 80040e0:	e000e100 	.word	0xe000e100

080040e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040e4:	3801      	subs	r0, #1
 80040e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80040ea:	d20a      	bcs.n	8004102 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ee:	4a07      	ldr	r2, [pc, #28]	; (800410c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040f0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f2:	21f0      	movs	r1, #240	; 0xf0
 80040f4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040f8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040fa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040fc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004102:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	e000e010 	.word	0xe000e010
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <HAL_SYSTICK_CLKSourceConfig>:
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8004110:	2804      	cmp	r0, #4
{
 8004112:	b510      	push	{r4, lr}
 8004114:	4c08      	ldr	r4, [pc, #32]	; (8004138 <HAL_SYSTICK_CLKSourceConfig+0x28>)
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8004116:	d00a      	beq.n	800412e <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8004118:	b120      	cbz	r0, 8004124 <HAL_SYSTICK_CLKSourceConfig+0x14>
 800411a:	f240 11d9 	movw	r1, #473	; 0x1d9
 800411e:	4807      	ldr	r0, [pc, #28]	; (800413c <HAL_SYSTICK_CLKSourceConfig+0x2c>)
 8004120:	f006 ff85 	bl	800b02e <assert_failed>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	f023 0304 	bic.w	r3, r3, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800412a:	6023      	str	r3, [r4, #0]
  }
}
 800412c:	bd10      	pop	{r4, pc}
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	f043 0304 	orr.w	r3, r3, #4
 8004134:	e7f9      	b.n	800412a <HAL_SYSTICK_CLKSourceConfig+0x1a>
 8004136:	bf00      	nop
 8004138:	e000e010 	.word	0xe000e010
 800413c:	0800c7f0 	.word	0x0800c7f0

08004140 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004140:	4770      	bx	lr

08004142 <HAL_SYSTICK_IRQHandler>:
{
 8004142:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004144:	f7ff fffc 	bl	8004140 <HAL_SYSTICK_Callback>
}
 8004148:	bd08      	pop	{r3, pc}
	...

0800414c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800414c:	6803      	ldr	r3, [r0, #0]
 800414e:	b2da      	uxtb	r2, r3
 8004150:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004154:	f023 0303 	bic.w	r3, r3, #3
 8004158:	2118      	movs	r1, #24
 800415a:	3a10      	subs	r2, #16
 800415c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004160:	4904      	ldr	r1, [pc, #16]	; (8004174 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8004162:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004164:	bf88      	it	hi
 8004166:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004168:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800416a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800416c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800416e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	0800c863 	.word	0x0800c863

08004178 <HAL_DMA_Init>:
{
 8004178:	b570      	push	{r4, r5, r6, lr}
 800417a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800417c:	f7ff ff20 	bl	8003fc0 <HAL_GetTick>
 8004180:	4605      	mov	r5, r0
  if(hdma == NULL)
 8004182:	2c00      	cmp	r4, #0
 8004184:	f000 8117 	beq.w	80043b6 <HAL_DMA_Init+0x23e>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	4a8c      	ldr	r2, [pc, #560]	; (80043bc <HAL_DMA_Init+0x244>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d031      	beq.n	80041f4 <HAL_DMA_Init+0x7c>
 8004190:	3218      	adds	r2, #24
 8004192:	4293      	cmp	r3, r2
 8004194:	d02e      	beq.n	80041f4 <HAL_DMA_Init+0x7c>
 8004196:	3218      	adds	r2, #24
 8004198:	4293      	cmp	r3, r2
 800419a:	d02b      	beq.n	80041f4 <HAL_DMA_Init+0x7c>
 800419c:	3218      	adds	r2, #24
 800419e:	4293      	cmp	r3, r2
 80041a0:	d028      	beq.n	80041f4 <HAL_DMA_Init+0x7c>
 80041a2:	3218      	adds	r2, #24
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d025      	beq.n	80041f4 <HAL_DMA_Init+0x7c>
 80041a8:	3218      	adds	r2, #24
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d022      	beq.n	80041f4 <HAL_DMA_Init+0x7c>
 80041ae:	3218      	adds	r2, #24
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d01f      	beq.n	80041f4 <HAL_DMA_Init+0x7c>
 80041b4:	3218      	adds	r2, #24
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d01c      	beq.n	80041f4 <HAL_DMA_Init+0x7c>
 80041ba:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80041be:	4293      	cmp	r3, r2
 80041c0:	d018      	beq.n	80041f4 <HAL_DMA_Init+0x7c>
 80041c2:	3218      	adds	r2, #24
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d015      	beq.n	80041f4 <HAL_DMA_Init+0x7c>
 80041c8:	3218      	adds	r2, #24
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d012      	beq.n	80041f4 <HAL_DMA_Init+0x7c>
 80041ce:	3218      	adds	r2, #24
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00f      	beq.n	80041f4 <HAL_DMA_Init+0x7c>
 80041d4:	3218      	adds	r2, #24
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00c      	beq.n	80041f4 <HAL_DMA_Init+0x7c>
 80041da:	3218      	adds	r2, #24
 80041dc:	4293      	cmp	r3, r2
 80041de:	d009      	beq.n	80041f4 <HAL_DMA_Init+0x7c>
 80041e0:	3218      	adds	r2, #24
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d006      	beq.n	80041f4 <HAL_DMA_Init+0x7c>
 80041e6:	3218      	adds	r2, #24
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <HAL_DMA_Init+0x7c>
 80041ec:	21c8      	movs	r1, #200	; 0xc8
 80041ee:	4874      	ldr	r0, [pc, #464]	; (80043c0 <HAL_DMA_Init+0x248>)
 80041f0:	f006 ff1d 	bl	800b02e <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80041f4:	6863      	ldr	r3, [r4, #4]
 80041f6:	f033 63c0 	bics.w	r3, r3, #100663296	; 0x6000000
 80041fa:	d006      	beq.n	800420a <HAL_DMA_Init+0x92>
 80041fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004200:	d003      	beq.n	800420a <HAL_DMA_Init+0x92>
 8004202:	21c9      	movs	r1, #201	; 0xc9
 8004204:	486e      	ldr	r0, [pc, #440]	; (80043c0 <HAL_DMA_Init+0x248>)
 8004206:	f006 ff12 	bl	800b02e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800420a:	68a3      	ldr	r3, [r4, #8]
 800420c:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8004210:	d005      	beq.n	800421e <HAL_DMA_Init+0xa6>
 8004212:	2b80      	cmp	r3, #128	; 0x80
 8004214:	d003      	beq.n	800421e <HAL_DMA_Init+0xa6>
 8004216:	21ca      	movs	r1, #202	; 0xca
 8004218:	4869      	ldr	r0, [pc, #420]	; (80043c0 <HAL_DMA_Init+0x248>)
 800421a:	f006 ff08 	bl	800b02e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800421e:	68e3      	ldr	r3, [r4, #12]
 8004220:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8004224:	d003      	beq.n	800422e <HAL_DMA_Init+0xb6>
 8004226:	21cb      	movs	r1, #203	; 0xcb
 8004228:	4865      	ldr	r0, [pc, #404]	; (80043c0 <HAL_DMA_Init+0x248>)
 800422a:	f006 ff00 	bl	800b02e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800422e:	6923      	ldr	r3, [r4, #16]
 8004230:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8004234:	d003      	beq.n	800423e <HAL_DMA_Init+0xc6>
 8004236:	21cc      	movs	r1, #204	; 0xcc
 8004238:	4861      	ldr	r0, [pc, #388]	; (80043c0 <HAL_DMA_Init+0x248>)
 800423a:	f006 fef8 	bl	800b02e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800423e:	6963      	ldr	r3, [r4, #20]
 8004240:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8004244:	d006      	beq.n	8004254 <HAL_DMA_Init+0xdc>
 8004246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424a:	d003      	beq.n	8004254 <HAL_DMA_Init+0xdc>
 800424c:	21cd      	movs	r1, #205	; 0xcd
 800424e:	485c      	ldr	r0, [pc, #368]	; (80043c0 <HAL_DMA_Init+0x248>)
 8004250:	f006 feed 	bl	800b02e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8004254:	69a3      	ldr	r3, [r4, #24]
 8004256:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800425a:	d006      	beq.n	800426a <HAL_DMA_Init+0xf2>
 800425c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004260:	d003      	beq.n	800426a <HAL_DMA_Init+0xf2>
 8004262:	21ce      	movs	r1, #206	; 0xce
 8004264:	4856      	ldr	r0, [pc, #344]	; (80043c0 <HAL_DMA_Init+0x248>)
 8004266:	f006 fee2 	bl	800b02e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800426a:	69e3      	ldr	r3, [r4, #28]
 800426c:	f033 0220 	bics.w	r2, r3, #32
 8004270:	d006      	beq.n	8004280 <HAL_DMA_Init+0x108>
 8004272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004276:	d003      	beq.n	8004280 <HAL_DMA_Init+0x108>
 8004278:	21cf      	movs	r1, #207	; 0xcf
 800427a:	4851      	ldr	r0, [pc, #324]	; (80043c0 <HAL_DMA_Init+0x248>)
 800427c:	f006 fed7 	bl	800b02e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8004280:	6a23      	ldr	r3, [r4, #32]
 8004282:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8004286:	d003      	beq.n	8004290 <HAL_DMA_Init+0x118>
 8004288:	21d0      	movs	r1, #208	; 0xd0
 800428a:	484d      	ldr	r0, [pc, #308]	; (80043c0 <HAL_DMA_Init+0x248>)
 800428c:	f006 fecf 	bl	800b02e <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8004290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004292:	f033 0304 	bics.w	r3, r3, #4
 8004296:	d003      	beq.n	80042a0 <HAL_DMA_Init+0x128>
 8004298:	21d1      	movs	r1, #209	; 0xd1
 800429a:	4849      	ldr	r0, [pc, #292]	; (80043c0 <HAL_DMA_Init+0x248>)
 800429c:	f006 fec7 	bl	800b02e <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80042a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042a2:	b1b3      	cbz	r3, 80042d2 <HAL_DMA_Init+0x15a>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80042a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d903      	bls.n	80042b2 <HAL_DMA_Init+0x13a>
 80042aa:	21d6      	movs	r1, #214	; 0xd6
 80042ac:	4844      	ldr	r0, [pc, #272]	; (80043c0 <HAL_DMA_Init+0x248>)
 80042ae:	f006 febe 	bl	800b02e <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80042b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80042b4:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 80042b8:	d003      	beq.n	80042c2 <HAL_DMA_Init+0x14a>
 80042ba:	21d7      	movs	r1, #215	; 0xd7
 80042bc:	4840      	ldr	r0, [pc, #256]	; (80043c0 <HAL_DMA_Init+0x248>)
 80042be:	f006 feb6 	bl	800b02e <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80042c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80042c4:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 80042c8:	d003      	beq.n	80042d2 <HAL_DMA_Init+0x15a>
 80042ca:	21d8      	movs	r1, #216	; 0xd8
 80042cc:	483c      	ldr	r0, [pc, #240]	; (80043c0 <HAL_DMA_Init+0x248>)
 80042ce:	f006 feae 	bl	800b02e <assert_failed>
  __HAL_UNLOCK(hdma);
 80042d2:	2300      	movs	r3, #0
 80042d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80042d8:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80042da:	2302      	movs	r3, #2
 80042dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80042e0:	6813      	ldr	r3, [r2, #0]
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042e8:	6821      	ldr	r1, [r4, #0]
 80042ea:	680b      	ldr	r3, [r1, #0]
 80042ec:	07d8      	lsls	r0, r3, #31
 80042ee:	d43c      	bmi.n	800436a <HAL_DMA_Init+0x1f2>
  tmp = hdma->Instance->CR;
 80042f0:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042f2:	4d34      	ldr	r5, [pc, #208]	; (80043c4 <HAL_DMA_Init+0x24c>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042f4:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042f6:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042f8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	68e2      	ldr	r2, [r4, #12]
 8004300:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004302:	6922      	ldr	r2, [r4, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	6962      	ldr	r2, [r4, #20]
 8004308:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800430a:	69e2      	ldr	r2, [r4, #28]
 800430c:	4303      	orrs	r3, r0
 800430e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8004310:	6a22      	ldr	r2, [r4, #32]
 8004312:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004314:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004316:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004318:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800431c:	bf02      	ittt	eq
 800431e:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8004322:	4335      	orreq	r5, r6
 8004324:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8004326:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8004328:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800432a:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800432c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8004330:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004334:	d10b      	bne.n	800434e <HAL_DMA_Init+0x1d6>
    tmp |= hdma->Init.FIFOThreshold;
 8004336:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004338:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800433a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800433c:	b13d      	cbz	r5, 800434e <HAL_DMA_Init+0x1d6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800433e:	b9f8      	cbnz	r0, 8004380 <HAL_DMA_Init+0x208>
  {
    switch (tmp)
 8004340:	2a01      	cmp	r2, #1
 8004342:	d02d      	beq.n	80043a0 <HAL_DMA_Init+0x228>
 8004344:	d301      	bcc.n	800434a <HAL_DMA_Init+0x1d2>
 8004346:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004348:	d101      	bne.n	800434e <HAL_DMA_Init+0x1d6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800434a:	01ea      	lsls	r2, r5, #7
 800434c:	d42b      	bmi.n	80043a6 <HAL_DMA_Init+0x22e>
  hdma->Instance->FCR = tmp;
 800434e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004350:	4620      	mov	r0, r4
 8004352:	f7ff fefb 	bl	800414c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004356:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004358:	233f      	movs	r3, #63	; 0x3f
 800435a:	4093      	lsls	r3, r2
 800435c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800435e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004360:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004362:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004364:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8004368:	e009      	b.n	800437e <HAL_DMA_Init+0x206>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800436a:	f7ff fe29 	bl	8003fc0 <HAL_GetTick>
 800436e:	1b40      	subs	r0, r0, r5
 8004370:	2805      	cmp	r0, #5
 8004372:	d9b9      	bls.n	80042e8 <HAL_DMA_Init+0x170>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004374:	2320      	movs	r3, #32
 8004376:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004378:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800437a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800437e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004380:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004384:	d113      	bne.n	80043ae <HAL_DMA_Init+0x236>
    switch (tmp)
 8004386:	2a03      	cmp	r2, #3
 8004388:	d8e1      	bhi.n	800434e <HAL_DMA_Init+0x1d6>
 800438a:	a001      	add	r0, pc, #4	; (adr r0, 8004390 <HAL_DMA_Init+0x218>)
 800438c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8004390:	080043a7 	.word	0x080043a7
 8004394:	0800434b 	.word	0x0800434b
 8004398:	080043a7 	.word	0x080043a7
 800439c:	080043a1 	.word	0x080043a1
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043a0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80043a4:	d1d3      	bne.n	800434e <HAL_DMA_Init+0x1d6>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043a6:	2340      	movs	r3, #64	; 0x40
 80043a8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80043aa:	2001      	movs	r0, #1
 80043ac:	e7e5      	b.n	800437a <HAL_DMA_Init+0x202>
    switch (tmp)
 80043ae:	2a02      	cmp	r2, #2
 80043b0:	d9f9      	bls.n	80043a6 <HAL_DMA_Init+0x22e>
 80043b2:	2a03      	cmp	r2, #3
 80043b4:	e7c8      	b.n	8004348 <HAL_DMA_Init+0x1d0>
    return HAL_ERROR;
 80043b6:	2001      	movs	r0, #1
 80043b8:	e7e1      	b.n	800437e <HAL_DMA_Init+0x206>
 80043ba:	bf00      	nop
 80043bc:	40026010 	.word	0x40026010
 80043c0:	0800c82b 	.word	0x0800c82b
 80043c4:	f010803f 	.word	0xf010803f

080043c8 <HAL_DMA_DeInit>:
{
 80043c8:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80043ca:	4605      	mov	r5, r0
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d056      	beq.n	800447e <HAL_DMA_DeInit+0xb6>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80043d0:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 80043d4:	b2c0      	uxtb	r0, r0
 80043d6:	2802      	cmp	r0, #2
 80043d8:	d050      	beq.n	800447c <HAL_DMA_DeInit+0xb4>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80043da:	682b      	ldr	r3, [r5, #0]
 80043dc:	4a29      	ldr	r2, [pc, #164]	; (8004484 <HAL_DMA_DeInit+0xbc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d032      	beq.n	8004448 <HAL_DMA_DeInit+0x80>
 80043e2:	3218      	adds	r2, #24
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d02f      	beq.n	8004448 <HAL_DMA_DeInit+0x80>
 80043e8:	3218      	adds	r2, #24
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d02c      	beq.n	8004448 <HAL_DMA_DeInit+0x80>
 80043ee:	3218      	adds	r2, #24
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d029      	beq.n	8004448 <HAL_DMA_DeInit+0x80>
 80043f4:	3218      	adds	r2, #24
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d026      	beq.n	8004448 <HAL_DMA_DeInit+0x80>
 80043fa:	3218      	adds	r2, #24
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d023      	beq.n	8004448 <HAL_DMA_DeInit+0x80>
 8004400:	3218      	adds	r2, #24
 8004402:	4293      	cmp	r3, r2
 8004404:	d020      	beq.n	8004448 <HAL_DMA_DeInit+0x80>
 8004406:	3218      	adds	r2, #24
 8004408:	4293      	cmp	r3, r2
 800440a:	d01d      	beq.n	8004448 <HAL_DMA_DeInit+0x80>
 800440c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004410:	4293      	cmp	r3, r2
 8004412:	d019      	beq.n	8004448 <HAL_DMA_DeInit+0x80>
 8004414:	3218      	adds	r2, #24
 8004416:	4293      	cmp	r3, r2
 8004418:	d016      	beq.n	8004448 <HAL_DMA_DeInit+0x80>
 800441a:	3218      	adds	r2, #24
 800441c:	4293      	cmp	r3, r2
 800441e:	d013      	beq.n	8004448 <HAL_DMA_DeInit+0x80>
 8004420:	3218      	adds	r2, #24
 8004422:	4293      	cmp	r3, r2
 8004424:	d010      	beq.n	8004448 <HAL_DMA_DeInit+0x80>
 8004426:	3218      	adds	r2, #24
 8004428:	4293      	cmp	r3, r2
 800442a:	d00d      	beq.n	8004448 <HAL_DMA_DeInit+0x80>
 800442c:	3218      	adds	r2, #24
 800442e:	4293      	cmp	r3, r2
 8004430:	d00a      	beq.n	8004448 <HAL_DMA_DeInit+0x80>
 8004432:	3218      	adds	r2, #24
 8004434:	4293      	cmp	r3, r2
 8004436:	d007      	beq.n	8004448 <HAL_DMA_DeInit+0x80>
 8004438:	3218      	adds	r2, #24
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <HAL_DMA_DeInit+0x80>
 800443e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004442:	4811      	ldr	r0, [pc, #68]	; (8004488 <HAL_DMA_DeInit+0xc0>)
 8004444:	f006 fdf3 	bl	800b02e <assert_failed>
  __HAL_DMA_DISABLE(hdma);
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	f022 0201 	bic.w	r2, r2, #1
 8004450:	601a      	str	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 8004452:	2400      	movs	r4, #0
  hdma->Instance->FCR  = 0x00000021U;
 8004454:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8004456:	601c      	str	r4, [r3, #0]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004458:	4628      	mov	r0, r5
  hdma->Instance->NDTR = 0U;
 800445a:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800445c:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 800445e:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8004460:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8004462:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004464:	f7ff fe72 	bl	800414c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004468:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800446a:	233f      	movs	r3, #63	; 0x3f
 800446c:	4093      	lsls	r3, r2
 800446e:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004470:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8004472:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8004476:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  return HAL_OK;
 800447a:	4620      	mov	r0, r4
}
 800447c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800447e:	2001      	movs	r0, #1
 8004480:	e7fc      	b.n	800447c <HAL_DMA_DeInit+0xb4>
 8004482:	bf00      	nop
 8004484:	40026010 	.word	0x40026010
 8004488:	0800c82b 	.word	0x0800c82b

0800448c <HAL_DMA_Start_IT>:
{
 800448c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004490:	4617      	mov	r7, r2
 8004492:	4698      	mov	r8, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8004494:	1e5a      	subs	r2, r3, #1
 8004496:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800449a:	429a      	cmp	r2, r3
{
 800449c:	4604      	mov	r4, r0
 800449e:	460d      	mov	r5, r1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044a0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80044a2:	d904      	bls.n	80044ae <HAL_DMA_Start_IT+0x22>
 80044a4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80044a8:	4821      	ldr	r0, [pc, #132]	; (8004530 <HAL_DMA_Start_IT+0xa4>)
 80044aa:	f006 fdc0 	bl	800b02e <assert_failed>
  __HAL_LOCK(hdma);
 80044ae:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d039      	beq.n	800452a <HAL_DMA_Start_IT+0x9e>
 80044b6:	2301      	movs	r3, #1
 80044b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80044bc:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	f04f 0002 	mov.w	r0, #2
 80044c6:	f04f 0100 	mov.w	r1, #0
 80044ca:	d12b      	bne.n	8004524 <HAL_DMA_Start_IT+0x98>
    hdma->State = HAL_DMA_STATE_BUSY;
 80044cc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044d0:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044d2:	6821      	ldr	r1, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044d4:	68a3      	ldr	r3, [r4, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044d6:	6808      	ldr	r0, [r1, #0]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044da:	2b40      	cmp	r3, #64	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044dc:	f04f 033f 	mov.w	r3, #63	; 0x3f
 80044e0:	fa03 f302 	lsl.w	r3, r3, r2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044e4:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80044e8:	6008      	str	r0, [r1, #0]
  hdma->Instance->NDTR = DataLength;
 80044ea:	f8c1 8004 	str.w	r8, [r1, #4]
    hdma->Instance->PAR = DstAddress;
 80044ee:	bf0b      	itete	eq
 80044f0:	608f      	streq	r7, [r1, #8]
    hdma->Instance->PAR = SrcAddress;
 80044f2:	608d      	strne	r5, [r1, #8]
    hdma->Instance->M0AR = SrcAddress;
 80044f4:	60cd      	streq	r5, [r1, #12]
    hdma->Instance->M0AR = DstAddress;
 80044f6:	60cf      	strne	r7, [r1, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044f8:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044fa:	680b      	ldr	r3, [r1, #0]
 80044fc:	f043 0316 	orr.w	r3, r3, #22
 8004500:	600b      	str	r3, [r1, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004502:	694b      	ldr	r3, [r1, #20]
 8004504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004508:	614b      	str	r3, [r1, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800450a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800450c:	b11b      	cbz	r3, 8004516 <HAL_DMA_Start_IT+0x8a>
      hdma->Instance->CR  |= DMA_IT_HT;
 800450e:	680b      	ldr	r3, [r1, #0]
 8004510:	f043 0308 	orr.w	r3, r3, #8
 8004514:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma);
 8004516:	680b      	ldr	r3, [r1, #0]
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800451e:	2000      	movs	r0, #0
}
 8004520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_UNLOCK(hdma);	  
 8004524:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8004528:	e7fa      	b.n	8004520 <HAL_DMA_Start_IT+0x94>
  __HAL_LOCK(hdma);
 800452a:	2002      	movs	r0, #2
 800452c:	e7f8      	b.n	8004520 <HAL_DMA_Start_IT+0x94>
 800452e:	bf00      	nop
 8004530:	0800c82b 	.word	0x0800c82b

08004534 <HAL_DMA_Abort>:
{
 8004534:	b570      	push	{r4, r5, r6, lr}
 8004536:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004538:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800453a:	f7ff fd41 	bl	8003fc0 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800453e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004542:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8004544:	4606      	mov	r6, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004546:	d006      	beq.n	8004556 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800454c:	2300      	movs	r3, #0
 800454e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8004552:	2001      	movs	r0, #1
}
 8004554:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	f022 0216 	bic.w	r2, r2, #22
 800455e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004560:	695a      	ldr	r2, [r3, #20]
 8004562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004566:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004568:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800456a:	b90a      	cbnz	r2, 8004570 <HAL_DMA_Abort+0x3c>
 800456c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800456e:	b11a      	cbz	r2, 8004578 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	f022 0208 	bic.w	r2, r2, #8
 8004576:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	f010 0001 	ands.w	r0, r0, #1
 8004588:	d109      	bne.n	800459e <HAL_DMA_Abort+0x6a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800458a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800458c:	233f      	movs	r3, #63	; 0x3f
 800458e:	4093      	lsls	r3, r2
 8004590:	60ab      	str	r3, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8004592:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8004594:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8004598:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800459c:	e7da      	b.n	8004554 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800459e:	f7ff fd0f 	bl	8003fc0 <HAL_GetTick>
 80045a2:	1b80      	subs	r0, r0, r6
 80045a4:	2805      	cmp	r0, #5
 80045a6:	d9eb      	bls.n	8004580 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045a8:	2320      	movs	r3, #32
 80045aa:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045ac:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 80045ae:	2300      	movs	r3, #0
 80045b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045b4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 80045b8:	e7cc      	b.n	8004554 <HAL_DMA_Abort+0x20>
	...

080045bc <HAL_DMA_IRQHandler>:
{
 80045bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045c2:	4b5c      	ldr	r3, [pc, #368]	; (8004734 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045c4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80045c6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045c8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80045ca:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045cc:	2208      	movs	r2, #8
 80045ce:	409a      	lsls	r2, r3
 80045d0:	4232      	tst	r2, r6
{
 80045d2:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045d4:	d00c      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045d6:	6801      	ldr	r1, [r0, #0]
 80045d8:	6808      	ldr	r0, [r1, #0]
 80045da:	0740      	lsls	r0, r0, #29
 80045dc:	d508      	bpl.n	80045f0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80045de:	6808      	ldr	r0, [r1, #0]
 80045e0:	f020 0004 	bic.w	r0, r0, #4
 80045e4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045e6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045f0:	2201      	movs	r2, #1
 80045f2:	409a      	lsls	r2, r3
 80045f4:	4232      	tst	r2, r6
 80045f6:	d008      	beq.n	800460a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045f8:	6821      	ldr	r1, [r4, #0]
 80045fa:	6949      	ldr	r1, [r1, #20]
 80045fc:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045fe:	bf41      	itttt	mi
 8004600:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004602:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8004604:	f042 0202 	orrmi.w	r2, r2, #2
 8004608:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800460a:	2204      	movs	r2, #4
 800460c:	409a      	lsls	r2, r3
 800460e:	4232      	tst	r2, r6
 8004610:	d008      	beq.n	8004624 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004612:	6821      	ldr	r1, [r4, #0]
 8004614:	6809      	ldr	r1, [r1, #0]
 8004616:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004618:	bf41      	itttt	mi
 800461a:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800461c:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800461e:	f042 0204 	orrmi.w	r2, r2, #4
 8004622:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004624:	2210      	movs	r2, #16
 8004626:	409a      	lsls	r2, r3
 8004628:	4232      	tst	r2, r6
 800462a:	d010      	beq.n	800464e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	6819      	ldr	r1, [r3, #0]
 8004630:	0709      	lsls	r1, r1, #28
 8004632:	d50c      	bpl.n	800464e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004634:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	0350      	lsls	r0, r2, #13
 800463a:	d537      	bpl.n	80046ac <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	0319      	lsls	r1, r3, #12
 8004640:	d401      	bmi.n	8004646 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8004642:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004644:	e000      	b.n	8004648 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004646:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8004648:	b10b      	cbz	r3, 800464e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800464a:	4620      	mov	r0, r4
 800464c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800464e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004650:	2220      	movs	r2, #32
 8004652:	408a      	lsls	r2, r1
 8004654:	4232      	tst	r2, r6
 8004656:	d03a      	beq.n	80046ce <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	6818      	ldr	r0, [r3, #0]
 800465c:	06c6      	lsls	r6, r0, #27
 800465e:	d536      	bpl.n	80046ce <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004660:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004662:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8004666:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004668:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800466a:	d127      	bne.n	80046bc <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800466c:	f022 0216 	bic.w	r2, r2, #22
 8004670:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004672:	695a      	ldr	r2, [r3, #20]
 8004674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004678:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800467a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800467c:	b90a      	cbnz	r2, 8004682 <HAL_DMA_IRQHandler+0xc6>
 800467e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004680:	b11a      	cbz	r2, 800468a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	f022 0208 	bic.w	r2, r2, #8
 8004688:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800468a:	233f      	movs	r3, #63	; 0x3f
 800468c:	408b      	lsls	r3, r1
 800468e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8004690:	2300      	movs	r3, #0
 8004692:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8004696:	2301      	movs	r3, #1
 8004698:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800469c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d045      	beq.n	800472e <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 80046a2:	4620      	mov	r0, r4
}
 80046a4:	b003      	add	sp, #12
 80046a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80046aa:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046b0:	bf5e      	ittt	pl
 80046b2:	681a      	ldrpl	r2, [r3, #0]
 80046b4:	f022 0208 	bicpl.w	r2, r2, #8
 80046b8:	601a      	strpl	r2, [r3, #0]
 80046ba:	e7c2      	b.n	8004642 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046bc:	0350      	lsls	r0, r2, #13
 80046be:	d527      	bpl.n	8004710 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	0319      	lsls	r1, r3, #12
 80046c4:	d431      	bmi.n	800472a <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80046c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80046c8:	b10b      	cbz	r3, 80046ce <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80046ca:	4620      	mov	r0, r4
 80046cc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046d0:	b36b      	cbz	r3, 800472e <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046d4:	07da      	lsls	r2, r3, #31
 80046d6:	d519      	bpl.n	800470c <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 80046d8:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80046da:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80046dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80046e0:	6813      	ldr	r3, [r2, #0]
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046e8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80046ec:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80046f0:	9b01      	ldr	r3, [sp, #4]
 80046f2:	3301      	adds	r3, #1
 80046f4:	42bb      	cmp	r3, r7
 80046f6:	9301      	str	r3, [sp, #4]
 80046f8:	d802      	bhi.n	8004700 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80046fa:	6813      	ldr	r3, [r2, #0]
 80046fc:	07db      	lsls	r3, r3, #31
 80046fe:	d4f7      	bmi.n	80046f0 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8004700:	2300      	movs	r3, #0
 8004702:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004706:	2301      	movs	r3, #1
 8004708:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800470c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800470e:	e7c6      	b.n	800469e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8004716:	d108      	bne.n	800472a <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004718:	6819      	ldr	r1, [r3, #0]
 800471a:	f021 0110 	bic.w	r1, r1, #16
 800471e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004720:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8004722:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8004726:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800472a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800472c:	e7cc      	b.n	80046c8 <HAL_DMA_IRQHandler+0x10c>
}
 800472e:	b003      	add	sp, #12
 8004730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004732:	bf00      	nop
 8004734:	20000084 	.word	0x20000084

08004738 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004738:	4b9c      	ldr	r3, [pc, #624]	; (80049ac <HAL_GPIO_Init+0x274>)
 800473a:	4298      	cmp	r0, r3
{
 800473c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004740:	4604      	mov	r4, r0
 8004742:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004744:	d023      	beq.n	800478e <HAL_GPIO_Init+0x56>
 8004746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800474a:	4298      	cmp	r0, r3
 800474c:	d01f      	beq.n	800478e <HAL_GPIO_Init+0x56>
 800474e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004752:	4298      	cmp	r0, r3
 8004754:	d01b      	beq.n	800478e <HAL_GPIO_Init+0x56>
 8004756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800475a:	4298      	cmp	r0, r3
 800475c:	d017      	beq.n	800478e <HAL_GPIO_Init+0x56>
 800475e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004762:	4298      	cmp	r0, r3
 8004764:	d013      	beq.n	800478e <HAL_GPIO_Init+0x56>
 8004766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800476a:	4298      	cmp	r0, r3
 800476c:	d00f      	beq.n	800478e <HAL_GPIO_Init+0x56>
 800476e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004772:	4298      	cmp	r0, r3
 8004774:	d00b      	beq.n	800478e <HAL_GPIO_Init+0x56>
 8004776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800477a:	4298      	cmp	r0, r3
 800477c:	d007      	beq.n	800478e <HAL_GPIO_Init+0x56>
 800477e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004782:	4298      	cmp	r0, r3
 8004784:	d003      	beq.n	800478e <HAL_GPIO_Init+0x56>
 8004786:	21c3      	movs	r1, #195	; 0xc3
 8004788:	4889      	ldr	r0, [pc, #548]	; (80049b0 <HAL_GPIO_Init+0x278>)
 800478a:	f006 fc50 	bl	800b02e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800478e:	682b      	ldr	r3, [r5, #0]
 8004790:	b29a      	uxth	r2, r3
 8004792:	b112      	cbz	r2, 800479a <HAL_GPIO_Init+0x62>
 8004794:	0c1b      	lsrs	r3, r3, #16
 8004796:	041b      	lsls	r3, r3, #16
 8004798:	b11b      	cbz	r3, 80047a2 <HAL_GPIO_Init+0x6a>
 800479a:	21c4      	movs	r1, #196	; 0xc4
 800479c:	4884      	ldr	r0, [pc, #528]	; (80049b0 <HAL_GPIO_Init+0x278>)
 800479e:	f006 fc46 	bl	800b02e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80047a2:	686b      	ldr	r3, [r5, #4]
 80047a4:	2b03      	cmp	r3, #3
 80047a6:	d917      	bls.n	80047d8 <HAL_GPIO_Init+0xa0>
 80047a8:	f1a3 0211 	sub.w	r2, r3, #17
 80047ac:	2a01      	cmp	r2, #1
 80047ae:	d913      	bls.n	80047d8 <HAL_GPIO_Init+0xa0>
 80047b0:	4980      	ldr	r1, [pc, #512]	; (80049b4 <HAL_GPIO_Init+0x27c>)
 80047b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80047b6:	428a      	cmp	r2, r1
 80047b8:	d00e      	beq.n	80047d8 <HAL_GPIO_Init+0xa0>
 80047ba:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80047be:	428b      	cmp	r3, r1
 80047c0:	d00a      	beq.n	80047d8 <HAL_GPIO_Init+0xa0>
 80047c2:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 80047c6:	428a      	cmp	r2, r1
 80047c8:	d006      	beq.n	80047d8 <HAL_GPIO_Init+0xa0>
 80047ca:	4a7b      	ldr	r2, [pc, #492]	; (80049b8 <HAL_GPIO_Init+0x280>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d003      	beq.n	80047d8 <HAL_GPIO_Init+0xa0>
 80047d0:	21c5      	movs	r1, #197	; 0xc5
 80047d2:	4877      	ldr	r0, [pc, #476]	; (80049b0 <HAL_GPIO_Init+0x278>)
 80047d4:	f006 fc2b 	bl	800b02e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80047d8:	68ab      	ldr	r3, [r5, #8]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d903      	bls.n	80047e6 <HAL_GPIO_Init+0xae>
 80047de:	21c6      	movs	r1, #198	; 0xc6
 80047e0:	4873      	ldr	r0, [pc, #460]	; (80049b0 <HAL_GPIO_Init+0x278>)
 80047e2:	f006 fc24 	bl	800b02e <assert_failed>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047e6:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 80049c0 <HAL_GPIO_Init+0x288>
{
 80047ea:	2600      	movs	r6, #0
    ioposition = 0x01U << position;
 80047ec:	2301      	movs	r3, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047ee:	682a      	ldr	r2, [r5, #0]
    ioposition = 0x01U << position;
 80047f0:	fa03 f706 	lsl.w	r7, r3, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047f4:	ea07 0902 	and.w	r9, r7, r2
    if(iocurrent == ioposition)
 80047f8:	454f      	cmp	r7, r9
 80047fa:	f040 80c4 	bne.w	8004986 <HAL_GPIO_Init+0x24e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047fe:	686a      	ldr	r2, [r5, #4]
 8004800:	f022 0210 	bic.w	r2, r2, #16
 8004804:	2a02      	cmp	r2, #2
 8004806:	d118      	bne.n	800483a <HAL_GPIO_Init+0x102>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004808:	692a      	ldr	r2, [r5, #16]
 800480a:	2a0d      	cmp	r2, #13
 800480c:	d905      	bls.n	800481a <HAL_GPIO_Init+0xe2>
 800480e:	2a0f      	cmp	r2, #15
 8004810:	d003      	beq.n	800481a <HAL_GPIO_Init+0xe2>
 8004812:	21d7      	movs	r1, #215	; 0xd7
 8004814:	4866      	ldr	r0, [pc, #408]	; (80049b0 <HAL_GPIO_Init+0x278>)
 8004816:	f006 fc0a 	bl	800b02e <assert_failed>
        temp = GPIOx->AFR[position >> 3U];
 800481a:	08f1      	lsrs	r1, r6, #3
 800481c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004820:	f006 0207 	and.w	r2, r6, #7
 8004824:	0090      	lsls	r0, r2, #2
        temp = GPIOx->AFR[position >> 3U];
 8004826:	6a0b      	ldr	r3, [r1, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004828:	220f      	movs	r2, #15
 800482a:	4082      	lsls	r2, r0
 800482c:	ea23 0c02 	bic.w	ip, r3, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004830:	692a      	ldr	r2, [r5, #16]
 8004832:	4082      	lsls	r2, r0
 8004834:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->AFR[position >> 3U] = temp;
 8004838:	620a      	str	r2, [r1, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800483a:	686a      	ldr	r2, [r5, #4]
      temp = GPIOx->MODER;
 800483c:	6820      	ldr	r0, [r4, #0]
 800483e:	ea4f 0b46 	mov.w	fp, r6, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004842:	f04f 0a03 	mov.w	sl, #3
 8004846:	fa0a fa0b 	lsl.w	sl, sl, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800484a:	f002 0103 	and.w	r1, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800484e:	ea6f 0a0a 	mvn.w	sl, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004852:	f022 0210 	bic.w	r2, r2, #16
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004856:	ea0a 0000 	and.w	r0, sl, r0
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800485a:	fa01 f10b 	lsl.w	r1, r1, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800485e:	3a01      	subs	r2, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004860:	4301      	orrs	r1, r0
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004862:	2a01      	cmp	r2, #1
      GPIOx->MODER = temp;
 8004864:	6021      	str	r1, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004866:	d817      	bhi.n	8004898 <HAL_GPIO_Init+0x160>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004868:	68ea      	ldr	r2, [r5, #12]
 800486a:	2a03      	cmp	r2, #3
 800486c:	d903      	bls.n	8004876 <HAL_GPIO_Init+0x13e>
 800486e:	21ea      	movs	r1, #234	; 0xea
 8004870:	484f      	ldr	r0, [pc, #316]	; (80049b0 <HAL_GPIO_Init+0x278>)
 8004872:	f006 fbdc 	bl	800b02e <assert_failed>
        temp = GPIOx->OSPEEDR; 
 8004876:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004878:	68ea      	ldr	r2, [r5, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800487a:	686b      	ldr	r3, [r5, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800487c:	ea0a 0101 	and.w	r1, sl, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004880:	fa02 f20b 	lsl.w	r2, r2, fp
 8004884:	430a      	orrs	r2, r1
        GPIOx->OSPEEDR = temp;
 8004886:	60a2      	str	r2, [r4, #8]
        temp = GPIOx->OTYPER;
 8004888:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800488a:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800488e:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004892:	40b3      	lsls	r3, r6
 8004894:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8004896:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 8004898:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800489a:	6868      	ldr	r0, [r5, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800489c:	ea0a 0a03 	and.w	sl, sl, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048a0:	68ab      	ldr	r3, [r5, #8]
 80048a2:	fa03 f30b 	lsl.w	r3, r3, fp
 80048a6:	ea43 030a 	orr.w	r3, r3, sl
      GPIOx->PUPDR = temp;
 80048aa:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048ac:	00c3      	lsls	r3, r0, #3
 80048ae:	d56a      	bpl.n	8004986 <HAL_GPIO_Init+0x24e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048b0:	4a42      	ldr	r2, [pc, #264]	; (80049bc <HAL_GPIO_Init+0x284>)
 80048b2:	2300      	movs	r3, #0
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80048b8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80048bc:	6451      	str	r1, [r2, #68]	; 0x44
 80048be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80048c0:	f026 0103 	bic.w	r1, r6, #3
 80048c4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80048c8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80048cc:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 80048d0:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048d2:	f006 0c03 	and.w	ip, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048d6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80048d8:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048dc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80048e0:	220f      	movs	r2, #15
 80048e2:	fa02 f20c 	lsl.w	r2, r2, ip
 80048e6:	ea2e 0e02 	bic.w	lr, lr, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048ea:	4a30      	ldr	r2, [pc, #192]	; (80049ac <HAL_GPIO_Init+0x274>)
 80048ec:	4294      	cmp	r4, r2
 80048ee:	d01f      	beq.n	8004930 <HAL_GPIO_Init+0x1f8>
 80048f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048f4:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 80048f8:	429c      	cmp	r4, r3
 80048fa:	d04b      	beq.n	8004994 <HAL_GPIO_Init+0x25c>
 80048fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004900:	429c      	cmp	r4, r3
 8004902:	d049      	beq.n	8004998 <HAL_GPIO_Init+0x260>
 8004904:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004908:	429c      	cmp	r4, r3
 800490a:	d047      	beq.n	800499c <HAL_GPIO_Init+0x264>
 800490c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004910:	429c      	cmp	r4, r3
 8004912:	d045      	beq.n	80049a0 <HAL_GPIO_Init+0x268>
 8004914:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004918:	429c      	cmp	r4, r3
 800491a:	d043      	beq.n	80049a4 <HAL_GPIO_Init+0x26c>
 800491c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004920:	429c      	cmp	r4, r3
 8004922:	d041      	beq.n	80049a8 <HAL_GPIO_Init+0x270>
 8004924:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004928:	429c      	cmp	r4, r3
 800492a:	bf14      	ite	ne
 800492c:	2308      	movne	r3, #8
 800492e:	2307      	moveq	r3, #7
 8004930:	fa03 f30c 	lsl.w	r3, r3, ip
 8004934:	ea43 030e 	orr.w	r3, r3, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004938:	608b      	str	r3, [r1, #8]
        temp = EXTI->IMR;
 800493a:	f8d8 2000 	ldr.w	r2, [r8]
        temp &= ~((uint32_t)iocurrent);
 800493e:	ea6f 0109 	mvn.w	r1, r9
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004942:	03c7      	lsls	r7, r0, #15
        temp &= ~((uint32_t)iocurrent);
 8004944:	bf54      	ite	pl
 8004946:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8004948:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR = temp;
 800494c:	f8c8 2000 	str.w	r2, [r8]

        temp = EXTI->EMR;
 8004950:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004954:	0383      	lsls	r3, r0, #14
        temp &= ~((uint32_t)iocurrent);
 8004956:	bf54      	ite	pl
 8004958:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 800495a:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->EMR = temp;
 800495e:	f8c8 2004 	str.w	r2, [r8, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004962:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004966:	02c7      	lsls	r7, r0, #11
        temp &= ~((uint32_t)iocurrent);
 8004968:	bf54      	ite	pl
 800496a:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 800496c:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR = temp;
 8004970:	f8c8 2008 	str.w	r2, [r8, #8]

        temp = EXTI->FTSR;
 8004974:	f8d8 300c 	ldr.w	r3, [r8, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004978:	0282      	lsls	r2, r0, #10
        temp &= ~((uint32_t)iocurrent);
 800497a:	bf54      	ite	pl
 800497c:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 800497e:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->FTSR = temp;
 8004982:	f8c8 300c 	str.w	r3, [r8, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004986:	3601      	adds	r6, #1
 8004988:	2e10      	cmp	r6, #16
 800498a:	f47f af2f 	bne.w	80047ec <HAL_GPIO_Init+0xb4>
      }
    }
  }
}
 800498e:	b003      	add	sp, #12
 8004990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004994:	2301      	movs	r3, #1
 8004996:	e7cb      	b.n	8004930 <HAL_GPIO_Init+0x1f8>
 8004998:	2302      	movs	r3, #2
 800499a:	e7c9      	b.n	8004930 <HAL_GPIO_Init+0x1f8>
 800499c:	2303      	movs	r3, #3
 800499e:	e7c7      	b.n	8004930 <HAL_GPIO_Init+0x1f8>
 80049a0:	2304      	movs	r3, #4
 80049a2:	e7c5      	b.n	8004930 <HAL_GPIO_Init+0x1f8>
 80049a4:	2305      	movs	r3, #5
 80049a6:	e7c3      	b.n	8004930 <HAL_GPIO_Init+0x1f8>
 80049a8:	2306      	movs	r3, #6
 80049aa:	e7c1      	b.n	8004930 <HAL_GPIO_Init+0x1f8>
 80049ac:	40020000 	.word	0x40020000
 80049b0:	0800c86b 	.word	0x0800c86b
 80049b4:	10110000 	.word	0x10110000
 80049b8:	10220000 	.word	0x10220000
 80049bc:	40023800 	.word	0x40023800
 80049c0:	40013c00 	.word	0x40013c00

080049c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c4:	b570      	push	{r4, r5, r6, lr}
 80049c6:	4605      	mov	r5, r0
 80049c8:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80049ca:	460c      	mov	r4, r1
 80049cc:	b921      	cbnz	r1, 80049d8 <HAL_GPIO_WritePin+0x14>
 80049ce:	f240 11af 	movw	r1, #431	; 0x1af
 80049d2:	4808      	ldr	r0, [pc, #32]	; (80049f4 <HAL_GPIO_WritePin+0x30>)
 80049d4:	f006 fb2b 	bl	800b02e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80049d8:	2e01      	cmp	r6, #1
 80049da:	d906      	bls.n	80049ea <HAL_GPIO_WritePin+0x26>
 80049dc:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80049e0:	4804      	ldr	r0, [pc, #16]	; (80049f4 <HAL_GPIO_WritePin+0x30>)
 80049e2:	f006 fb24 	bl	800b02e <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049e6:	61ac      	str	r4, [r5, #24]
  }
}
 80049e8:	bd70      	pop	{r4, r5, r6, pc}
  if(PinState != GPIO_PIN_RESET)
 80049ea:	2e00      	cmp	r6, #0
 80049ec:	d1fb      	bne.n	80049e6 <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049ee:	0424      	lsls	r4, r4, #16
 80049f0:	e7f9      	b.n	80049e6 <HAL_GPIO_WritePin+0x22>
 80049f2:	bf00      	nop
 80049f4:	0800c86b 	.word	0x0800c86b

080049f8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80049f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80049fc:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd); 
 80049fe:	f890 0290 	ldrb.w	r0, [r0, #656]	; 0x290
{
 8004a02:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 8004a06:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8004a0a:	f8bd c030 	ldrh.w	ip, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd); 
 8004a0e:	2801      	cmp	r0, #1
{
 8004a10:	468e      	mov	lr, r1
  __HAL_LOCK(hhcd); 
 8004a12:	d022      	beq.n	8004a5a <HAL_HCD_HC_Init+0x62>
 8004a14:	2001      	movs	r0, #1
 8004a16:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004a1a:	2028      	movs	r0, #40	; 0x28
 8004a1c:	fb00 4001 	mla	r0, r0, r1, r4
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8004a20:	f002 0e7f 	and.w	lr, r2, #127	; 0x7f
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8004a24:	09d5      	lsrs	r5, r2, #7
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004a26:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8004a2a:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8004a2e:	f880 703f 	strb.w	r7, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8004a32:	f880 e03a 	strb.w	lr, [r0, #58]	; 0x3a
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8004a36:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 8004a3a:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8004a3e:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40
  
  status =  USB_HC_Init(hhcd->Instance, 
 8004a42:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 8004a46:	9600      	str	r6, [sp, #0]
 8004a48:	6820      	ldr	r0, [r4, #0]
 8004a4a:	f002 fc7b 	bl	8007344 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  
  return status;
}
 8004a54:	b004      	add	sp, #16
 8004a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hhcd); 
 8004a5a:	2002      	movs	r0, #2
 8004a5c:	e7fa      	b.n	8004a54 <HAL_HCD_HC_Init+0x5c>

08004a5e <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd);   
 8004a5e:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8004a62:	2b01      	cmp	r3, #1
{
 8004a64:	b510      	push	{r4, lr}
 8004a66:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);   
 8004a68:	d009      	beq.n	8004a7e <HAL_HCD_HC_Halt+0x20>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 8004a70:	6800      	ldr	r0, [r0, #0]
 8004a72:	f002 fe18 	bl	80076a6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004a76:	2000      	movs	r0, #0
 8004a78:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  return status;
}
 8004a7c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);   
 8004a7e:	2002      	movs	r0, #2
 8004a80:	e7fc      	b.n	8004a7c <HAL_HCD_HC_Halt+0x1e>
	...

08004a84 <HAL_HCD_Init>:
{ 
 8004a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hhcd == NULL)
 8004a88:	4607      	mov	r7, r0
{ 
 8004a8a:	b08a      	sub	sp, #40	; 0x28
  if(hhcd == NULL)
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	d040      	beq.n	8004b12 <HAL_HCD_Init+0x8e>
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8004a90:	6803      	ldr	r3, [r0, #0]
 8004a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a96:	d006      	beq.n	8004aa6 <HAL_HCD_Init+0x22>
 8004a98:	4a1f      	ldr	r2, [pc, #124]	; (8004b18 <HAL_HCD_Init+0x94>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d003      	beq.n	8004aa6 <HAL_HCD_Init+0x22>
 8004a9e:	218a      	movs	r1, #138	; 0x8a
 8004aa0:	481e      	ldr	r0, [pc, #120]	; (8004b1c <HAL_HCD_Init+0x98>)
 8004aa2:	f006 fac4 	bl	800b02e <assert_failed>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8004aa6:	2303      	movs	r3, #3
  __HAL_HCD_DISABLE(hhcd);
 8004aa8:	463c      	mov	r4, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 8004aaa:	f887 3291 	strb.w	r3, [r7, #657]	; 0x291
  HAL_HCD_MspInit(hhcd);
 8004aae:	4638      	mov	r0, r7
 8004ab0:	f006 fcc6 	bl	800b440 <HAL_HCD_MspInit>
  __HAL_HCD_DISABLE(hhcd);
 8004ab4:	f854 0b10 	ldr.w	r0, [r4], #16
 8004ab8:	f002 faee 	bl	8007098 <USB_DisableGlobalInt>
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004abe:	466d      	mov	r5, sp
 8004ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ac6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004aca:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ace:	f107 0804 	add.w	r8, r7, #4
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8004ad2:	463e      	mov	r6, r7
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004ad4:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8004ad8:	6838      	ldr	r0, [r7, #0]
 8004ada:	f002 fa9d 	bl	8007018 <USB_CoreInit>
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8004ade:	f856 0b10 	ldr.w	r0, [r6], #16
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	f002 fade 	bl	80070a4 <USB_SetCurrentMode>
  USB_HostInit(hhcd->Instance, hhcd->Init);
 8004ae8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004aea:	466d      	mov	r5, sp
 8004aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004af2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004af6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004afa:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8004afe:	6838      	ldr	r0, [r7, #0]
 8004b00:	f002 fb4c 	bl	800719c <USB_HostInit>
  hhcd->State= HAL_HCD_STATE_READY;
 8004b04:	2301      	movs	r3, #1
 8004b06:	f887 3291 	strb.w	r3, [r7, #657]	; 0x291
  return HAL_OK;
 8004b0a:	2000      	movs	r0, #0
}
 8004b0c:	b00a      	add	sp, #40	; 0x28
 8004b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8004b12:	2001      	movs	r0, #1
 8004b14:	e7fa      	b.n	8004b0c <HAL_HCD_Init+0x88>
 8004b16:	bf00      	nop
 8004b18:	40040000 	.word	0x40040000
 8004b1c:	0800c8a4 	.word	0x0800c8a4

08004b20 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,  
                                           uint8_t token, 
                                           uint8_t* pbuff, 
                                           uint16_t length,
                                           uint8_t do_ping) 
{
 8004b20:	b5f0      	push	{r4, r5, r6, r7, lr}
  hhcd->hc[ch_num].ep_is_in = direction;
 8004b22:	2628      	movs	r6, #40	; 0x28
 8004b24:	fb06 0601 	mla	r6, r6, r1, r0
{
 8004b28:	f89d c014 	ldrb.w	ip, [sp, #20]
 8004b2c:	9d06      	ldr	r5, [sp, #24]
 8004b2e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8004b32:	f89d 7020 	ldrb.w	r7, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004b36:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type; 
 8004b3a:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
  
  if(token == 0)
 8004b3e:	f1bc 0f00 	cmp.w	ip, #0
 8004b42:	d10e      	bne.n	8004b62 <HAL_HCD_HC_SubmitRequest+0x42>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004b44:	f04f 0c03 	mov.w	ip, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 8004b48:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004b4a:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch(ep_type)
 8004b4e:	d04a      	beq.n	8004be6 <HAL_HCD_HC_SubmitRequest+0xc6>
 8004b50:	4563      	cmp	r3, ip
 8004b52:	d055      	beq.n	8004c00 <HAL_HCD_HC_SubmitRequest+0xe0>
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d12f      	bne.n	8004bb8 <HAL_HCD_HC_SubmitRequest+0x98>
      }
    }
    break;
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b58:	2328      	movs	r3, #40	; 0x28
 8004b5a:	fb03 0301 	mla	r3, r3, r1, r0
 8004b5e:	2200      	movs	r2, #0
 8004b60:	e055      	b.n	8004c0e <HAL_HCD_HC_SubmitRequest+0xee>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b62:	f04f 0e02 	mov.w	lr, #2
 8004b66:	f886 e042 	strb.w	lr, [r6, #66]	; 0x42
  switch(ep_type)
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d824      	bhi.n	8004bb8 <HAL_HCD_HC_SubmitRequest+0x98>
 8004b6e:	a601      	add	r6, pc, #4	; (adr r6, 8004b74 <HAL_HCD_HC_SubmitRequest+0x54>)
 8004b70:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 8004b74:	08004b85 	.word	0x08004b85
 8004b78:	08004b59 	.word	0x08004b59
 8004b7c:	08004be7 	.word	0x08004be7
 8004b80:	08004c01 	.word	0x08004c01
    if((token == 1) && (direction == 0)) /*send data */
 8004b84:	f1bc 0f01 	cmp.w	ip, #1
 8004b88:	d116      	bne.n	8004bb8 <HAL_HCD_HC_SubmitRequest+0x98>
 8004b8a:	b9aa      	cbnz	r2, 8004bb8 <HAL_HCD_HC_SubmitRequest+0x98>
      if (length == 0)
 8004b8c:	b924      	cbnz	r4, 8004b98 <HAL_HCD_HC_SubmitRequest+0x78>
        hhcd->hc[ch_num].toggle_out = 1;
 8004b8e:	2328      	movs	r3, #40	; 0x28
 8004b90:	fb03 0301 	mla	r3, r3, r1, r0
 8004b94:	f883 c051 	strb.w	ip, [r3, #81]	; 0x51
      if (hhcd->hc[ch_num].toggle_out == 0)
 8004b98:	2328      	movs	r3, #40	; 0x28
 8004b9a:	fb03 0201 	mla	r2, r3, r1, r0
 8004b9e:	f892 6051 	ldrb.w	r6, [r2, #81]	; 0x51
 8004ba2:	b9f6      	cbnz	r6, 8004be2 <HAL_HCD_HC_SubmitRequest+0xc2>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ba4:	f882 6042 	strb.w	r6, [r2, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8004ba8:	fb03 0301 	mla	r3, r3, r1, r0
 8004bac:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8004bb0:	2a02      	cmp	r2, #2
 8004bb2:	d001      	beq.n	8004bb8 <HAL_HCD_HC_SubmitRequest+0x98>
        hhcd->hc[ch_num].do_ping = do_ping;
 8004bb4:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
    break;  
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004bb8:	2628      	movs	r6, #40	; 0x28
 8004bba:	fb06 0301 	mla	r3, r6, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 8004bbe:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0;
  hhcd->hc[ch_num].ch_num = ch_num;
 8004bc0:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8004bc4:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_len  = length;
 8004bc6:	e9c3 5411 	strd	r5, r4, [r3, #68]	; 0x44
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 8004bca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0;
 8004bce:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8004bd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8004bd4:	3138      	adds	r1, #56	; 0x38
 8004bd6:	7c02      	ldrb	r2, [r0, #16]
 8004bd8:	6800      	ldr	r0, [r0, #0]
}
 8004bda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8004bde:	f002 bc19 	b.w	8007414 <USB_HC_StartXfer>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004be2:	2602      	movs	r6, #2
 8004be4:	e7de      	b.n	8004ba4 <HAL_HCD_HC_SubmitRequest+0x84>
 8004be6:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8004be8:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8004bec:	b992      	cbnz	r2, 8004c14 <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8004bee:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8004bf2:	b91e      	cbnz	r6, 8004bfc <HAL_HCD_HC_SubmitRequest+0xdc>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8004bf8:	2328      	movs	r3, #40	; 0x28
 8004bfa:	e7d5      	b.n	8004ba8 <HAL_HCD_HC_SubmitRequest+0x88>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	e7f9      	b.n	8004bf4 <HAL_HCD_HC_SubmitRequest+0xd4>
 8004c00:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8004c02:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8004c06:	b92a      	cbnz	r2, 8004c14 <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8004c08:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8004c0c:	b936      	cbnz	r6, 8004c1c <HAL_HCD_HC_SubmitRequest+0xfc>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    break;  
 8004c12:	e7d1      	b.n	8004bb8 <HAL_HCD_HC_SubmitRequest+0x98>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8004c14:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8004c18:	2a00      	cmp	r2, #0
 8004c1a:	d0f8      	beq.n	8004c0e <HAL_HCD_HC_SubmitRequest+0xee>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	e7f6      	b.n	8004c0e <HAL_HCD_HC_SubmitRequest+0xee>

08004c20 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c24:	6806      	ldr	r6, [r0, #0]
{
 8004c26:	b087      	sub	sp, #28
 8004c28:	4605      	mov	r5, r0
  uint32_t i = 0U , interrupt = 0U;
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	f002 fa9a 	bl	8007164 <USB_GetMode>
 8004c30:	2801      	cmp	r0, #1
 8004c32:	f040 80ea 	bne.w	8004e0a <HAL_HCD_IRQHandler+0x1ea>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 8004c36:	6828      	ldr	r0, [r5, #0]
 8004c38:	f002 fa90 	bl	800715c <USB_ReadInterrupts>
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	f000 80e4 	beq.w	8004e0a <HAL_HCD_IRQHandler+0x1ea>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c42:	6828      	ldr	r0, [r5, #0]
 8004c44:	f002 fa8a 	bl	800715c <USB_ReadInterrupts>
 8004c48:	0280      	lsls	r0, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c4a:	bf48      	it	mi
 8004c4c:	682b      	ldrmi	r3, [r5, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c4e:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c50:	bf44      	itt	mi
 8004c52:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8004c56:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c58:	f002 fa80 	bl	800715c <USB_ReadInterrupts>
 8004c5c:	02c1      	lsls	r1, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c5e:	bf48      	it	mi
 8004c60:	682b      	ldrmi	r3, [r5, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004c62:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c64:	bf44      	itt	mi
 8004c66:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8004c6a:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004c6c:	f002 fa76 	bl	800715c <USB_ReadInterrupts>
 8004c70:	0142      	lsls	r2, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004c72:	bf48      	it	mi
 8004c74:	682b      	ldrmi	r3, [r5, #0]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004c76:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004c78:	bf44      	itt	mi
 8004c7a:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8004c7e:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004c80:	f002 fa6c 	bl	800715c <USB_ReadInterrupts>
 8004c84:	0783      	lsls	r3, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004c86:	bf48      	it	mi
 8004c88:	682b      	ldrmi	r3, [r5, #0]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004c8a:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004c8c:	bf44      	itt	mi
 8004c8e:	2202      	movmi	r2, #2
 8004c90:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004c92:	f002 fa63 	bl	800715c <USB_ReadInterrupts>
 8004c96:	0087      	lsls	r7, r0, #2
 8004c98:	d510      	bpl.n	8004cbc <HAL_HCD_IRQHandler+0x9c>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8004c9a:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8004c9e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ca2:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f006 fc0e 	bl	800b4c8 <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8004cac:	2101      	movs	r1, #1
 8004cae:	6828      	ldr	r0, [r5, #0]
 8004cb0:	f002 fae6 	bl	8007280 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004cb4:	682b      	ldr	r3, [r5, #0]
 8004cb6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004cba:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004cbc:	6828      	ldr	r0, [r5, #0]
 8004cbe:	f002 fa4d 	bl	800715c <USB_ReadInterrupts>
 8004cc2:	01c4      	lsls	r4, r0, #7
 8004cc4:	d540      	bpl.n	8004d48 <HAL_HCD_IRQHandler+0x128>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8004cc6:	682c      	ldr	r4, [r5, #0]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004cc8:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8004ccc:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8004cce:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8004cd2:	9305      	str	r3, [sp, #20]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8004cd4:	9b05      	ldr	r3, [sp, #20]
 8004cd6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004cda:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004cdc:	9b04      	ldr	r3, [sp, #16]
 8004cde:	0798      	lsls	r0, r3, #30
 8004ce0:	d50d      	bpl.n	8004cfe <HAL_HCD_IRQHandler+0xde>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004ce2:	9b04      	ldr	r3, [sp, #16]
 8004ce4:	07d9      	lsls	r1, r3, #31
 8004ce6:	d506      	bpl.n	8004cf6 <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8004ce8:	69a3      	ldr	r3, [r4, #24]
 8004cea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004cee:	61a3      	str	r3, [r4, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f006 fbe5 	bl	800b4c0 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004cf6:	9b05      	ldr	r3, [sp, #20]
 8004cf8:	f043 0302 	orr.w	r3, r3, #2
 8004cfc:	9305      	str	r3, [sp, #20]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004cfe:	9b04      	ldr	r3, [sp, #16]
 8004d00:	071a      	lsls	r2, r3, #28
 8004d02:	d517      	bpl.n	8004d34 <HAL_HCD_IRQHandler+0x114>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004d04:	9b05      	ldr	r3, [sp, #20]
 8004d06:	f043 0308 	orr.w	r3, r3, #8
 8004d0a:	9305      	str	r3, [sp, #20]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004d0c:	9b04      	ldr	r3, [sp, #16]
 8004d0e:	075b      	lsls	r3, r3, #29
 8004d10:	f140 8086 	bpl.w	8004e20 <HAL_HCD_IRQHandler+0x200>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004d14:	69a9      	ldr	r1, [r5, #24]
 8004d16:	2902      	cmp	r1, #2
 8004d18:	d17a      	bne.n	8004e10 <HAL_HCD_IRQHandler+0x1f0>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8004d1a:	9b04      	ldr	r3, [sp, #16]
 8004d1c:	6828      	ldr	r0, [r5, #0]
 8004d1e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004d22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8004d26:	bf18      	it	ne
 8004d28:	2101      	movne	r1, #1
 8004d2a:	f002 faa9 	bl	8007280 <USB_InitFSLSPClkSel>
        {
          USBx_HOST->HFIR = 60000U;
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f006 fbc6 	bl	800b4c0 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004d34:	9b04      	ldr	r3, [sp, #16]
 8004d36:	069f      	lsls	r7, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004d38:	bf42      	ittt	mi
 8004d3a:	9b05      	ldrmi	r3, [sp, #20]
 8004d3c:	f043 0320 	orrmi.w	r3, r3, #32
 8004d40:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004d42:	9b05      	ldr	r3, [sp, #20]
 8004d44:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004d48:	6828      	ldr	r0, [r5, #0]
 8004d4a:	f002 fa07 	bl	800715c <USB_ReadInterrupts>
 8004d4e:	0704      	lsls	r4, r0, #28
 8004d50:	d505      	bpl.n	8004d5e <HAL_HCD_IRQHandler+0x13e>
      HAL_HCD_SOF_Callback(hhcd);
 8004d52:	4628      	mov	r0, r5
 8004d54:	f006 fbb0 	bl	800b4b8 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	2208      	movs	r2, #8
 8004d5c:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004d5e:	6828      	ldr	r0, [r5, #0]
 8004d60:	f002 f9fc 	bl	800715c <USB_ReadInterrupts>
 8004d64:	0180      	lsls	r0, r0, #6
 8004d66:	d512      	bpl.n	8004d8e <HAL_HCD_IRQHandler+0x16e>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004d68:	6828      	ldr	r0, [r5, #0]
 8004d6a:	f002 fc8d 	bl	8007688 <USB_HC_ReadInterrupt>
 8004d6e:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8004d72:	9001      	str	r0, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004d74:	f04f 0800 	mov.w	r8, #0
        if (interrupt & (1U << i))
 8004d78:	f04f 0901 	mov.w	r9, #1
 8004d7c:	9302      	str	r3, [sp, #8]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8004d7e:	2728      	movs	r7, #40	; 0x28
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004d80:	68ab      	ldr	r3, [r5, #8]
 8004d82:	6828      	ldr	r0, [r5, #0]
 8004d84:	4543      	cmp	r3, r8
 8004d86:	d857      	bhi.n	8004e38 <HAL_HCD_IRQHandler+0x218>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004d88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d8c:	6143      	str	r3, [r0, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 8004d8e:	6828      	ldr	r0, [r5, #0]
 8004d90:	f002 f9e4 	bl	800715c <USB_ReadInterrupts>
 8004d94:	06c3      	lsls	r3, r0, #27
 8004d96:	d538      	bpl.n	8004e0a <HAL_HCD_IRQHandler+0x1ea>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d98:	682c      	ldr	r4, [r5, #0]
 8004d9a:	69a3      	ldr	r3, [r4, #24]
 8004d9c:	f023 0310 	bic.w	r3, r3, #16
 8004da0:	61a3      	str	r3, [r4, #24]
  temp = hhcd->Instance->GRXSTSP;
 8004da2:	6a27      	ldr	r7, [r4, #32]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 8004da4:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d129      	bne.n	8004e00 <HAL_HCD_IRQHandler+0x1e0>
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 8004dac:	f3c7 180a 	ubfx	r8, r7, #4, #11
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8004db0:	f1b8 0f00 	cmp.w	r8, #0
 8004db4:	d024      	beq.n	8004e00 <HAL_HCD_IRQHandler+0x1e0>
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 8004db6:	f007 070f 	and.w	r7, r7, #15
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8004dba:	2628      	movs	r6, #40	; 0x28
 8004dbc:	fb06 5607 	mla	r6, r6, r7, r5
 8004dc0:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8004dc2:	b1e9      	cbz	r1, 8004e00 <HAL_HCD_IRQHandler+0x1e0>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	f002 f9ba 	bl	8007140 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8004dcc:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004dce:	4443      	add	r3, r8
 8004dd0:	6473      	str	r3, [r6, #68]	; 0x44
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8004dd2:	f504 64a0 	add.w	r4, r4, #1280	; 0x500
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8004dd6:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8004dd8:	eb04 1447 	add.w	r4, r4, r7, lsl #5
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8004ddc:	4443      	add	r3, r8
 8004dde:	64f3      	str	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8004de0:	6922      	ldr	r2, [r4, #16]
 8004de2:	4bb9      	ldr	r3, [pc, #740]	; (80050c8 <HAL_HCD_IRQHandler+0x4a8>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	b15b      	cbz	r3, 8004e00 <HAL_HCD_IRQHandler+0x1e0>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8004de8:	6823      	ldr	r3, [r4, #0]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004dee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8004df2:	6023      	str	r3, [r4, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8004df4:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8004df8:	f083 0301 	eor.w	r3, r3, #1
 8004dfc:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e00:	682a      	ldr	r2, [r5, #0]
 8004e02:	6993      	ldr	r3, [r2, #24]
 8004e04:	f043 0310 	orr.w	r3, r3, #16
 8004e08:	6193      	str	r3, [r2, #24]
}
 8004e0a:	b007      	add	sp, #28
 8004e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8004e10:	68eb      	ldr	r3, [r5, #12]
 8004e12:	2b03      	cmp	r3, #3
          USBx_HOST->HFIR = 60000U;
 8004e14:	bf04      	itt	eq
 8004e16:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8004e1a:	f8c4 2404 	streq.w	r2, [r4, #1028]	; 0x404
 8004e1e:	e786      	b.n	8004d2e <HAL_HCD_IRQHandler+0x10e>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8004e20:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8004e24:	682a      	ldr	r2, [r5, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8004e26:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004e2a:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8004e2e:	6993      	ldr	r3, [r2, #24]
 8004e30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e34:	6193      	str	r3, [r2, #24]
 8004e36:	e77d      	b.n	8004d34 <HAL_HCD_IRQHandler+0x114>
        if (interrupt & (1U << i))
 8004e38:	9a01      	ldr	r2, [sp, #4]
 8004e3a:	fa09 f308 	lsl.w	r3, r9, r8
 8004e3e:	4213      	tst	r3, r2
 8004e40:	f000 8083 	beq.w	8004f4a <HAL_HCD_IRQHandler+0x32a>
 8004e44:	ea4f 1348 	mov.w	r3, r8, lsl #5
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8004e48:	9a02      	ldr	r2, [sp, #8]
 8004e4a:	58d1      	ldr	r1, [r2, r3]
 8004e4c:	fa5f f688 	uxtb.w	r6, r8
 8004e50:	ea4f 1b46 	mov.w	fp, r6, lsl #5
 8004e54:	f500 6aa0 	add.w	sl, r0, #1280	; 0x500
 8004e58:	0409      	lsls	r1, r1, #16
 8004e5a:	eb0b 040a 	add.w	r4, fp, sl
 8004e5e:	f140 80f9 	bpl.w	8005054 <HAL_HCD_IRQHandler+0x434>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8004e62:	68a1      	ldr	r1, [r4, #8]
 8004e64:	074a      	lsls	r2, r1, #29
 8004e66:	d513      	bpl.n	8004e90 <HAL_HCD_IRQHandler+0x270>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004e68:	2104      	movs	r1, #4
 8004e6a:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8004e6c:	68e1      	ldr	r1, [r4, #12]
 8004e6e:	f041 0102 	orr.w	r1, r1, #2
 8004e72:	60e1      	str	r1, [r4, #12]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8004e74:	68a1      	ldr	r1, [r4, #8]
 8004e76:	058b      	lsls	r3, r1, #22
 8004e78:	d539      	bpl.n	8004eee <HAL_HCD_IRQHandler+0x2ce>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8004e7a:	68e3      	ldr	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8004e7c:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8004e7e:	f043 0302 	orr.w	r3, r3, #2
 8004e82:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8004e84:	4631      	mov	r1, r6
    USB_HC_Halt(hhcd->Instance, chnum);  
 8004e86:	f002 fc0e 	bl	80076a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004e8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e8e:	e119      	b.n	80050c4 <HAL_HCD_IRQHandler+0x4a4>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8004e90:	68a1      	ldr	r1, [r4, #8]
 8004e92:	068b      	lsls	r3, r1, #26
 8004e94:	d502      	bpl.n	8004e9c <HAL_HCD_IRQHandler+0x27c>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004e96:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004e98:	60a1      	str	r1, [r4, #8]
 8004e9a:	e7eb      	b.n	8004e74 <HAL_HCD_IRQHandler+0x254>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8004e9c:	68a1      	ldr	r1, [r4, #8]
 8004e9e:	0709      	lsls	r1, r1, #28
 8004ea0:	d511      	bpl.n	8004ec6 <HAL_HCD_IRQHandler+0x2a6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8004ea2:	68e1      	ldr	r1, [r4, #12]
 8004ea4:	f041 0102 	orr.w	r1, r1, #2
 8004ea8:	60e1      	str	r1, [r4, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8004eaa:	fb07 5106 	mla	r1, r7, r6, r5
 8004eae:	f04f 0c05 	mov.w	ip, #5
 8004eb2:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004eb6:	2110      	movs	r1, #16
 8004eb8:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 8004eba:	2108      	movs	r1, #8
 8004ebc:	60a1      	str	r1, [r4, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 8004ebe:	4631      	mov	r1, r6
 8004ec0:	f002 fbf1 	bl	80076a6 <USB_HC_Halt>
 8004ec4:	e7d6      	b.n	8004e74 <HAL_HCD_IRQHandler+0x254>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8004ec6:	68a1      	ldr	r1, [r4, #8]
 8004ec8:	054a      	lsls	r2, r1, #21
 8004eca:	d5d3      	bpl.n	8004e74 <HAL_HCD_IRQHandler+0x254>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8004ecc:	68e1      	ldr	r1, [r4, #12]
 8004ece:	f041 0102 	orr.w	r1, r1, #2
 8004ed2:	60e1      	str	r1, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8004ed4:	4631      	mov	r1, r6
 8004ed6:	f002 fbe6 	bl	80076a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 8004eda:	2110      	movs	r1, #16
 8004edc:	60a1      	str	r1, [r4, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004ede:	fb07 5106 	mla	r1, r7, r6, r5
 8004ee2:	2008      	movs	r0, #8
 8004ee4:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004ee8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004eec:	e7d4      	b.n	8004e98 <HAL_HCD_IRQHandler+0x278>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8004eee:	68a1      	ldr	r1, [r4, #8]
 8004ef0:	07c8      	lsls	r0, r1, #31
 8004ef2:	d53d      	bpl.n	8004f70 <HAL_HCD_IRQHandler+0x350>
    if (hhcd->Init.dma_enable)
 8004ef4:	6929      	ldr	r1, [r5, #16]
 8004ef6:	b149      	cbz	r1, 8004f0c <HAL_HCD_IRQHandler+0x2ec>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8004ef8:	fb07 5c06 	mla	ip, r7, r6, r5
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004efc:	6920      	ldr	r0, [r4, #16]
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8004efe:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004f02:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8004f06:	1a09      	subs	r1, r1, r0
 8004f08:	f8cc 104c 	str.w	r1, [ip, #76]	; 0x4c
    hhcd->hc[chnum].state = HC_XFRC;
 8004f0c:	fb07 5106 	mla	r1, r7, r6, r5
    hhcd->hc[chnum].ErrCnt = 0U;
 8004f10:	2000      	movs	r0, #0
 8004f12:	6588      	str	r0, [r1, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XFRC;
 8004f14:	f881 905d 	strb.w	r9, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004f18:	f8c4 9008 	str.w	r9, [r4, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8004f1c:	f891 003f 	ldrb.w	r0, [r1, #63]	; 0x3f
 8004f20:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8004f24:	d114      	bne.n	8004f50 <HAL_HCD_IRQHandler+0x330>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8004f26:	68e3      	ldr	r3, [r4, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8004f28:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8004f2a:	f043 0302 	orr.w	r3, r3, #2
 8004f2e:	60e3      	str	r3, [r4, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8004f30:	4631      	mov	r1, r6
 8004f32:	f002 fbb8 	bl	80076a6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f36:	2310      	movs	r3, #16
 8004f38:	60a3      	str	r3, [r4, #8]
    hhcd->hc[chnum].toggle_in ^= 1U;
 8004f3a:	fb07 5606 	mla	r6, r7, r6, r5
 8004f3e:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8004f42:	f083 0301 	eor.w	r3, r3, #1
 8004f46:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f4a:	f108 0801 	add.w	r8, r8, #1
 8004f4e:	e717      	b.n	8004d80 <HAL_HCD_IRQHandler+0x160>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004f50:	2803      	cmp	r0, #3
 8004f52:	d1f2      	bne.n	8004f3a <HAL_HCD_IRQHandler+0x31a>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f54:	f85b 000a 	ldr.w	r0, [fp, sl]
 8004f58:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8004f5c:	f84b 000a 	str.w	r0, [fp, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004f60:	2201      	movs	r2, #1
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8004f62:	f881 905c 	strb.w	r9, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004f66:	4628      	mov	r0, r5
 8004f68:	4631      	mov	r1, r6
 8004f6a:	f006 fab1 	bl	800b4d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f6e:	e7e4      	b.n	8004f3a <HAL_HCD_IRQHandler+0x31a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8004f70:	68a1      	ldr	r1, [r4, #8]
 8004f72:	0789      	lsls	r1, r1, #30
 8004f74:	d534      	bpl.n	8004fe0 <HAL_HCD_IRQHandler+0x3c0>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8004f76:	68e1      	ldr	r1, [r4, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8004f78:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8004f7c:	f021 0102 	bic.w	r1, r1, #2
 8004f80:	60e1      	str	r1, [r4, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8004f82:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8004f86:	2901      	cmp	r1, #1
 8004f88:	d10c      	bne.n	8004fa4 <HAL_HCD_IRQHandler+0x384>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004f8a:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004f8e:	2302      	movs	r3, #2
 8004f90:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8004f92:	fb07 5306 	mla	r3, r7, r6, r5
 8004f96:	4631      	mov	r1, r6
 8004f98:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	f006 fa97 	bl	800b4d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004fa2:	e7d2      	b.n	8004f4a <HAL_HCD_IRQHandler+0x32a>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8004fa4:	2905      	cmp	r1, #5
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_HCD_IRQHandler+0x36a>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004fa8:	2906      	cmp	r1, #6
 8004faa:	d001      	beq.n	8004fb0 <HAL_HCD_IRQHandler+0x390>
 8004fac:	2908      	cmp	r1, #8
 8004fae:	d1ee      	bne.n	8004f8e <HAL_HCD_IRQHandler+0x36e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8004fb0:	fb07 5106 	mla	r1, r7, r6, r5
 8004fb4:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8004fb6:	2803      	cmp	r0, #3
 8004fb8:	f100 0301 	add.w	r3, r0, #1
        hhcd->hc[chnum].ErrCnt = 0U;
 8004fbc:	bf88      	it	hi
 8004fbe:	2000      	movhi	r0, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8004fc0:	658b      	str	r3, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004fc2:	bf92      	itee	ls
 8004fc4:	2002      	movls	r0, #2
        hhcd->hc[chnum].ErrCnt = 0U;
 8004fc6:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004fc8:	2004      	movhi	r0, #4
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004fca:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8004fce:	f85b 100a 	ldr.w	r1, [fp, sl]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fd2:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fd6:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8004fda:	f84b 100a 	str.w	r1, [fp, sl]
 8004fde:	e7d6      	b.n	8004f8e <HAL_HCD_IRQHandler+0x36e>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8004fe0:	68a1      	ldr	r1, [r4, #8]
 8004fe2:	6828      	ldr	r0, [r5, #0]
 8004fe4:	060a      	lsls	r2, r1, #24
 8004fe6:	d510      	bpl.n	800500a <HAL_HCD_IRQHandler+0x3ea>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8004fe8:	68e3      	ldr	r3, [r4, #12]
    hhcd->hc[chnum].ErrCnt++;
 8004fea:	fb07 5206 	mla	r2, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8004fee:	f043 0302 	orr.w	r3, r3, #2
 8004ff2:	60e3      	str	r3, [r4, #12]
    hhcd->hc[chnum].ErrCnt++;
 8004ff4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XACTERR;
 8004ffa:	2306      	movs	r3, #6
 8004ffc:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    USB_HC_Halt(hhcd->Instance, chnum);     
 8005000:	4631      	mov	r1, r6
 8005002:	f002 fb50 	bl	80076a6 <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	e05c      	b.n	80050c4 <HAL_HCD_IRQHandler+0x4a4>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 800500a:	68a1      	ldr	r1, [r4, #8]
 800500c:	06cb      	lsls	r3, r1, #27
 800500e:	d59c      	bpl.n	8004f4a <HAL_HCD_IRQHandler+0x32a>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005010:	fb07 5106 	mla	r1, r7, r6, r5
 8005014:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 8005018:	2903      	cmp	r1, #3
 800501a:	d106      	bne.n	800502a <HAL_HCD_IRQHandler+0x40a>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800501c:	68e1      	ldr	r1, [r4, #12]
 800501e:	f041 0102 	orr.w	r1, r1, #2
 8005022:	60e1      	str	r1, [r4, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8005024:	4631      	mov	r1, r6
 8005026:	f002 fb3e 	bl	80076a6 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 800502a:	fb07 5606 	mla	r6, r7, r6, r5
 800502e:	2103      	movs	r1, #3
 8005030:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005034:	2110      	movs	r1, #16
 8005036:	60a1      	str	r1, [r4, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8005038:	f896 103f 	ldrb.w	r1, [r6, #63]	; 0x3f
 800503c:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8005040:	d183      	bne.n	8004f4a <HAL_HCD_IRQHandler+0x32a>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8005042:	f85b 100a 	ldr.w	r1, [fp, sl]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005046:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800504a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 800504e:	f84b 100a 	str.w	r1, [fp, sl]
 8005052:	e77a      	b.n	8004f4a <HAL_HCD_IRQHandler+0x32a>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8005054:	68a3      	ldr	r3, [r4, #8]
 8005056:	0759      	lsls	r1, r3, #29
 8005058:	d506      	bpl.n	8005068 <HAL_HCD_IRQHandler+0x448>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800505a:	2304      	movs	r3, #4
 800505c:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800505e:	68e3      	ldr	r3, [r4, #12]
 8005060:	f043 0302 	orr.w	r3, r3, #2
 8005064:	60e3      	str	r3, [r4, #12]
 8005066:	e770      	b.n	8004f4a <HAL_HCD_IRQHandler+0x32a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8005068:	68a3      	ldr	r3, [r4, #8]
 800506a:	f013 0320 	ands.w	r3, r3, #32
 800506e:	d018      	beq.n	80050a2 <HAL_HCD_IRQHandler+0x482>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005070:	2320      	movs	r3, #32
 8005072:	60a3      	str	r3, [r4, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 8005074:	fb07 5306 	mla	r3, r7, r6, r5
 8005078:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800507c:	2a01      	cmp	r2, #1
 800507e:	f47f af64 	bne.w	8004f4a <HAL_HCD_IRQHandler+0x32a>
      hhcd->hc[chnum].state = HC_NYET;     
 8005082:	2204      	movs	r2, #4
 8005084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8005088:	68e2      	ldr	r2, [r4, #12]
      hhcd->hc[chnum].state = HC_NYET;     
 800508a:	9303      	str	r3, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800508c:	f042 0202 	orr.w	r2, r2, #2
 8005090:	60e2      	str	r2, [r4, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8005092:	4631      	mov	r1, r6
 8005094:	f002 fb07 	bl	80076a6 <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005098:	9b03      	ldr	r3, [sp, #12]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80050a0:	e753      	b.n	8004f4a <HAL_HCD_IRQHandler+0x32a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 80050a2:	68a2      	ldr	r2, [r4, #8]
 80050a4:	0652      	lsls	r2, r2, #25
 80050a6:	d511      	bpl.n	80050cc <HAL_HCD_IRQHandler+0x4ac>
    hhcd->hc[chnum].state = HC_NYET;
 80050a8:	fb07 5206 	mla	r2, r7, r6, r5
 80050ac:	2104      	movs	r1, #4
    hhcd->hc[chnum].ErrCnt= 0U;    
 80050ae:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80050b0:	68e3      	ldr	r3, [r4, #12]
    hhcd->hc[chnum].state = HC_NYET;
 80050b2:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80050b6:	f043 0302 	orr.w	r3, r3, #2
 80050ba:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 80050bc:	4631      	mov	r1, r6
 80050be:	f002 faf2 	bl	80076a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80050c2:	2340      	movs	r3, #64	; 0x40
 80050c4:	60a3      	str	r3, [r4, #8]
 80050c6:	e740      	b.n	8004f4a <HAL_HCD_IRQHandler+0x32a>
 80050c8:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 80050cc:	68a3      	ldr	r3, [r4, #8]
 80050ce:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 80050d2:	d005      	beq.n	80050e0 <HAL_HCD_IRQHandler+0x4c0>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80050d4:	68e3      	ldr	r3, [r4, #12]
 80050d6:	f043 0302 	orr.w	r3, r3, #2
 80050da:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80050dc:	4631      	mov	r1, r6
 80050de:	e6d2      	b.n	8004e86 <HAL_HCD_IRQHandler+0x266>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 80050e0:	68a2      	ldr	r2, [r4, #8]
 80050e2:	07d1      	lsls	r1, r2, #31
 80050e4:	d510      	bpl.n	8005108 <HAL_HCD_IRQHandler+0x4e8>
      hhcd->hc[chnum].ErrCnt = 0U;  
 80050e6:	fb07 5206 	mla	r2, r7, r6, r5
    USB_HC_Halt(hhcd->Instance, chnum);   
 80050ea:	4631      	mov	r1, r6
      hhcd->hc[chnum].ErrCnt = 0U;  
 80050ec:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80050ee:	68e3      	ldr	r3, [r4, #12]
      hhcd->hc[chnum].ErrCnt = 0U;  
 80050f0:	9203      	str	r2, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80050f2:	f043 0302 	orr.w	r3, r3, #2
 80050f6:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 80050f8:	f002 fad5 	bl	80076a6 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XFRC;
 80050fc:	9a03      	ldr	r2, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80050fe:	f8c4 9008 	str.w	r9, [r4, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005102:	f882 905d 	strb.w	r9, [r2, #93]	; 0x5d
 8005106:	e720      	b.n	8004f4a <HAL_HCD_IRQHandler+0x32a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8005108:	68a3      	ldr	r3, [r4, #8]
 800510a:	071a      	lsls	r2, r3, #28
 800510c:	d50e      	bpl.n	800512c <HAL_HCD_IRQHandler+0x50c>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 800510e:	2308      	movs	r3, #8
 8005110:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8005112:	68e3      	ldr	r3, [r4, #12]
 8005114:	f043 0302 	orr.w	r3, r3, #2
 8005118:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 800511a:	4631      	mov	r1, r6
 800511c:	f002 fac3 	bl	80076a6 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 8005120:	fb07 5606 	mla	r6, r7, r6, r5
 8005124:	2305      	movs	r3, #5
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005126:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 800512a:	e70e      	b.n	8004f4a <HAL_HCD_IRQHandler+0x32a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 800512c:	68a3      	ldr	r3, [r4, #8]
 800512e:	06db      	lsls	r3, r3, #27
 8005130:	d511      	bpl.n	8005156 <HAL_HCD_IRQHandler+0x536>
    hhcd->hc[chnum].ErrCnt = 0U;  
 8005132:	fb07 5306 	mla	r3, r7, r6, r5
 8005136:	2200      	movs	r2, #0
 8005138:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800513a:	68e2      	ldr	r2, [r4, #12]
    hhcd->hc[chnum].ErrCnt = 0U;  
 800513c:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800513e:	f042 0202 	orr.w	r2, r2, #2
 8005142:	60e2      	str	r2, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8005144:	4631      	mov	r1, r6
 8005146:	f002 faae 	bl	80076a6 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 800514a:	9b03      	ldr	r3, [sp, #12]
 800514c:	2203      	movs	r2, #3
 800514e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005152:	2310      	movs	r3, #16
 8005154:	e7b6      	b.n	80050c4 <HAL_HCD_IRQHandler+0x4a4>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8005156:	68a3      	ldr	r3, [r4, #8]
 8005158:	0619      	lsls	r1, r3, #24
 800515a:	d50c      	bpl.n	8005176 <HAL_HCD_IRQHandler+0x556>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800515c:	68e3      	ldr	r3, [r4, #12]
 800515e:	f043 0302 	orr.w	r3, r3, #2
 8005162:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8005164:	4631      	mov	r1, r6
    hhcd->hc[chnum].state = HC_XACTERR;  
 8005166:	fb07 5606 	mla	r6, r7, r6, r5
    USB_HC_Halt(hhcd->Instance, chnum);      
 800516a:	f002 fa9c 	bl	80076a6 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 800516e:	2306      	movs	r3, #6
 8005170:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8005174:	e747      	b.n	8005006 <HAL_HCD_IRQHandler+0x3e6>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8005176:	68a1      	ldr	r1, [r4, #8]
 8005178:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 800517c:	d00f      	beq.n	800519e <HAL_HCD_IRQHandler+0x57e>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800517e:	68e3      	ldr	r3, [r4, #12]
 8005180:	f043 0302 	orr.w	r3, r3, #2
 8005184:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8005186:	4631      	mov	r1, r6
 8005188:	f002 fa8d 	bl	80076a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800518c:	2310      	movs	r3, #16
 800518e:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 8005190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005194:	60a3      	str	r3, [r4, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005196:	fb07 5606 	mla	r6, r7, r6, r5
 800519a:	2308      	movs	r3, #8
 800519c:	e7c3      	b.n	8005126 <HAL_HCD_IRQHandler+0x506>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 800519e:	68a3      	ldr	r3, [r4, #8]
 80051a0:	079a      	lsls	r2, r3, #30
 80051a2:	f57f aed2 	bpl.w	8004f4a <HAL_HCD_IRQHandler+0x32a>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 80051a6:	68e3      	ldr	r3, [r4, #12]
 80051a8:	f023 0302 	bic.w	r3, r3, #2
 80051ac:	60e3      	str	r3, [r4, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80051ae:	fb07 5306 	mla	r3, r7, r6, r5
 80051b2:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 80051b6:	2a01      	cmp	r2, #1
 80051b8:	d10d      	bne.n	80051d6 <HAL_HCD_IRQHandler+0x5b6>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 80051ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 80051be:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 80051c2:	2a02      	cmp	r2, #2
 80051c4:	f47f aee3 	bne.w	8004f8e <HAL_HCD_IRQHandler+0x36e>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 80051c8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 80051cc:	f082 0201 	eor.w	r2, r2, #1
 80051d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80051d4:	e6db      	b.n	8004f8e <HAL_HCD_IRQHandler+0x36e>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 80051d6:	2a03      	cmp	r2, #3
 80051d8:	f04f 0002 	mov.w	r0, #2
 80051dc:	d102      	bne.n	80051e4 <HAL_HCD_IRQHandler+0x5c4>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80051de:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
 80051e2:	e6d4      	b.n	8004f8e <HAL_HCD_IRQHandler+0x36e>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 80051e4:	2a04      	cmp	r2, #4
 80051e6:	d104      	bne.n	80051f2 <HAL_HCD_IRQHandler+0x5d2>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80051e8:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
      hhcd->hc[chnum].do_ping = 0U;
 80051ec:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
 80051f0:	e6cd      	b.n	8004f8e <HAL_HCD_IRQHandler+0x36e>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 80051f2:	2a05      	cmp	r2, #5
 80051f4:	d102      	bne.n	80051fc <HAL_HCD_IRQHandler+0x5dc>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80051fa:	e6c8      	b.n	8004f8e <HAL_HCD_IRQHandler+0x36e>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80051fc:	2a06      	cmp	r2, #6
 80051fe:	d002      	beq.n	8005206 <HAL_HCD_IRQHandler+0x5e6>
 8005200:	2a08      	cmp	r2, #8
 8005202:	f47f aec4 	bne.w	8004f8e <HAL_HCD_IRQHandler+0x36e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8005206:	fb07 5306 	mla	r3, r7, r6, r5
 800520a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800520c:	2a03      	cmp	r2, #3
 800520e:	f102 0101 	add.w	r1, r2, #1
        hhcd->hc[chnum].ErrCnt = 0U;
 8005212:	bf88      	it	hi
 8005214:	2200      	movhi	r2, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8005216:	6599      	str	r1, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005218:	bf92      	itee	ls
 800521a:	2202      	movls	r2, #2
        hhcd->hc[chnum].ErrCnt = 0U;
 800521c:	659a      	strhi	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800521e:	2204      	movhi	r2, #4
 8005220:	e7e9      	b.n	80051f6 <HAL_HCD_IRQHandler+0x5d6>
 8005222:	bf00      	nop

08005224 <HAL_HCD_Start>:
{ 
 8005224:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd); 
 8005226:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 800522a:	2b01      	cmp	r3, #1
{ 
 800522c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 800522e:	d00d      	beq.n	800524c <HAL_HCD_Start+0x28>
 8005230:	2501      	movs	r5, #1
 8005232:	f880 5290 	strb.w	r5, [r0, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8005236:	6800      	ldr	r0, [r0, #0]
 8005238:	f001 ff28 	bl	800708c <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 800523c:	4629      	mov	r1, r5
 800523e:	6820      	ldr	r0, [r4, #0]
 8005240:	f002 f854 	bl	80072ec <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 8005244:	2000      	movs	r0, #0
 8005246:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
}
 800524a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd); 
 800524c:	2002      	movs	r0, #2
 800524e:	e7fc      	b.n	800524a <HAL_HCD_Start+0x26>

08005250 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd); 
 8005250:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8005254:	2b01      	cmp	r3, #1
{ 
 8005256:	b510      	push	{r4, lr}
 8005258:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 800525a:	d009      	beq.n	8005270 <HAL_HCD_Stop+0x20>
 800525c:	2301      	movs	r3, #1
 800525e:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 8005262:	6800      	ldr	r0, [r0, #0]
 8005264:	f002 fb3a 	bl	80078dc <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 8005268:	2000      	movs	r0, #0
 800526a:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
}
 800526e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd); 
 8005270:	2002      	movs	r0, #2
 8005272:	e7fc      	b.n	800526e <HAL_HCD_Stop+0x1e>

08005274 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8005274:	6800      	ldr	r0, [r0, #0]
 8005276:	f002 b820 	b.w	80072ba <USB_ResetPort>

0800527a <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800527a:	2328      	movs	r3, #40	; 0x28
 800527c:	fb03 0101 	mla	r1, r3, r1, r0
}
 8005280:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8005284:	4770      	bx	lr

08005286 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count; 
 8005286:	2328      	movs	r3, #40	; 0x28
 8005288:	fb03 0101 	mla	r1, r3, r1, r0
}
 800528c:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800528e:	4770      	bx	lr

08005290 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005290:	6800      	ldr	r0, [r0, #0]
 8005292:	f002 b852 	b.w	800733a <USB_GetCurrentFrame>

08005296 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8005296:	6800      	ldr	r0, [r0, #0]
 8005298:	f002 b846 	b.w	8007328 <USB_GetHostSpeed>

0800529c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800529c:	6802      	ldr	r2, [r0, #0]
 800529e:	6953      	ldr	r3, [r2, #20]
 80052a0:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80052a4:	d00d      	beq.n	80052c2 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a6:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80052aa:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80052ac:	2304      	movs	r3, #4
 80052ae:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80052b0:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80052b2:	2300      	movs	r3, #0
 80052b4:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80052ba:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80052be:	2001      	movs	r0, #1
 80052c0:	4770      	bx	lr
  }
  return HAL_OK;
 80052c2:	4618      	mov	r0, r3
}
 80052c4:	4770      	bx	lr

080052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80052c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ca:	4604      	mov	r4, r0
 80052cc:	4616      	mov	r6, r2
 80052ce:	4698      	mov	r8, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052d0:	b28f      	uxth	r7, r1
 80052d2:	6825      	ldr	r5, [r4, #0]
 80052d4:	6968      	ldr	r0, [r5, #20]
 80052d6:	ea37 0000 	bics.w	r0, r7, r0
 80052da:	d013      	beq.n	8005304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052dc:	696b      	ldr	r3, [r5, #20]
 80052de:	055a      	lsls	r2, r3, #21
 80052e0:	d512      	bpl.n	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x42>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80052e2:	682b      	ldr	r3, [r5, #0]
 80052e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052e8:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052ea:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80052ee:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80052f0:	2304      	movs	r3, #4
 80052f2:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80052f4:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80052f6:	2300      	movs	r3, #0
 80052f8:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80052fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80052fe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8005302:	2001      	movs	r0, #1
}
 8005304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8005308:	1c73      	adds	r3, r6, #1
 800530a:	d0e3      	beq.n	80052d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800530c:	b946      	cbnz	r6, 8005320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
        hi2c->PreviousState = I2C_STATE_NONE;
 800530e:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8005310:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8005312:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8005314:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8005318:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800531c:	2003      	movs	r0, #3
 800531e:	e7f1      	b.n	8005304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8005320:	f7fe fe4e 	bl	8003fc0 <HAL_GetTick>
 8005324:	eba0 0008 	sub.w	r0, r0, r8
 8005328:	42b0      	cmp	r0, r6
 800532a:	d9d2      	bls.n	80052d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
 800532c:	e7ef      	b.n	800530e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>

0800532e <I2C_WaitOnFlagUntilTimeout>:
{
 800532e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005332:	9e08      	ldr	r6, [sp, #32]
 8005334:	4605      	mov	r5, r0
 8005336:	4690      	mov	r8, r2
 8005338:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800533a:	ea4f 4911 	mov.w	r9, r1, lsr #16
 800533e:	b28c      	uxth	r4, r1
 8005340:	6829      	ldr	r1, [r5, #0]
 8005342:	f1b9 0f01 	cmp.w	r9, #1
 8005346:	bf0c      	ite	eq
 8005348:	694b      	ldreq	r3, [r1, #20]
 800534a:	698b      	ldrne	r3, [r1, #24]
 800534c:	ea34 0303 	bics.w	r3, r4, r3
 8005350:	bf0c      	ite	eq
 8005352:	2301      	moveq	r3, #1
 8005354:	2300      	movne	r3, #0
 8005356:	4598      	cmp	r8, r3
 8005358:	d001      	beq.n	800535e <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 800535a:	2000      	movs	r0, #0
 800535c:	e00c      	b.n	8005378 <I2C_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 800535e:	1c7b      	adds	r3, r7, #1
 8005360:	d0ef      	beq.n	8005342 <I2C_WaitOnFlagUntilTimeout+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8005362:	b95f      	cbnz	r7, 800537c <I2C_WaitOnFlagUntilTimeout+0x4e>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005364:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8005366:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8005368:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800536a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800536e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8005372:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005374:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
}
 8005378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800537c:	f7fe fe20 	bl	8003fc0 <HAL_GetTick>
 8005380:	1b80      	subs	r0, r0, r6
 8005382:	42b8      	cmp	r0, r7
 8005384:	d9dc      	bls.n	8005340 <I2C_WaitOnFlagUntilTimeout+0x12>
 8005386:	e7ed      	b.n	8005364 <I2C_WaitOnFlagUntilTimeout+0x36>

08005388 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8005388:	b570      	push	{r4, r5, r6, lr}
 800538a:	4604      	mov	r4, r0
 800538c:	460d      	mov	r5, r1
 800538e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005390:	6823      	ldr	r3, [r4, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	061b      	lsls	r3, r3, #24
 8005396:	d501      	bpl.n	800539c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8005398:	2000      	movs	r0, #0
 800539a:	e012      	b.n	80053c2 <I2C_WaitOnTXEFlagUntilTimeout+0x3a>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800539c:	4620      	mov	r0, r4
 800539e:	f7ff ff7d 	bl	800529c <I2C_IsAcknowledgeFailed>
 80053a2:	b9a8      	cbnz	r0, 80053d0 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80053a4:	1c6a      	adds	r2, r5, #1
 80053a6:	d0f3      	beq.n	8005390 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80053a8:	b965      	cbnz	r5, 80053c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053ac:	f043 0320 	orr.w	r3, r3, #32
 80053b0:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80053b2:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80053b4:	2300      	movs	r3, #0
 80053b6:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80053b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80053bc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80053c0:	2003      	movs	r0, #3
}
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80053c4:	f7fe fdfc 	bl	8003fc0 <HAL_GetTick>
 80053c8:	1b80      	subs	r0, r0, r6
 80053ca:	42a8      	cmp	r0, r5
 80053cc:	d9e0      	bls.n	8005390 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80053ce:	e7ec      	b.n	80053aa <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80053d0:	2001      	movs	r0, #1
 80053d2:	e7f6      	b.n	80053c2 <I2C_WaitOnTXEFlagUntilTimeout+0x3a>

080053d4 <I2C_RequestMemoryWrite>:
{
 80053d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80053d8:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80053da:	6802      	ldr	r2, [r0, #0]
{
 80053dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80053de:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80053e0:	6813      	ldr	r3, [r2, #0]
 80053e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053e6:	6013      	str	r3, [r2, #0]
{
 80053e8:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053ea:	9600      	str	r6, [sp, #0]
 80053ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ee:	2200      	movs	r2, #0
 80053f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80053f4:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053f6:	f7ff ff9a 	bl	800532e <I2C_WaitOnFlagUntilTimeout>
 80053fa:	b968      	cbnz	r0, 8005418 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053fc:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005400:	491c      	ldr	r1, [pc, #112]	; (8005474 <I2C_RequestMemoryWrite+0xa0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005402:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8005406:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005408:	4620      	mov	r0, r4
 800540a:	4633      	mov	r3, r6
 800540c:	f7ff ff5b 	bl	80052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005410:	b130      	cbz	r0, 8005420 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005412:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005414:	2b04      	cmp	r3, #4
 8005416:	d018      	beq.n	800544a <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8005418:	2003      	movs	r0, #3
}
 800541a:	b004      	add	sp, #16
 800541c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	9003      	str	r0, [sp, #12]
 8005424:	695a      	ldr	r2, [r3, #20]
 8005426:	9203      	str	r2, [sp, #12]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800542c:	4632      	mov	r2, r6
 800542e:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005430:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005432:	4620      	mov	r0, r4
 8005434:	f7ff ffa8 	bl	8005388 <I2C_WaitOnTXEFlagUntilTimeout>
 8005438:	b148      	cbz	r0, 800544e <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800543a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800543c:	2b04      	cmp	r3, #4
 800543e:	d1eb      	bne.n	8005418 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005440:	6822      	ldr	r2, [r4, #0]
 8005442:	6813      	ldr	r3, [r2, #0]
 8005444:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005448:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800544a:	2001      	movs	r0, #1
 800544c:	e7e5      	b.n	800541a <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800544e:	f1b8 0f01 	cmp.w	r8, #1
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	d102      	bne.n	800545c <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005456:	b2ed      	uxtb	r5, r5
 8005458:	611d      	str	r5, [r3, #16]
 800545a:	e7de      	b.n	800541a <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800545c:	0a2a      	lsrs	r2, r5, #8
 800545e:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005460:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005462:	4632      	mov	r2, r6
 8005464:	4620      	mov	r0, r4
 8005466:	f7ff ff8f 	bl	8005388 <I2C_WaitOnTXEFlagUntilTimeout>
 800546a:	2800      	cmp	r0, #0
 800546c:	d1e5      	bne.n	800543a <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	e7f1      	b.n	8005456 <I2C_RequestMemoryWrite+0x82>
 8005472:	bf00      	nop
 8005474:	00010002 	.word	0x00010002

08005478 <I2C_RequestMemoryRead>:
{
 8005478:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800547c:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800547e:	6803      	ldr	r3, [r0, #0]
{
 8005480:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005482:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800548a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005492:	601a      	str	r2, [r3, #0]
{
 8005494:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005496:	9500      	str	r5, [sp, #0]
 8005498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800549a:	2200      	movs	r2, #0
 800549c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80054a0:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054a2:	f7ff ff44 	bl	800532e <I2C_WaitOnFlagUntilTimeout>
 80054a6:	b980      	cbnz	r0, 80054ca <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054a8:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054aa:	492f      	ldr	r1, [pc, #188]	; (8005568 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054ac:	b2ff      	uxtb	r7, r7
 80054ae:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 80054b2:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054b4:	4620      	mov	r0, r4
 80054b6:	462b      	mov	r3, r5
 80054b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054ba:	f7ff ff04 	bl	80052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054be:	b140      	cbz	r0, 80054d2 <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d101      	bne.n	80054ca <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 80054c6:	2001      	movs	r0, #1
 80054c8:	e000      	b.n	80054cc <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 80054ca:	2003      	movs	r0, #3
}
 80054cc:	b004      	add	sp, #16
 80054ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	9003      	str	r0, [sp, #12]
 80054d6:	695a      	ldr	r2, [r3, #20]
 80054d8:	9203      	str	r2, [sp, #12]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054de:	462a      	mov	r2, r5
 80054e0:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e2:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e4:	4620      	mov	r0, r4
 80054e6:	f7ff ff4f 	bl	8005388 <I2C_WaitOnTXEFlagUntilTimeout>
 80054ea:	b140      	cbz	r0, 80054fe <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d1eb      	bne.n	80054ca <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80054f2:	6822      	ldr	r2, [r4, #0]
 80054f4:	6813      	ldr	r3, [r2, #0]
 80054f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	e7e3      	b.n	80054c6 <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054fe:	f1b8 0f01 	cmp.w	r8, #1
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	d124      	bne.n	8005550 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005506:	b2f6      	uxtb	r6, r6
 8005508:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800550a:	462a      	mov	r2, r5
 800550c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800550e:	4620      	mov	r0, r4
 8005510:	f7ff ff3a 	bl	8005388 <I2C_WaitOnTXEFlagUntilTimeout>
 8005514:	4602      	mov	r2, r0
 8005516:	2800      	cmp	r0, #0
 8005518:	d1e8      	bne.n	80054ec <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800551a:	6821      	ldr	r1, [r4, #0]
 800551c:	680b      	ldr	r3, [r1, #0]
 800551e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005522:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005524:	4620      	mov	r0, r4
 8005526:	9500      	str	r5, [sp, #0]
 8005528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800552a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800552e:	f7ff fefe 	bl	800532e <I2C_WaitOnFlagUntilTimeout>
 8005532:	2800      	cmp	r0, #0
 8005534:	d1c9      	bne.n	80054ca <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005536:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800553a:	490b      	ldr	r1, [pc, #44]	; (8005568 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800553c:	f047 0701 	orr.w	r7, r7, #1
 8005540:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005542:	4620      	mov	r0, r4
 8005544:	462b      	mov	r3, r5
 8005546:	f7ff febe 	bl	80052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800554a:	2800      	cmp	r0, #0
 800554c:	d1b8      	bne.n	80054c0 <I2C_RequestMemoryRead+0x48>
 800554e:	e7bd      	b.n	80054cc <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005550:	0a32      	lsrs	r2, r6, #8
 8005552:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005554:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005556:	462a      	mov	r2, r5
 8005558:	4620      	mov	r0, r4
 800555a:	f7ff ff15 	bl	8005388 <I2C_WaitOnTXEFlagUntilTimeout>
 800555e:	2800      	cmp	r0, #0
 8005560:	d1c4      	bne.n	80054ec <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	e7cf      	b.n	8005506 <I2C_RequestMemoryRead+0x8e>
 8005566:	bf00      	nop
 8005568:	00010002 	.word	0x00010002

0800556c <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	4604      	mov	r4, r0
 8005570:	460d      	mov	r5, r1
 8005572:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005574:	6820      	ldr	r0, [r4, #0]
 8005576:	6943      	ldr	r3, [r0, #20]
 8005578:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800557c:	d001      	beq.n	8005582 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800557e:	2000      	movs	r0, #0
 8005580:	e00d      	b.n	800559e <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005582:	6942      	ldr	r2, [r0, #20]
 8005584:	06d2      	lsls	r2, r2, #27
 8005586:	d50b      	bpl.n	80055a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005588:	f06f 0210 	mvn.w	r2, #16
 800558c:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 800558e:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005590:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005592:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005596:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005598:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 800559a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 800559e:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80055a0:	b95d      	cbnz	r5, 80055ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055a4:	f043 0320 	orr.w	r3, r3, #32
 80055a8:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80055aa:	2320      	movs	r3, #32
 80055ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 80055b0:	2300      	movs	r3, #0
 80055b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80055b6:	2003      	movs	r0, #3
 80055b8:	e7f1      	b.n	800559e <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80055ba:	f7fe fd01 	bl	8003fc0 <HAL_GetTick>
 80055be:	1b80      	subs	r0, r0, r6
 80055c0:	42a8      	cmp	r0, r5
 80055c2:	d9d7      	bls.n	8005574 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80055c4:	e7ed      	b.n	80055a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

080055c6 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80055c6:	b570      	push	{r4, r5, r6, lr}
 80055c8:	4604      	mov	r4, r0
 80055ca:	460d      	mov	r5, r1
 80055cc:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	075b      	lsls	r3, r3, #29
 80055d4:	d501      	bpl.n	80055da <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80055d6:	2000      	movs	r0, #0
 80055d8:	e012      	b.n	8005600 <I2C_WaitOnBTFFlagUntilTimeout+0x3a>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055da:	4620      	mov	r0, r4
 80055dc:	f7ff fe5e 	bl	800529c <I2C_IsAcknowledgeFailed>
 80055e0:	b9a8      	cbnz	r0, 800560e <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80055e2:	1c6a      	adds	r2, r5, #1
 80055e4:	d0f3      	beq.n	80055ce <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80055e6:	b965      	cbnz	r5, 8005602 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055ea:	f043 0320 	orr.w	r3, r3, #32
 80055ee:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80055f0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80055f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80055fa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80055fe:	2003      	movs	r0, #3
}
 8005600:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005602:	f7fe fcdd 	bl	8003fc0 <HAL_GetTick>
 8005606:	1b80      	subs	r0, r0, r6
 8005608:	42a8      	cmp	r0, r5
 800560a:	d9e0      	bls.n	80055ce <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 800560c:	e7ec      	b.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800560e:	2001      	movs	r0, #1
 8005610:	e7f6      	b.n	8005600 <I2C_WaitOnBTFFlagUntilTimeout+0x3a>

08005612 <HAL_I2C_MspInit>:
}
 8005612:	4770      	bx	lr

08005614 <HAL_I2C_Init>:
{
 8005614:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8005616:	4604      	mov	r4, r0
 8005618:	2800      	cmp	r0, #0
 800561a:	f000 80c1 	beq.w	80057a0 <HAL_I2C_Init+0x18c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800561e:	6803      	ldr	r3, [r0, #0]
 8005620:	4a60      	ldr	r2, [pc, #384]	; (80057a4 <HAL_I2C_Init+0x190>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d00c      	beq.n	8005640 <HAL_I2C_Init+0x2c>
 8005626:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800562a:	4293      	cmp	r3, r2
 800562c:	d008      	beq.n	8005640 <HAL_I2C_Init+0x2c>
 800562e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005632:	4293      	cmp	r3, r2
 8005634:	d004      	beq.n	8005640 <HAL_I2C_Init+0x2c>
 8005636:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 800563a:	485b      	ldr	r0, [pc, #364]	; (80057a8 <HAL_I2C_Init+0x194>)
 800563c:	f005 fcf7 	bl	800b02e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8005640:	6863      	ldr	r3, [r4, #4]
 8005642:	4a5a      	ldr	r2, [pc, #360]	; (80057ac <HAL_I2C_Init+0x198>)
 8005644:	3b01      	subs	r3, #1
 8005646:	4293      	cmp	r3, r2
 8005648:	d904      	bls.n	8005654 <HAL_I2C_Init+0x40>
 800564a:	f240 116f 	movw	r1, #367	; 0x16f
 800564e:	4856      	ldr	r0, [pc, #344]	; (80057a8 <HAL_I2C_Init+0x194>)
 8005650:	f005 fced 	bl	800b02e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8005654:	68a3      	ldr	r3, [r4, #8]
 8005656:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800565a:	d004      	beq.n	8005666 <HAL_I2C_Init+0x52>
 800565c:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8005660:	4851      	ldr	r0, [pc, #324]	; (80057a8 <HAL_I2C_Init+0x194>)
 8005662:	f005 fce4 	bl	800b02e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8005666:	68e3      	ldr	r3, [r4, #12]
 8005668:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800566c:	f023 0303 	bic.w	r3, r3, #3
 8005670:	b123      	cbz	r3, 800567c <HAL_I2C_Init+0x68>
 8005672:	f240 1171 	movw	r1, #369	; 0x171
 8005676:	484c      	ldr	r0, [pc, #304]	; (80057a8 <HAL_I2C_Init+0x194>)
 8005678:	f005 fcd9 	bl	800b02e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800567c:	6923      	ldr	r3, [r4, #16]
 800567e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005682:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005686:	d004      	beq.n	8005692 <HAL_I2C_Init+0x7e>
 8005688:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800568c:	4846      	ldr	r0, [pc, #280]	; (80057a8 <HAL_I2C_Init+0x194>)
 800568e:	f005 fcce 	bl	800b02e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8005692:	6963      	ldr	r3, [r4, #20]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d904      	bls.n	80056a2 <HAL_I2C_Init+0x8e>
 8005698:	f240 1173 	movw	r1, #371	; 0x173
 800569c:	4842      	ldr	r0, [pc, #264]	; (80057a8 <HAL_I2C_Init+0x194>)
 800569e:	f005 fcc6 	bl	800b02e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80056a2:	69a3      	ldr	r3, [r4, #24]
 80056a4:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 80056a8:	d004      	beq.n	80056b4 <HAL_I2C_Init+0xa0>
 80056aa:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80056ae:	483e      	ldr	r0, [pc, #248]	; (80057a8 <HAL_I2C_Init+0x194>)
 80056b0:	f005 fcbd 	bl	800b02e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80056b4:	69e3      	ldr	r3, [r4, #28]
 80056b6:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 80056ba:	d004      	beq.n	80056c6 <HAL_I2C_Init+0xb2>
 80056bc:	f240 1175 	movw	r1, #373	; 0x175
 80056c0:	4839      	ldr	r0, [pc, #228]	; (80057a8 <HAL_I2C_Init+0x194>)
 80056c2:	f005 fcb4 	bl	800b02e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80056c6:	6a23      	ldr	r3, [r4, #32]
 80056c8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80056cc:	d004      	beq.n	80056d8 <HAL_I2C_Init+0xc4>
 80056ce:	f44f 71bb 	mov.w	r1, #374	; 0x176
 80056d2:	4835      	ldr	r0, [pc, #212]	; (80057a8 <HAL_I2C_Init+0x194>)
 80056d4:	f005 fcab 	bl	800b02e <assert_failed>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80056d8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80056dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80056e0:	b923      	cbnz	r3, 80056ec <HAL_I2C_Init+0xd8>
    hi2c->Lock = HAL_UNLOCKED;
 80056e2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80056e6:	4620      	mov	r0, r4
 80056e8:	f7ff ff93 	bl	8005612 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 80056ec:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80056ee:	4e30      	ldr	r6, [pc, #192]	; (80057b0 <HAL_I2C_Init+0x19c>)
  freqrange = I2C_FREQRANGE(pclk1);
 80056f0:	4d30      	ldr	r5, [pc, #192]	; (80057b4 <HAL_I2C_Init+0x1a0>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 80056f2:	2324      	movs	r3, #36	; 0x24
 80056f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80056f8:	6813      	ldr	r3, [r2, #0]
 80056fa:	f023 0301 	bic.w	r3, r3, #1
 80056fe:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005700:	f001 f8ea 	bl	80068d8 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8005704:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8005706:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8005708:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800570c:	42b3      	cmp	r3, r6
 800570e:	bf84      	itt	hi
 8005710:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8005714:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8005716:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8005718:	bf91      	iteee	ls
 800571a:	1c69      	addls	r1, r5, #1
 800571c:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8005720:	fbb1 f1f5 	udivhi	r1, r1, r5
 8005724:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8005726:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8005728:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800572a:	d821      	bhi.n	8005770 <HAL_I2C_Init+0x15c>
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005732:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8005736:	2b03      	cmp	r3, #3
 8005738:	bf98      	it	ls
 800573a:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800573c:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8005740:	430b      	orrs	r3, r1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8005742:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005744:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8005746:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 800574a:	430b      	orrs	r3, r1
 800574c:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800574e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8005752:	430b      	orrs	r3, r1
 8005754:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8005756:	6813      	ldr	r3, [r2, #0]
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800575e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8005760:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005762:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005764:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005768:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800576a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 800576e:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8005770:	68a1      	ldr	r1, [r4, #8]
 8005772:	b949      	cbnz	r1, 8005788 <HAL_I2C_Init+0x174>
 8005774:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005778:	fbb0 f0f3 	udiv	r0, r0, r3
 800577c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8005780:	b163      	cbz	r3, 800579c <HAL_I2C_Init+0x188>
 8005782:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8005786:	e7d9      	b.n	800573c <HAL_I2C_Init+0x128>
 8005788:	2119      	movs	r1, #25
 800578a:	434b      	muls	r3, r1
 800578c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005790:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8005794:	b113      	cbz	r3, 800579c <HAL_I2C_Init+0x188>
 8005796:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800579a:	e7cf      	b.n	800573c <HAL_I2C_Init+0x128>
 800579c:	2001      	movs	r0, #1
 800579e:	e7cd      	b.n	800573c <HAL_I2C_Init+0x128>
    return HAL_ERROR;
 80057a0:	2001      	movs	r0, #1
 80057a2:	e7e4      	b.n	800576e <HAL_I2C_Init+0x15a>
 80057a4:	40005400 	.word	0x40005400
 80057a8:	0800c8dc 	.word	0x0800c8dc
 80057ac:	00061a7f 	.word	0x00061a7f
 80057b0:	000186a0 	.word	0x000186a0
 80057b4:	000f4240 	.word	0x000f4240

080057b8 <HAL_I2C_MspDeInit>:
 80057b8:	4770      	bx	lr
	...

080057bc <HAL_I2C_DeInit>:
{
 80057bc:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 80057be:	4604      	mov	r4, r0
 80057c0:	b328      	cbz	r0, 800580e <HAL_I2C_DeInit+0x52>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80057c2:	6803      	ldr	r3, [r0, #0]
 80057c4:	4a13      	ldr	r2, [pc, #76]	; (8005814 <HAL_I2C_DeInit+0x58>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00c      	beq.n	80057e4 <HAL_I2C_DeInit+0x28>
 80057ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d008      	beq.n	80057e4 <HAL_I2C_DeInit+0x28>
 80057d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d004      	beq.n	80057e4 <HAL_I2C_DeInit+0x28>
 80057da:	f240 11bd 	movw	r1, #445	; 0x1bd
 80057de:	480e      	ldr	r0, [pc, #56]	; (8005818 <HAL_I2C_DeInit+0x5c>)
 80057e0:	f005 fc25 	bl	800b02e <assert_failed>
  __HAL_I2C_DISABLE(hi2c);
 80057e4:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80057e6:	2324      	movs	r3, #36	; 0x24
 80057e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80057ec:	6813      	ldr	r3, [r2, #0]
 80057ee:	f023 0301 	bic.w	r3, r3, #1
  HAL_I2C_MspDeInit(hi2c);
 80057f2:	4620      	mov	r0, r4
  __HAL_I2C_DISABLE(hi2c);
 80057f4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80057f6:	f7ff ffdf 	bl	80057b8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80057fa:	2000      	movs	r0, #0
 80057fc:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 80057fe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005802:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005806:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005808:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 800580c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800580e:	2001      	movs	r0, #1
 8005810:	e7fc      	b.n	800580c <HAL_I2C_DeInit+0x50>
 8005812:	bf00      	nop
 8005814:	40005400 	.word	0x40005400
 8005818:	0800c8dc 	.word	0x0800c8dc

0800581c <HAL_I2C_Mem_Write>:
{
 800581c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005820:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005822:	4698      	mov	r8, r3
 8005824:	4604      	mov	r4, r0
 8005826:	4689      	mov	r9, r1
 8005828:	4692      	mov	sl, r2
  tickstart = HAL_GetTick();
 800582a:	f7fe fbc9 	bl	8003fc0 <HAL_GetTick>
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800582e:	f1b8 0f01 	cmp.w	r8, #1
  tickstart = HAL_GetTick();
 8005832:	4605      	mov	r5, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8005834:	d007      	beq.n	8005846 <HAL_I2C_Mem_Write+0x2a>
 8005836:	f1b8 0f10 	cmp.w	r8, #16
 800583a:	d004      	beq.n	8005846 <HAL_I2C_Mem_Write+0x2a>
 800583c:	f640 116b 	movw	r1, #2411	; 0x96b
 8005840:	4844      	ldr	r0, [pc, #272]	; (8005954 <HAL_I2C_Mem_Write+0x138>)
 8005842:	f005 fbf4 	bl	800b02e <assert_failed>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005846:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800584a:	2b20      	cmp	r3, #32
 800584c:	d003      	beq.n	8005856 <HAL_I2C_Mem_Write+0x3a>
    return HAL_BUSY;
 800584e:	2002      	movs	r0, #2
}
 8005850:	b002      	add	sp, #8
 8005852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005856:	9500      	str	r5, [sp, #0]
 8005858:	2319      	movs	r3, #25
 800585a:	2201      	movs	r2, #1
 800585c:	493e      	ldr	r1, [pc, #248]	; (8005958 <HAL_I2C_Mem_Write+0x13c>)
 800585e:	4620      	mov	r0, r4
 8005860:	f7ff fd65 	bl	800532e <I2C_WaitOnFlagUntilTimeout>
 8005864:	2800      	cmp	r0, #0
 8005866:	d1f2      	bne.n	800584e <HAL_I2C_Mem_Write+0x32>
    __HAL_LOCK(hi2c);
 8005868:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800586c:	2b01      	cmp	r3, #1
 800586e:	d0ee      	beq.n	800584e <HAL_I2C_Mem_Write+0x32>
 8005870:	2301      	movs	r3, #1
 8005872:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800587c:	bf5e      	ittt	pl
 800587e:	681a      	ldrpl	r2, [r3, #0]
 8005880:	f042 0201 	orrpl.w	r2, r2, #1
 8005884:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800588c:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800588e:	2321      	movs	r3, #33	; 0x21
 8005890:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005894:	2340      	movs	r3, #64	; 0x40
 8005896:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 800589a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800589c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800589e:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 80058a0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058a4:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80058a6:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058a8:	4b2c      	ldr	r3, [pc, #176]	; (800595c <HAL_I2C_Mem_Write+0x140>)
 80058aa:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80058ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058ae:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058b0:	e9cd 6500 	strd	r6, r5, [sp]
 80058b4:	4643      	mov	r3, r8
 80058b6:	4652      	mov	r2, sl
 80058b8:	4649      	mov	r1, r9
 80058ba:	4620      	mov	r0, r4
 80058bc:	f7ff fd8a 	bl	80053d4 <I2C_RequestMemoryWrite>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d02a      	beq.n	800591a <HAL_I2C_Mem_Write+0xfe>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80058c6:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d107      	bne.n	80058de <HAL_I2C_Mem_Write+0xc2>
        return HAL_ERROR;
 80058ce:	2001      	movs	r0, #1
 80058d0:	e7be      	b.n	8005850 <HAL_I2C_Mem_Write+0x34>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058d2:	f7ff fd59 	bl	8005388 <I2C_WaitOnTXEFlagUntilTimeout>
 80058d6:	b120      	cbz	r0, 80058e2 <HAL_I2C_Mem_Write+0xc6>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058da:	2b04      	cmp	r3, #4
 80058dc:	d034      	beq.n	8005948 <HAL_I2C_Mem_Write+0x12c>
          return HAL_TIMEOUT;
 80058de:	2003      	movs	r0, #3
 80058e0:	e7b6      	b.n	8005850 <HAL_I2C_Mem_Write+0x34>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80058e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80058e4:	6827      	ldr	r7, [r4, #0]
      hi2c->XferSize--;
 80058e6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80058e8:	1c4b      	adds	r3, r1, #1
 80058ea:	6263      	str	r3, [r4, #36]	; 0x24
 80058ec:	780b      	ldrb	r3, [r1, #0]
 80058ee:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 80058f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058f8:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 80058fa:	1e50      	subs	r0, r2, #1
 80058fc:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058fe:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8005900:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005902:	d50a      	bpl.n	800591a <HAL_I2C_Mem_Write+0xfe>
 8005904:	b148      	cbz	r0, 800591a <HAL_I2C_Mem_Write+0xfe>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8005906:	1c8b      	adds	r3, r1, #2
 8005908:	6263      	str	r3, [r4, #36]	; 0x24
 800590a:	784b      	ldrb	r3, [r1, #1]
 800590c:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 800590e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005910:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8005912:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8005914:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8005916:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005918:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 800591a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800591c:	462a      	mov	r2, r5
 800591e:	4631      	mov	r1, r6
 8005920:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1d5      	bne.n	80058d2 <HAL_I2C_Mem_Write+0xb6>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005926:	f7ff fe4e 	bl	80055c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800592a:	2800      	cmp	r0, #0
 800592c:	d1d4      	bne.n	80058d8 <HAL_I2C_Mem_Write+0xbc>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800592e:	6822      	ldr	r2, [r4, #0]
 8005930:	6813      	ldr	r3, [r2, #0]
 8005932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005936:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005938:	2320      	movs	r3, #32
 800593a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800593e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005942:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8005946:	e783      	b.n	8005850 <HAL_I2C_Mem_Write+0x34>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005948:	6822      	ldr	r2, [r4, #0]
 800594a:	6813      	ldr	r3, [r2, #0]
 800594c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	e7bc      	b.n	80058ce <HAL_I2C_Mem_Write+0xb2>
 8005954:	0800c8dc 	.word	0x0800c8dc
 8005958:	00100002 	.word	0x00100002
 800595c:	ffff0000 	.word	0xffff0000

08005960 <HAL_I2C_Mem_Read>:
{
 8005960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005964:	b086      	sub	sp, #24
 8005966:	461d      	mov	r5, r3
 8005968:	4604      	mov	r4, r0
 800596a:	4689      	mov	r9, r1
 800596c:	4692      	mov	sl, r2
 800596e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8005970:	f7fe fb26 	bl	8003fc0 <HAL_GetTick>
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8005974:	2d01      	cmp	r5, #1
  tickstart = HAL_GetTick();
 8005976:	4606      	mov	r6, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8005978:	d006      	beq.n	8005988 <HAL_I2C_Mem_Read+0x28>
 800597a:	2d10      	cmp	r5, #16
 800597c:	d004      	beq.n	8005988 <HAL_I2C_Mem_Read+0x28>
 800597e:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 8005982:	487f      	ldr	r0, [pc, #508]	; (8005b80 <HAL_I2C_Mem_Read+0x220>)
 8005984:	f005 fb53 	bl	800b02e <assert_failed>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005988:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800598c:	2b20      	cmp	r3, #32
 800598e:	d004      	beq.n	800599a <HAL_I2C_Mem_Read+0x3a>
    return HAL_BUSY;
 8005990:	2502      	movs	r5, #2
}
 8005992:	4628      	mov	r0, r5
 8005994:	b006      	add	sp, #24
 8005996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800599a:	9600      	str	r6, [sp, #0]
 800599c:	2319      	movs	r3, #25
 800599e:	2201      	movs	r2, #1
 80059a0:	4978      	ldr	r1, [pc, #480]	; (8005b84 <HAL_I2C_Mem_Read+0x224>)
 80059a2:	4620      	mov	r0, r4
 80059a4:	f7ff fcc3 	bl	800532e <I2C_WaitOnFlagUntilTimeout>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d1f1      	bne.n	8005990 <HAL_I2C_Mem_Read+0x30>
    __HAL_LOCK(hi2c);
 80059ac:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d0ed      	beq.n	8005990 <HAL_I2C_Mem_Read+0x30>
 80059b4:	2301      	movs	r3, #1
 80059b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80059c0:	bf5e      	ittt	pl
 80059c2:	681a      	ldrpl	r2, [r3, #0]
 80059c4:	f042 0201 	orrpl.w	r2, r2, #1
 80059c8:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059d0:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059d2:	2322      	movs	r3, #34	; 0x22
 80059d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059d8:	2340      	movs	r3, #64	; 0x40
 80059da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 80059de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059e0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059e2:	f04f 0800 	mov.w	r8, #0
    hi2c->XferCount   = Size;
 80059e6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059ea:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80059ee:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059f0:	4b65      	ldr	r3, [pc, #404]	; (8005b88 <HAL_I2C_Mem_Read+0x228>)
 80059f2:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80059f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059f6:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059f8:	e9cd 7600 	strd	r7, r6, [sp]
 80059fc:	462b      	mov	r3, r5
 80059fe:	4652      	mov	r2, sl
 8005a00:	4649      	mov	r1, r9
 8005a02:	4620      	mov	r0, r4
 8005a04:	f7ff fd38 	bl	8005478 <I2C_RequestMemoryRead>
 8005a08:	4605      	mov	r5, r0
 8005a0a:	b130      	cbz	r0, 8005a1a <HAL_I2C_Mem_Read+0xba>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005a0e:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d13a      	bne.n	8005a8c <HAL_I2C_Mem_Read+0x12c>
              return HAL_ERROR;
 8005a16:	2501      	movs	r5, #1
 8005a18:	e7bb      	b.n	8005992 <HAL_I2C_Mem_Read+0x32>
    if(hi2c->XferSize == 0U)
 8005a1a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	b992      	cbnz	r2, 8005a46 <HAL_I2C_Mem_Read+0xe6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a20:	9002      	str	r0, [sp, #8]
 8005a22:	695a      	ldr	r2, [r3, #20]
 8005a24:	9202      	str	r2, [sp, #8]
 8005a26:	699a      	ldr	r2, [r3, #24]
 8005a28:	9202      	str	r2, [sp, #8]
 8005a2a:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a32:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a34:	2320      	movs	r3, #32
 8005a36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8005a40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8005a44:	e7a5      	b.n	8005992 <HAL_I2C_Mem_Read+0x32>
    else if(hi2c->XferSize == 1U)
 8005a46:	2a01      	cmp	r2, #1
 8005a48:	d122      	bne.n	8005a90 <HAL_I2C_Mem_Read+0x130>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a50:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a52:	9003      	str	r0, [sp, #12]
 8005a54:	695a      	ldr	r2, [r3, #20]
 8005a56:	9203      	str	r2, [sp, #12]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	9203      	str	r2, [sp, #12]
 8005a5c:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a64:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a66:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8005b8c <HAL_I2C_Mem_Read+0x22c>
    while(hi2c->XferSize > 0U)
 8005a6a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0e1      	beq.n	8005a34 <HAL_I2C_Mem_Read+0xd4>
      if(hi2c->XferSize <= 3U)
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d86b      	bhi.n	8005b4c <HAL_I2C_Mem_Read+0x1ec>
        if(hi2c->XferSize== 1U)
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d123      	bne.n	8005ac0 <HAL_I2C_Mem_Read+0x160>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8005a78:	4632      	mov	r2, r6
 8005a7a:	4639      	mov	r1, r7
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f7ff fd75 	bl	800556c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d039      	beq.n	8005afa <HAL_I2C_Mem_Read+0x19a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8005a86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a88:	2b20      	cmp	r3, #32
 8005a8a:	d1c4      	bne.n	8005a16 <HAL_I2C_Mem_Read+0xb6>
              return HAL_TIMEOUT;
 8005a8c:	2503      	movs	r5, #3
 8005a8e:	e780      	b.n	8005992 <HAL_I2C_Mem_Read+0x32>
    else if(hi2c->XferSize == 2U)
 8005a90:	2a02      	cmp	r2, #2
 8005a92:	d10e      	bne.n	8005ab2 <HAL_I2C_Mem_Read+0x152>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a9a:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aa2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aa4:	9004      	str	r0, [sp, #16]
 8005aa6:	695a      	ldr	r2, [r3, #20]
 8005aa8:	9204      	str	r2, [sp, #16]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	9304      	str	r3, [sp, #16]
 8005aae:	9b04      	ldr	r3, [sp, #16]
 8005ab0:	e7d9      	b.n	8005a66 <HAL_I2C_Mem_Read+0x106>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ab2:	9005      	str	r0, [sp, #20]
 8005ab4:	695a      	ldr	r2, [r3, #20]
 8005ab6:	9205      	str	r2, [sp, #20]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	9305      	str	r3, [sp, #20]
 8005abc:	9b05      	ldr	r3, [sp, #20]
 8005abe:	e7d2      	b.n	8005a66 <HAL_I2C_Mem_Read+0x106>
        else if(hi2c->XferSize == 2U)
 8005ac0:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ac2:	9600      	str	r6, [sp, #0]
 8005ac4:	463b      	mov	r3, r7
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	4641      	mov	r1, r8
 8005acc:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8005ace:	d122      	bne.n	8005b16 <HAL_I2C_Mem_Read+0x1b6>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ad0:	f7ff fc2d 	bl	800532e <I2C_WaitOnFlagUntilTimeout>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d1d9      	bne.n	8005a8c <HAL_I2C_Mem_Read+0x12c>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ae0:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ae6:	1c59      	adds	r1, r3, #1
 8005ae8:	6261      	str	r1, [r4, #36]	; 0x24
 8005aea:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8005aec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005aee:	3b01      	subs	r3, #1
 8005af0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005af2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005afa:	6823      	ldr	r3, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b00:	1c59      	adds	r1, r3, #1
 8005b02:	6261      	str	r1, [r4, #36]	; 0x24
 8005b04:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8005b06:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005b0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005b14:	e7a9      	b.n	8005a6a <HAL_I2C_Mem_Read+0x10a>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b16:	f7ff fc0a 	bl	800532e <I2C_WaitOnFlagUntilTimeout>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	d1b5      	bne.n	8005a8c <HAL_I2C_Mem_Read+0x12c>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	6819      	ldr	r1, [r3, #0]
 8005b24:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005b28:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005b2a:	6919      	ldr	r1, [r3, #16]
 8005b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b2e:	1c58      	adds	r0, r3, #1
 8005b30:	6260      	str	r0, [r4, #36]	; 0x24
 8005b32:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8005b34:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b36:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005b3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b44:	4641      	mov	r1, r8
 8005b46:	463b      	mov	r3, r7
 8005b48:	4620      	mov	r0, r4
 8005b4a:	e7c1      	b.n	8005ad0 <HAL_I2C_Mem_Read+0x170>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b4c:	4632      	mov	r2, r6
 8005b4e:	4639      	mov	r1, r7
 8005b50:	4620      	mov	r0, r4
 8005b52:	f7ff fd0b 	bl	800556c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d195      	bne.n	8005a86 <HAL_I2C_Mem_Read+0x126>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	691a      	ldr	r2, [r3, #16]
 8005b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b60:	1c59      	adds	r1, r3, #1
 8005b62:	6261      	str	r1, [r4, #36]	; 0x24
 8005b64:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8005b66:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005b6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	695a      	ldr	r2, [r3, #20]
 8005b78:	0752      	lsls	r2, r2, #29
 8005b7a:	f57f af76 	bpl.w	8005a6a <HAL_I2C_Mem_Read+0x10a>
 8005b7e:	e7bd      	b.n	8005afc <HAL_I2C_Mem_Read+0x19c>
 8005b80:	0800c8dc 	.word	0x0800c8dc
 8005b84:	00100002 	.word	0x00100002
 8005b88:	ffff0000 	.word	0xffff0000
 8005b8c:	00010004 	.word	0x00010004

08005b90 <HAL_I2C_GetState>:
  return hi2c->State;
 8005b90:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8005b94:	4770      	bx	lr

08005b96 <HAL_I2S_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2s);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_MspInit could be implemented in the user file
   */
}
 8005b96:	4770      	bx	lr

08005b98 <HAL_I2S_Transmit_DMA>:
  * @note The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *       between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4604      	mov	r4, r0
  uint32_t *tmp = NULL;
  uint32_t tmp1 = 0U;

  if((pData == NULL) || (Size == 0U))
 8005b9c:	2900      	cmp	r1, #0
 8005b9e:	d044      	beq.n	8005c2a <HAL_I2S_Transmit_DMA+0x92>
 8005ba0:	2a00      	cmp	r2, #0
 8005ba2:	d042      	beq.n	8005c2a <HAL_I2S_Transmit_DMA+0x92>
  {
    return  HAL_ERROR;
  }

  if(hi2s->State == HAL_I2S_STATE_READY)
 8005ba4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d001      	beq.n	8005bb0 <HAL_I2S_Transmit_DMA+0x18>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8005bac:	2002      	movs	r0, #2
  }
}
 8005bae:	bd38      	pop	{r3, r4, r5, pc}
    tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005bb0:	6805      	ldr	r5, [r0, #0]
    hi2s->pTxBuffPtr = pData;
 8005bb2:	6241      	str	r1, [r0, #36]	; 0x24
    tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005bb4:	69eb      	ldr	r3, [r5, #28]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
    if((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d001      	beq.n	8005bc2 <HAL_I2S_Transmit_DMA+0x2a>
 8005bbe:	2b05      	cmp	r3, #5
 8005bc0:	d130      	bne.n	8005c24 <HAL_I2S_Transmit_DMA+0x8c>
      hi2s->TxXferSize  = (Size << 1U);
 8005bc2:	0053      	lsls	r3, r2, #1
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2s->TxXferCount = (Size << 1U);
 8005bc8:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_LOCK(hi2s);
 8005bca:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d0ec      	beq.n	8005bac <HAL_I2S_Transmit_DMA+0x14>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005bdc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2s->State     = HAL_I2S_STATE_BUSY_TX;
 8005bde:	2303      	movs	r3, #3
 8005be0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005be4:	4b12      	ldr	r3, [pc, #72]	; (8005c30 <HAL_I2S_Transmit_DMA+0x98>)
 8005be6:	6403      	str	r3, [r0, #64]	; 0x40
    hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005be8:	4b12      	ldr	r3, [pc, #72]	; (8005c34 <HAL_I2S_Transmit_DMA+0x9c>)
 8005bea:	63c3      	str	r3, [r0, #60]	; 0x3c
    hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005bec:	4b12      	ldr	r3, [pc, #72]	; (8005c38 <HAL_I2S_Transmit_DMA+0xa0>)
 8005bee:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t*)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8005bf0:	f105 020c 	add.w	r2, r5, #12
 8005bf4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005bf6:	f7fe fc49 	bl	800448c <HAL_DMA_Start_IT>
    if((hi2s->Instance->I2SCFGR &SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	69da      	ldr	r2, [r3, #28]
 8005bfe:	0551      	lsls	r1, r2, #21
      __HAL_I2S_ENABLE(hi2s);
 8005c00:	bf5e      	ittt	pl
 8005c02:	69da      	ldrpl	r2, [r3, #28]
 8005c04:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8005c08:	61da      	strpl	r2, [r3, #28]
    if((hi2s->Instance->CR2 & SPI_CR2_TXDMAEN) != SPI_CR2_TXDMAEN)
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	0792      	lsls	r2, r2, #30
      SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c0e:	bf58      	it	pl
 8005c10:	685a      	ldrpl	r2, [r3, #4]
    __HAL_UNLOCK(hi2s);
 8005c12:	f04f 0000 	mov.w	r0, #0
      SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c16:	bf5c      	itt	pl
 8005c18:	f042 0202 	orrpl.w	r2, r2, #2
 8005c1c:	605a      	strpl	r2, [r3, #4]
    __HAL_UNLOCK(hi2s);
 8005c1e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    return HAL_OK;
 8005c22:	e7c4      	b.n	8005bae <HAL_I2S_Transmit_DMA+0x16>
      hi2s->TxXferSize  = Size;
 8005c24:	8502      	strh	r2, [r0, #40]	; 0x28
      hi2s->TxXferCount = Size;
 8005c26:	8542      	strh	r2, [r0, #42]	; 0x2a
 8005c28:	e7cf      	b.n	8005bca <HAL_I2S_Transmit_DMA+0x32>
    return  HAL_ERROR;
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	e7bf      	b.n	8005bae <HAL_I2S_Transmit_DMA+0x16>
 8005c2e:	bf00      	nop
 8005c30:	08005ce9 	.word	0x08005ce9
 8005c34:	08005cf3 	.word	0x08005cf3
 8005c38:	08006009 	.word	0x08006009

08005c3c <HAL_I2S_DMAStop>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005c3c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005c40:	2b01      	cmp	r3, #1
{
 8005c42:	b570      	push	{r4, r5, r6, lr}
 8005c44:	4604      	mov	r4, r0
  __HAL_LOCK(hi2s);
 8005c46:	d049      	beq.n	8005cdc <HAL_I2S_DMAStop+0xa0>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005c4e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005c52:	6803      	ldr	r3, [r0, #0]
 8005c54:	2a03      	cmp	r2, #3
 8005c56:	d114      	bne.n	8005c82 <HAL_I2S_DMAStop+0x46>
  {
    /* Disable the I2S DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8005c58:	685a      	ldr	r2, [r3, #4]

    /* Disable the I2S DMA Channel */
    HAL_DMA_Abort(hi2s->hdmatx);
 8005c5a:	6b80      	ldr	r0, [r0, #56]	; 0x38
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8005c5c:	f022 0202 	bic.w	r2, r2, #2
 8005c60:	605a      	str	r2, [r3, #4]
  {
    /* Disable the I2S DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);

    /* Disable the I2S DMA Channel */
    HAL_DMA_Abort(hi2s->hdmarx);
 8005c62:	f7fe fc67 	bl	8004534 <HAL_DMA_Abort>
    __HAL_I2SEXT_DISABLE(hi2s);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8005c66:	6822      	ldr	r2, [r4, #0]
 8005c68:	69d3      	ldr	r3, [r2, #28]
 8005c6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c6e:	041b      	lsls	r3, r3, #16
 8005c70:	0c1b      	lsrs	r3, r3, #16
 8005c72:	61d3      	str	r3, [r2, #28]

  hi2s->State = HAL_I2S_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005c74:	2000      	movs	r0, #0
  hi2s->State = HAL_I2S_STATE_READY;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 8005c7c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

  return HAL_OK;
}
 8005c80:	bd70      	pop	{r4, r5, r6, pc}
  else if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005c82:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005c86:	2a04      	cmp	r2, #4
 8005c88:	d105      	bne.n	8005c96 <HAL_I2S_DMAStop+0x5a>
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8005c8a:	685a      	ldr	r2, [r3, #4]
    HAL_DMA_Abort(hi2s->hdmarx);
 8005c8c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8005c8e:	f022 0201 	bic.w	r2, r2, #1
 8005c92:	605a      	str	r2, [r3, #4]
 8005c94:	e7e5      	b.n	8005c62 <HAL_I2S_DMAStop+0x26>
  else if(hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005c96:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005c9a:	2a05      	cmp	r2, #5
 8005c9c:	d1e3      	bne.n	8005c66 <HAL_I2S_DMAStop+0x2a>
    CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005c9e:	685a      	ldr	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005ca0:	4e0f      	ldr	r6, [pc, #60]	; (8005ce0 <HAL_I2S_DMAStop+0xa4>)
 8005ca2:	4d10      	ldr	r5, [pc, #64]	; (8005ce4 <HAL_I2S_DMAStop+0xa8>)
    HAL_DMA_Abort(hi2s->hdmatx);
 8005ca4:	6b80      	ldr	r0, [r0, #56]	; 0x38
    CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005ca6:	f022 0203 	bic.w	r2, r2, #3
 8005caa:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005cac:	42b3      	cmp	r3, r6
 8005cae:	bf0c      	ite	eq
 8005cb0:	462b      	moveq	r3, r5
 8005cb2:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	f022 0203 	bic.w	r2, r2, #3
 8005cbc:	605a      	str	r2, [r3, #4]
    HAL_DMA_Abort(hi2s->hdmatx);
 8005cbe:	f7fe fc39 	bl	8004534 <HAL_DMA_Abort>
    HAL_DMA_Abort(hi2s->hdmarx);
 8005cc2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005cc4:	f7fe fc36 	bl	8004534 <HAL_DMA_Abort>
    __HAL_I2SEXT_DISABLE(hi2s);
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	42b3      	cmp	r3, r6
 8005ccc:	bf18      	it	ne
 8005cce:	f04f 2540 	movne.w	r5, #1073758208	; 0x40004000
 8005cd2:	69eb      	ldr	r3, [r5, #28]
 8005cd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cd8:	61eb      	str	r3, [r5, #28]
 8005cda:	e7c4      	b.n	8005c66 <HAL_I2S_DMAStop+0x2a>
  __HAL_LOCK(hi2s);
 8005cdc:	2002      	movs	r0, #2
 8005cde:	e7cf      	b.n	8005c80 <HAL_I2S_DMAStop+0x44>
 8005ce0:	40003800 	.word	0x40003800
 8005ce4:	40003400 	.word	0x40003400

08005ce8 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ce8:	b508      	push	{r3, lr}
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005cea:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005cec:	f7fe f8fa 	bl	8003ee4 <HAL_I2S_TxHalfCpltCallback>
}
 8005cf0:	bd08      	pop	{r3, pc}

08005cf2 <I2S_DMATxCplt>:
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005cf2:	6802      	ldr	r2, [r0, #0]
 8005cf4:	6812      	ldr	r2, [r2, #0]
 8005cf6:	f412 7280 	ands.w	r2, r2, #256	; 0x100
{
 8005cfa:	b508      	push	{r3, lr}
  I2S_HandleTypeDef* hi2s = ( I2S_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005cfc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005cfe:	d108      	bne.n	8005d12 <I2S_DMATxCplt+0x20>
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8005d00:	6818      	ldr	r0, [r3, #0]
 8005d02:	6841      	ldr	r1, [r0, #4]
 8005d04:	f021 0102 	bic.w	r1, r1, #2
 8005d08:	6041      	str	r1, [r0, #4]
    hi2s->TxXferCount = 0U;
 8005d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State       = HAL_I2S_STATE_READY;
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fe f8dc 	bl	8003ed0 <HAL_I2S_TxCpltCallback>
}
 8005d18:	bd08      	pop	{r3, pc}
	...

08005d1c <HAL_I2S_Init>:
{
 8005d1c:	b570      	push	{r4, r5, r6, lr}
  if(hi2s == NULL)
 8005d1e:	4604      	mov	r4, r0
 8005d20:	2800      	cmp	r0, #0
 8005d22:	f000 808d 	beq.w	8005e40 <HAL_I2S_Init+0x124>
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 8005d26:	6803      	ldr	r3, [r0, #0]
 8005d28:	4a6e      	ldr	r2, [pc, #440]	; (8005ee4 <HAL_I2S_Init+0x1c8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d007      	beq.n	8005d3e <HAL_I2S_Init+0x22>
 8005d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d003      	beq.n	8005d3e <HAL_I2S_Init+0x22>
 8005d36:	21e3      	movs	r1, #227	; 0xe3
 8005d38:	486b      	ldr	r0, [pc, #428]	; (8005ee8 <HAL_I2S_Init+0x1cc>)
 8005d3a:	f005 f978 	bl	800b02e <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 8005d3e:	6863      	ldr	r3, [r4, #4]
 8005d40:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8005d44:	d003      	beq.n	8005d4e <HAL_I2S_Init+0x32>
 8005d46:	21e4      	movs	r1, #228	; 0xe4
 8005d48:	4867      	ldr	r0, [pc, #412]	; (8005ee8 <HAL_I2S_Init+0x1cc>)
 8005d4a:	f005 f970 	bl	800b02e <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 8005d4e:	68a3      	ldr	r3, [r4, #8]
 8005d50:	f033 0230 	bics.w	r2, r3, #48	; 0x30
 8005d54:	d005      	beq.n	8005d62 <HAL_I2S_Init+0x46>
 8005d56:	2bb0      	cmp	r3, #176	; 0xb0
 8005d58:	d003      	beq.n	8005d62 <HAL_I2S_Init+0x46>
 8005d5a:	21e5      	movs	r1, #229	; 0xe5
 8005d5c:	4862      	ldr	r0, [pc, #392]	; (8005ee8 <HAL_I2S_Init+0x1cc>)
 8005d5e:	f005 f966 	bl	800b02e <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8005d62:	68e2      	ldr	r2, [r4, #12]
 8005d64:	2a05      	cmp	r2, #5
 8005d66:	d803      	bhi.n	8005d70 <HAL_I2S_Init+0x54>
 8005d68:	232b      	movs	r3, #43	; 0x2b
 8005d6a:	40d3      	lsrs	r3, r2
 8005d6c:	07db      	lsls	r3, r3, #31
 8005d6e:	d403      	bmi.n	8005d78 <HAL_I2S_Init+0x5c>
 8005d70:	21e6      	movs	r1, #230	; 0xe6
 8005d72:	485d      	ldr	r0, [pc, #372]	; (8005ee8 <HAL_I2S_Init+0x1cc>)
 8005d74:	f005 f95b 	bl	800b02e <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 8005d78:	6923      	ldr	r3, [r4, #16]
 8005d7a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8005d7e:	d003      	beq.n	8005d88 <HAL_I2S_Init+0x6c>
 8005d80:	21e7      	movs	r1, #231	; 0xe7
 8005d82:	4859      	ldr	r0, [pc, #356]	; (8005ee8 <HAL_I2S_Init+0x1cc>)
 8005d84:	f005 f953 	bl	800b02e <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8005d88:	6963      	ldr	r3, [r4, #20]
 8005d8a:	4a58      	ldr	r2, [pc, #352]	; (8005eec <HAL_I2S_Init+0x1d0>)
 8005d8c:	f5a3 51fa 	sub.w	r1, r3, #8000	; 0x1f40
 8005d90:	4291      	cmp	r1, r2
 8005d92:	d905      	bls.n	8005da0 <HAL_I2S_Init+0x84>
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d003      	beq.n	8005da0 <HAL_I2S_Init+0x84>
 8005d98:	21e8      	movs	r1, #232	; 0xe8
 8005d9a:	4853      	ldr	r0, [pc, #332]	; (8005ee8 <HAL_I2S_Init+0x1cc>)
 8005d9c:	f005 f947 	bl	800b02e <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 8005da0:	69a3      	ldr	r3, [r4, #24]
 8005da2:	f033 0308 	bics.w	r3, r3, #8
 8005da6:	d003      	beq.n	8005db0 <HAL_I2S_Init+0x94>
 8005da8:	21e9      	movs	r1, #233	; 0xe9
 8005daa:	484f      	ldr	r0, [pc, #316]	; (8005ee8 <HAL_I2S_Init+0x1cc>)
 8005dac:	f005 f93f 	bl	800b02e <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 8005db0:	69e3      	ldr	r3, [r4, #28]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d903      	bls.n	8005dbe <HAL_I2S_Init+0xa2>
 8005db6:	21ea      	movs	r1, #234	; 0xea
 8005db8:	484b      	ldr	r0, [pc, #300]	; (8005ee8 <HAL_I2S_Init+0x1cc>)
 8005dba:	f005 f938 	bl	800b02e <assert_failed>
  hi2s->State = HAL_I2S_STATE_BUSY;
 8005dbe:	2502      	movs	r5, #2
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005dc0:	4b4b      	ldr	r3, [pc, #300]	; (8005ef0 <HAL_I2S_Init+0x1d4>)
  hi2s->State = HAL_I2S_STATE_BUSY;
 8005dc2:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005dc6:	6363      	str	r3, [r4, #52]	; 0x34
  HAL_I2S_MspInit(hi2s);
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f7ff fee4 	bl	8005b96 <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	69d3      	ldr	r3, [r2, #28]
 8005dd2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005dd6:	f023 030f 	bic.w	r3, r3, #15
 8005dda:	61d3      	str	r3, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005ddc:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8005dde:	6215      	str	r5, [r2, #32]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005de0:	2b02      	cmp	r3, #2
  tmpreg = hi2s->Instance->I2SCFGR;
 8005de2:	69d5      	ldr	r5, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005de4:	d035      	beq.n	8005e52 <HAL_I2S_Init+0x136>
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005de6:	68e3      	ldr	r3, [r4, #12]
      packetlength = 32U;
 8005de8:	2b00      	cmp	r3, #0
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005dea:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 8005dec:	bf0c      	ite	eq
 8005dee:	2610      	moveq	r6, #16
 8005df0:	2620      	movne	r6, #32
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005df2:	2001      	movs	r0, #1
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005df4:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8005df6:	bf98      	it	ls
 8005df8:	0076      	lslls	r6, r6, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005dfa:	f000 fe93 	bl	8006b24 <HAL_RCCEx_GetPeriphCLKFreq>
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005dfe:	6923      	ldr	r3, [r4, #16]
 8005e00:	6961      	ldr	r1, [r4, #20]
 8005e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e06:	d11f      	bne.n	8005e48 <HAL_I2S_Init+0x12c>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005e08:	68e3      	ldr	r3, [r4, #12]
 8005e0a:	220a      	movs	r2, #10
 8005e0c:	b1d3      	cbz	r3, 8005e44 <HAL_I2S_Init+0x128>
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8005e0e:	00b3      	lsls	r3, r6, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8005e10:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e14:	4353      	muls	r3, r2
    tmp = tmp / 10U;
 8005e16:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8005e18:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e1c:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8005e1e:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8005e22:	f003 0201 	and.w	r2, r3, #1
    i2sodd = (uint32_t) (i2sodd << 8U);
 8005e26:	0212      	lsls	r2, r2, #8
 8005e28:	f3c3 034f 	ubfx	r3, r3, #1, #16
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005e2c:	1e99      	subs	r1, r3, #2
 8005e2e:	29fd      	cmp	r1, #253	; 0xfd
 8005e30:	d911      	bls.n	8005e56 <HAL_I2S_Init+0x13a>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005e32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005e34:	f043 0310 	orr.w	r3, r3, #16
 8005e38:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f7fe f862 	bl	8003f04 <HAL_I2S_ErrorCallback>
    return HAL_ERROR;
 8005e40:	2001      	movs	r0, #1
 8005e42:	e04e      	b.n	8005ee2 <HAL_I2S_Init+0x1c6>
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8005e44:	00f3      	lsls	r3, r6, #3
 8005e46:	e7e3      	b.n	8005e10 <HAL_I2S_Init+0xf4>
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8005e48:	230a      	movs	r3, #10
 8005e4a:	fbb0 f0f6 	udiv	r0, r0, r6
 8005e4e:	4343      	muls	r3, r0
 8005e50:	e7e1      	b.n	8005e16 <HAL_I2S_Init+0xfa>
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 8005e52:	2200      	movs	r2, #0
 8005e54:	e7ea      	b.n	8005e2c <HAL_I2S_Init+0x110>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005e56:	4313      	orrs	r3, r2
 8005e58:	6922      	ldr	r2, [r4, #16]
 8005e5a:	6821      	ldr	r1, [r4, #0]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	620b      	str	r3, [r1, #32]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005e60:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8005e64:	4313      	orrs	r3, r2
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005e66:	68e2      	ldr	r2, [r4, #12]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8005e68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e6c:	4313      	orrs	r3, r2
                       (uint16_t)hi2s->Init.CPOL))));
 8005e6e:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8005e70:	4313      	orrs	r3, r2
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	431d      	orrs	r5, r3
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8005e76:	6a23      	ldr	r3, [r4, #32]
  WRITE_REG(hi2s->Instance->I2SCFGR, tmpreg);
 8005e78:	61cd      	str	r5, [r1, #28]
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d904      	bls.n	8005e88 <HAL_I2S_Init+0x16c>
 8005e7e:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8005e82:	4819      	ldr	r0, [pc, #100]	; (8005ee8 <HAL_I2S_Init+0x1cc>)
 8005e84:	f005 f8d3 	bl	800b02e <assert_failed>
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005e88:	6a23      	ldr	r3, [r4, #32]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d124      	bne.n	8005ed8 <HAL_I2S_Init+0x1bc>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005e8e:	4b19      	ldr	r3, [pc, #100]	; (8005ef4 <HAL_I2S_Init+0x1d8>)
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005e90:	6821      	ldr	r1, [r4, #0]
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005e92:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005e94:	4a18      	ldr	r2, [pc, #96]	; (8005ef8 <HAL_I2S_Init+0x1dc>)
 8005e96:	4b13      	ldr	r3, [pc, #76]	; (8005ee4 <HAL_I2S_Init+0x1c8>)
 8005e98:	4299      	cmp	r1, r3
 8005e9a:	bf18      	it	ne
 8005e9c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8005ea0:	69d3      	ldr	r3, [r2, #28]
 8005ea2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005ea6:	f023 030f 	bic.w	r3, r3, #15
 8005eaa:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005eac:	2302      	movs	r3, #2
 8005eae:	6213      	str	r3, [r2, #32]
    if((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005eb0:	6863      	ldr	r3, [r4, #4]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005eb2:	69d1      	ldr	r1, [r2, #28]
      tmp = I2S_MODE_SLAVE_RX;
 8005eb4:	f433 7300 	bics.w	r3, r3, #512	; 0x200
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005eb8:	e9d4 3502 	ldrd	r3, r5, [r4, #8]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005ebc:	ea43 0305 	orr.w	r3, r3, r5
                         (uint16_t)hi2s->Init.CPOL))));
 8005ec0:	69a5      	ldr	r5, [r4, #24]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005ec2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
      tmp = I2S_MODE_SLAVE_RX;
 8005ec6:	bf14      	ite	ne
 8005ec8:	2000      	movne	r0, #0
 8005eca:	f44f 7080 	moveq.w	r0, #256	; 0x100
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005ece:	432b      	orrs	r3, r5
 8005ed0:	4303      	orrs	r3, r0
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	430b      	orrs	r3, r1
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
 8005ed6:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005ed8:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8005eda:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005edc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005ede:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8005ee2:	bd70      	pop	{r4, r5, r6, pc}
 8005ee4:	40003800 	.word	0x40003800
 8005ee8:	0800c914 	.word	0x0800c914
 8005eec:	0002cec0 	.word	0x0002cec0
 8005ef0:	08005efd 	.word	0x08005efd
 8005ef4:	08006039 	.word	0x08006039
 8005ef8:	40003400 	.word	0x40003400

08005efc <I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005efc:	b530      	push	{r4, r5, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005efe:	6803      	ldr	r3, [r0, #0]
{
 8005f00:	b085      	sub	sp, #20
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	9201      	str	r2, [sp, #4]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005f06:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005f0a:	2a04      	cmp	r2, #4
{
 8005f0c:	4604      	mov	r4, r0
  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005f0e:	d13a      	bne.n	8005f86 <I2S_IRQHandler+0x8a>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005f10:	9a01      	ldr	r2, [sp, #4]
 8005f12:	07d2      	lsls	r2, r2, #31
 8005f14:	d519      	bpl.n	8005f4a <I2S_IRQHandler+0x4e>
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	0655      	lsls	r5, r2, #25
 8005f1a:	d516      	bpl.n	8005f4a <I2S_IRQHandler+0x4e>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005f1c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005f1e:	68d9      	ldr	r1, [r3, #12]
 8005f20:	1c95      	adds	r5, r2, #2
 8005f22:	62c5      	str	r5, [r0, #44]	; 0x2c
 8005f24:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8005f26:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8005f28:	3a01      	subs	r2, #1
 8005f2a:	b292      	uxth	r2, r2
 8005f2c:	8642      	strh	r2, [r0, #50]	; 0x32
  if(hi2s->RxXferCount == 0U)
 8005f2e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8005f30:	b292      	uxth	r2, r2
 8005f32:	b952      	cbnz	r2, 8005f4a <I2S_IRQHandler+0x4e>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f3a:	0412      	lsls	r2, r2, #16
 8005f3c:	0c12      	lsrs	r2, r2, #16
 8005f3e:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8005f46:	f7fd ffd8 	bl	8003efa <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005f4a:	9b01      	ldr	r3, [sp, #4]
 8005f4c:	0659      	lsls	r1, r3, #25
 8005f4e:	d51a      	bpl.n	8005f86 <I2S_IRQHandler+0x8a>
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	0692      	lsls	r2, r2, #26
 8005f56:	d516      	bpl.n	8005f86 <I2S_IRQHandler+0x8a>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f5e:	0412      	lsls	r2, r2, #16
 8005f60:	0c12      	lsrs	r2, r2, #16
 8005f62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005f64:	2200      	movs	r2, #0
 8005f66:	9202      	str	r2, [sp, #8]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	9202      	str	r2, [sp, #8]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	9302      	str	r3, [sp, #8]
 8005f70:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8005f78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005f7a:	f043 0302 	orr.w	r3, r3, #2
 8005f7e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005f80:	4620      	mov	r0, r4
 8005f82:	f7fd ffbf 	bl	8003f04 <HAL_I2S_ErrorCallback>
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005f86:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d13a      	bne.n	8006004 <I2S_IRQHandler+0x108>
    {
      /* I2S in mode Transmitter -----------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005f8e:	9b01      	ldr	r3, [sp, #4]
 8005f90:	079d      	lsls	r5, r3, #30
 8005f92:	d51b      	bpl.n	8005fcc <I2S_IRQHandler+0xd0>
 8005f94:	6822      	ldr	r2, [r4, #0]
 8005f96:	6853      	ldr	r3, [r2, #4]
 8005f98:	0618      	lsls	r0, r3, #24
 8005f9a:	d517      	bpl.n	8005fcc <I2S_IRQHandler+0xd0>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f9e:	1c99      	adds	r1, r3, #2
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	6261      	str	r1, [r4, #36]	; 0x24
 8005fa4:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8005fa6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	8563      	strh	r3, [r4, #42]	; 0x2a
  if(hi2s->TxXferCount == 0U)
 8005fae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	b95b      	cbnz	r3, 8005fcc <I2S_IRQHandler+0xd0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fb4:	6853      	ldr	r3, [r2, #4]
 8005fb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fba:	041b      	lsls	r3, r3, #16
 8005fbc:	0c1b      	lsrs	r3, r3, #16
 8005fbe:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f7fd ff82 	bl	8003ed0 <HAL_I2S_TxCpltCallback>
      {
        I2S_Transmit_IT(hi2s);
      }

      /* I2S Underrun error interrupt occurred --------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005fcc:	9b01      	ldr	r3, [sp, #4]
 8005fce:	0719      	lsls	r1, r3, #28
 8005fd0:	d518      	bpl.n	8006004 <I2S_IRQHandler+0x108>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	0692      	lsls	r2, r2, #26
 8005fd8:	d514      	bpl.n	8006004 <I2S_IRQHandler+0x108>
      {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fe0:	0412      	lsls	r2, r2, #16
 8005fe2:	0c12      	lsrs	r2, r2, #16
 8005fe4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	9203      	str	r2, [sp, #12]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	9303      	str	r3, [sp, #12]
 8005fee:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ff6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ff8:	f043 0304 	orr.w	r3, r3, #4
 8005ffc:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005ffe:	4620      	mov	r0, r4
 8006000:	f7fd ff80 	bl	8003f04 <HAL_I2S_ErrorCallback>
    }
  }
}
 8006004:	b005      	add	sp, #20
 8006006:	bd30      	pop	{r4, r5, pc}

08006008 <I2S_DMAError>:
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8006008:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800600a:	6802      	ldr	r2, [r0, #0]
{
 800600c:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800600e:	6853      	ldr	r3, [r2, #4]
 8006010:	f023 0303 	bic.w	r3, r3, #3
 8006014:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800601a:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State= HAL_I2S_STATE_READY;
 800601c:	2301      	movs	r3, #1
 800601e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_DMA);
 8006022:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006024:	f043 0308 	orr.w	r3, r3, #8
 8006028:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 800602a:	f7fd ff6b 	bl	8003f04 <HAL_I2S_ErrorCallback>
}
 800602e:	bd08      	pop	{r3, pc}

08006030 <HAL_I2S_GetState>:
  return hi2s->State;
 8006030:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8006034:	4770      	bx	lr

08006036 <HAL_I2SEx_TxRxCpltCallback>:
 8006036:	4770      	bx	lr

08006038 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 800603a:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 800603c:	4995      	ldr	r1, [pc, #596]	; (8006294 <HAL_I2SEx_FullDuplex_IRQHandler+0x25c>)
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	9200      	str	r2, [sp, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8006042:	4a95      	ldr	r2, [pc, #596]	; (8006298 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006044:	428b      	cmp	r3, r1
 8006046:	bf18      	it	ne
 8006048:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
{
 800604c:	4604      	mov	r4, r0
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 800604e:	6891      	ldr	r1, [r2, #8]
 8006050:	9101      	str	r1, [sp, #4]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 8006052:	69d9      	ldr	r1, [r3, #28]
 8006054:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8006058:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800605c:	d004      	beq.n	8006068 <HAL_I2SEx_FullDuplex_IRQHandler+0x30>
      || ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800605e:	69d9      	ldr	r1, [r3, #28]
 8006060:	f411 7f40 	tst.w	r1, #768	; 0x300
 8006064:	f040 809a 	bne.w	800619c <HAL_I2SEx_FullDuplex_IRQHandler+0x164>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006068:	9a00      	ldr	r2, [sp, #0]
 800606a:	0792      	lsls	r2, r2, #30
 800606c:	d51d      	bpl.n	80060aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	0610      	lsls	r0, r2, #24
 8006072:	d51a      	bpl.n	80060aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
static void I2SEx_FullDuplexTx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
  if(i2sUsed == I2S_USE_I2S)
  {
    /* Write Data on DR register */
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006074:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006076:	1c91      	adds	r1, r2, #2
 8006078:	8812      	ldrh	r2, [r2, #0]
 800607a:	6261      	str	r1, [r4, #36]	; 0x24
 800607c:	60da      	str	r2, [r3, #12]
    hi2s->TxXferCount--;
 800607e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006080:	3a01      	subs	r2, #1
 8006082:	b292      	uxth	r2, r2
 8006084:	8562      	strh	r2, [r4, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 8006086:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006088:	b292      	uxth	r2, r2
 800608a:	b972      	cbnz	r2, 80060aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006092:	0412      	lsls	r2, r2, #16
 8006094:	0c12      	lsrs	r2, r2, #16
 8006096:	605a      	str	r2, [r3, #4]

      if(hi2s->RxXferCount == 0U)
 8006098:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800609a:	b29b      	uxth	r3, r3
 800609c:	b92b      	cbnz	r3, 80060aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800609e:	2301      	movs	r3, #1
 80060a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060a4:	4620      	mov	r0, r4
 80060a6:	f7ff ffc6 	bl	8006036 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80060aa:	9b01      	ldr	r3, [sp, #4]
 80060ac:	07d9      	lsls	r1, r3, #31
 80060ae:	d522      	bpl.n	80060f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
 80060b0:	4a78      	ldr	r2, [pc, #480]	; (8006294 <HAL_I2SEx_FullDuplex_IRQHandler+0x25c>)
 80060b2:	6821      	ldr	r1, [r4, #0]
 80060b4:	4b78      	ldr	r3, [pc, #480]	; (8006298 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060b6:	4291      	cmp	r1, r2
 80060b8:	bf18      	it	ne
 80060ba:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	0652      	lsls	r2, r2, #25
 80060c2:	d518      	bpl.n	80060f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    }
  }
  else
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80060c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80060c6:	68d9      	ldr	r1, [r3, #12]
 80060c8:	1c90      	adds	r0, r2, #2
 80060ca:	62e0      	str	r0, [r4, #44]	; 0x2c
 80060cc:	8011      	strh	r1, [r2, #0]
    hi2s->RxXferCount--;
 80060ce:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80060d0:	3a01      	subs	r2, #1
 80060d2:	b292      	uxth	r2, r2
 80060d4:	8662      	strh	r2, [r4, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 80060d6:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80060d8:	b292      	uxth	r2, r2
 80060da:	b962      	cbnz	r2, 80060f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    {
      /* Disable I2Sext RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060e2:	605a      	str	r2, [r3, #4]

      if(hi2s->TxXferCount == 0U)
 80060e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	b92b      	cbnz	r3, 80060f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80060ea:	2301      	movs	r3, #1
 80060ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060f0:	4620      	mov	r0, r4
 80060f2:	f7ff ffa0 	bl	8006036 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80060f6:	9b01      	ldr	r3, [sp, #4]
 80060f8:	0658      	lsls	r0, r3, #25
 80060fa:	d524      	bpl.n	8006146 <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
 80060fc:	4965      	ldr	r1, [pc, #404]	; (8006294 <HAL_I2SEx_FullDuplex_IRQHandler+0x25c>)
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	4a65      	ldr	r2, [pc, #404]	; (8006298 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006102:	428b      	cmp	r3, r1
 8006104:	bf18      	it	ne
 8006106:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 800610a:	6851      	ldr	r1, [r2, #4]
 800610c:	0689      	lsls	r1, r1, #26
 800610e:	d51a      	bpl.n	8006146 <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006110:	6851      	ldr	r1, [r2, #4]
 8006112:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8006116:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800611e:	0412      	lsls	r2, r2, #16
 8006120:	0c12      	lsrs	r2, r2, #16
 8006122:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006124:	2200      	movs	r2, #0
 8006126:	9202      	str	r2, [sp, #8]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	9202      	str	r2, [sp, #8]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	9302      	str	r3, [sp, #8]
 8006130:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8006132:	2301      	movs	r3, #1
 8006134:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8006138:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800613a:	f043 0302 	orr.w	r3, r3, #2
 800613e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8006140:	4620      	mov	r0, r4
 8006142:	f7fd fedf 	bl	8003f04 <HAL_I2S_ErrorCallback>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006146:	9b00      	ldr	r3, [sp, #0]
 8006148:	071b      	lsls	r3, r3, #28
 800614a:	f140 80a0 	bpl.w	800628e <HAL_I2SEx_FullDuplex_IRQHandler+0x256>
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	0690      	lsls	r0, r2, #26
 8006154:	f140 809b 	bpl.w	800628e <HAL_I2SEx_FullDuplex_IRQHandler+0x256>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006158:	685a      	ldr	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800615a:	494e      	ldr	r1, [pc, #312]	; (8006294 <HAL_I2SEx_FullDuplex_IRQHandler+0x25c>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800615c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006160:	0412      	lsls	r2, r2, #16
 8006162:	0c12      	lsrs	r2, r2, #16
 8006164:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006166:	4a4c      	ldr	r2, [pc, #304]	; (8006298 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006168:	428b      	cmp	r3, r1
 800616a:	bf18      	it	ne
 800616c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8006170:	6851      	ldr	r1, [r2, #4]
 8006172:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8006176:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006178:	2200      	movs	r2, #0
 800617a:	9203      	str	r2, [sp, #12]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	9303      	str	r3, [sp, #12]
 8006180:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8006182:	2301      	movs	r3, #1
 8006184:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 8006188:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800618a:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 800618c:	f043 0304 	orr.w	r3, r3, #4
 8006190:	6463      	str	r3, [r4, #68]	; 0x44
}
 8006192:	b004      	add	sp, #16
 8006194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8006198:	f7fd beb4 	b.w	8003f04 <HAL_I2S_ErrorCallback>
    if(((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800619c:	9b01      	ldr	r3, [sp, #4]
 800619e:	0799      	lsls	r1, r3, #30
 80061a0:	d51a      	bpl.n	80061d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a0>
 80061a2:	6853      	ldr	r3, [r2, #4]
 80061a4:	061b      	lsls	r3, r3, #24
 80061a6:	d517      	bpl.n	80061d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a0>
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80061a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80061aa:	1c99      	adds	r1, r3, #2
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	6241      	str	r1, [r0, #36]	; 0x24
 80061b0:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 80061b2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(hi2s->TxXferCount == 0U)
 80061ba:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80061bc:	b29b      	uxth	r3, r3
 80061be:	b95b      	cbnz	r3, 80061d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061c0:	6853      	ldr	r3, [r2, #4]
 80061c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061c6:	6053      	str	r3, [r2, #4]
      if(hi2s->RxXferCount == 0U)
 80061c8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	b923      	cbnz	r3, 80061d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a0>
        hi2s->State = HAL_I2S_STATE_READY;
 80061ce:	2301      	movs	r3, #1
 80061d0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061d4:	f7ff ff2f 	bl	8006036 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80061d8:	9b00      	ldr	r3, [sp, #0]
 80061da:	07d8      	lsls	r0, r3, #31
 80061dc:	d51e      	bpl.n	800621c <HAL_I2SEx_FullDuplex_IRQHandler+0x1e4>
 80061de:	6822      	ldr	r2, [r4, #0]
 80061e0:	6853      	ldr	r3, [r2, #4]
 80061e2:	0659      	lsls	r1, r3, #25
 80061e4:	d51a      	bpl.n	800621c <HAL_I2SEx_FullDuplex_IRQHandler+0x1e4>
    (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80061e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80061e8:	68d1      	ldr	r1, [r2, #12]
 80061ea:	1c98      	adds	r0, r3, #2
 80061ec:	62e0      	str	r0, [r4, #44]	; 0x2c
 80061ee:	8019      	strh	r1, [r3, #0]
    hi2s->RxXferCount--;
 80061f0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	8663      	strh	r3, [r4, #50]	; 0x32
    if(hi2s->RxXferCount == 0U)
 80061f8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	b973      	cbnz	r3, 800621c <HAL_I2SEx_FullDuplex_IRQHandler+0x1e4>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061fe:	6853      	ldr	r3, [r2, #4]
 8006200:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006204:	041b      	lsls	r3, r3, #16
 8006206:	0c1b      	lsrs	r3, r3, #16
 8006208:	6053      	str	r3, [r2, #4]
      if(hi2s->TxXferCount == 0U)
 800620a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800620c:	b29b      	uxth	r3, r3
 800620e:	b92b      	cbnz	r3, 800621c <HAL_I2SEx_FullDuplex_IRQHandler+0x1e4>
        hi2s->State = HAL_I2S_STATE_READY;
 8006210:	2301      	movs	r3, #1
 8006212:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006216:	4620      	mov	r0, r4
 8006218:	f7ff ff0d 	bl	8006036 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800621c:	9b00      	ldr	r3, [sp, #0]
 800621e:	065a      	lsls	r2, r3, #25
 8006220:	d51d      	bpl.n	800625e <HAL_I2SEx_FullDuplex_IRQHandler+0x226>
 8006222:	6822      	ldr	r2, [r4, #0]
 8006224:	6853      	ldr	r3, [r2, #4]
 8006226:	069b      	lsls	r3, r3, #26
 8006228:	d519      	bpl.n	800625e <HAL_I2SEx_FullDuplex_IRQHandler+0x226>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800622a:	6853      	ldr	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800622c:	4919      	ldr	r1, [pc, #100]	; (8006294 <HAL_I2SEx_FullDuplex_IRQHandler+0x25c>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800622e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006232:	041b      	lsls	r3, r3, #16
 8006234:	0c1b      	lsrs	r3, r3, #16
 8006236:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006238:	4b17      	ldr	r3, [pc, #92]	; (8006298 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800623a:	428a      	cmp	r2, r1
 800623c:	bf18      	it	ne
 800623e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8006242:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800624a:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800624c:	2301      	movs	r3, #1
 800624e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8006252:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006254:	f043 0302 	orr.w	r3, r3, #2
 8006258:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800625a:	f7fd fe53 	bl	8003f04 <HAL_I2S_ErrorCallback>
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800625e:	9b01      	ldr	r3, [sp, #4]
 8006260:	0718      	lsls	r0, r3, #28
 8006262:	d514      	bpl.n	800628e <HAL_I2SEx_FullDuplex_IRQHandler+0x256>
 8006264:	490b      	ldr	r1, [pc, #44]	; (8006294 <HAL_I2SEx_FullDuplex_IRQHandler+0x25c>)
 8006266:	6822      	ldr	r2, [r4, #0]
 8006268:	4b0b      	ldr	r3, [pc, #44]	; (8006298 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800626a:	428a      	cmp	r2, r1
 800626c:	bf18      	it	ne
 800626e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8006272:	6859      	ldr	r1, [r3, #4]
 8006274:	0689      	lsls	r1, r1, #26
 8006276:	d50a      	bpl.n	800628e <HAL_I2SEx_FullDuplex_IRQHandler+0x256>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006278:	6859      	ldr	r1, [r3, #4]
 800627a:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 800627e:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006280:	6853      	ldr	r3, [r2, #4]
 8006282:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006286:	041b      	lsls	r3, r3, #16
 8006288:	0c1b      	lsrs	r3, r3, #16
 800628a:	6053      	str	r3, [r2, #4]
 800628c:	e779      	b.n	8006182 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
}
 800628e:	b004      	add	sp, #16
 8006290:	bd10      	pop	{r4, pc}
 8006292:	bf00      	nop
 8006294:	40003800 	.word	0x40003800
 8006298:	40003400 	.word	0x40003400

0800629c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800629c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062a0:	4604      	mov	r4, r0
 80062a2:	b918      	cbnz	r0, 80062ac <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80062a4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80062a6:	b002      	add	sp, #8
 80062a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80062ac:	6803      	ldr	r3, [r0, #0]
 80062ae:	2b0f      	cmp	r3, #15
 80062b0:	d903      	bls.n	80062ba <HAL_RCC_OscConfig+0x1e>
 80062b2:	21f8      	movs	r1, #248	; 0xf8
 80062b4:	48a2      	ldr	r0, [pc, #648]	; (8006540 <HAL_RCC_OscConfig+0x2a4>)
 80062b6:	f004 feba 	bl	800b02e <assert_failed>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	07d8      	lsls	r0, r3, #31
 80062be:	d418      	bmi.n	80062f2 <HAL_RCC_OscConfig+0x56>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	0799      	lsls	r1, r3, #30
 80062c4:	d46b      	bmi.n	800639e <HAL_RCC_OscConfig+0x102>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	0719      	lsls	r1, r3, #28
 80062ca:	f100 80be 	bmi.w	800644a <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	075a      	lsls	r2, r3, #29
 80062d2:	f100 80e4 	bmi.w	800649e <HAL_RCC_OscConfig+0x202>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80062d6:	69a3      	ldr	r3, [r4, #24]
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d904      	bls.n	80062e6 <HAL_RCC_OscConfig+0x4a>
 80062dc:	f240 11df 	movw	r1, #479	; 0x1df
 80062e0:	4897      	ldr	r0, [pc, #604]	; (8006540 <HAL_RCC_OscConfig+0x2a4>)
 80062e2:	f004 fea4 	bl	800b02e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062e6:	69a2      	ldr	r2, [r4, #24]
 80062e8:	2a00      	cmp	r2, #0
 80062ea:	f040 8151 	bne.w	8006590 <HAL_RCC_OscConfig+0x2f4>
  return HAL_OK;
 80062ee:	2000      	movs	r0, #0
 80062f0:	e7d9      	b.n	80062a6 <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80062f2:	6863      	ldr	r3, [r4, #4]
 80062f4:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 80062f8:	d006      	beq.n	8006308 <HAL_RCC_OscConfig+0x6c>
 80062fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062fe:	d003      	beq.n	8006308 <HAL_RCC_OscConfig+0x6c>
 8006300:	21fd      	movs	r1, #253	; 0xfd
 8006302:	488f      	ldr	r0, [pc, #572]	; (8006540 <HAL_RCC_OscConfig+0x2a4>)
 8006304:	f004 fe93 	bl	800b02e <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006308:	4b8e      	ldr	r3, [pc, #568]	; (8006544 <HAL_RCC_OscConfig+0x2a8>)
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	f002 020c 	and.w	r2, r2, #12
 8006310:	2a04      	cmp	r2, #4
 8006312:	d007      	beq.n	8006324 <HAL_RCC_OscConfig+0x88>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800631a:	2a08      	cmp	r2, #8
 800631c:	d10a      	bne.n	8006334 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	025a      	lsls	r2, r3, #9
 8006322:	d507      	bpl.n	8006334 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006324:	4b87      	ldr	r3, [pc, #540]	; (8006544 <HAL_RCC_OscConfig+0x2a8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	039b      	lsls	r3, r3, #14
 800632a:	d5c9      	bpl.n	80062c0 <HAL_RCC_OscConfig+0x24>
 800632c:	6863      	ldr	r3, [r4, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1c6      	bne.n	80062c0 <HAL_RCC_OscConfig+0x24>
 8006332:	e7b7      	b.n	80062a4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006334:	6863      	ldr	r3, [r4, #4]
 8006336:	4d83      	ldr	r5, [pc, #524]	; (8006544 <HAL_RCC_OscConfig+0x2a8>)
 8006338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800633c:	d111      	bne.n	8006362 <HAL_RCC_OscConfig+0xc6>
 800633e:	682b      	ldr	r3, [r5, #0]
 8006340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006344:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006346:	f7fd fe3b 	bl	8003fc0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800634a:	4d7e      	ldr	r5, [pc, #504]	; (8006544 <HAL_RCC_OscConfig+0x2a8>)
        tickstart = HAL_GetTick();
 800634c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800634e:	682b      	ldr	r3, [r5, #0]
 8006350:	039f      	lsls	r7, r3, #14
 8006352:	d4b5      	bmi.n	80062c0 <HAL_RCC_OscConfig+0x24>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006354:	f7fd fe34 	bl	8003fc0 <HAL_GetTick>
 8006358:	1b80      	subs	r0, r0, r6
 800635a:	2864      	cmp	r0, #100	; 0x64
 800635c:	d9f7      	bls.n	800634e <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 800635e:	2003      	movs	r0, #3
 8006360:	e7a1      	b.n	80062a6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006362:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006366:	d104      	bne.n	8006372 <HAL_RCC_OscConfig+0xd6>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800636e:	602b      	str	r3, [r5, #0]
 8006370:	e7e5      	b.n	800633e <HAL_RCC_OscConfig+0xa2>
 8006372:	682a      	ldr	r2, [r5, #0]
 8006374:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006378:	602a      	str	r2, [r5, #0]
 800637a:	682a      	ldr	r2, [r5, #0]
 800637c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006380:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1df      	bne.n	8006346 <HAL_RCC_OscConfig+0xaa>
        tickstart = HAL_GetTick();
 8006386:	f7fd fe1b 	bl	8003fc0 <HAL_GetTick>
 800638a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	0398      	lsls	r0, r3, #14
 8006390:	d596      	bpl.n	80062c0 <HAL_RCC_OscConfig+0x24>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006392:	f7fd fe15 	bl	8003fc0 <HAL_GetTick>
 8006396:	1b80      	subs	r0, r0, r6
 8006398:	2864      	cmp	r0, #100	; 0x64
 800639a:	d9f7      	bls.n	800638c <HAL_RCC_OscConfig+0xf0>
 800639c:	e7df      	b.n	800635e <HAL_RCC_OscConfig+0xc2>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800639e:	68e3      	ldr	r3, [r4, #12]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d904      	bls.n	80063ae <HAL_RCC_OscConfig+0x112>
 80063a4:	f240 112f 	movw	r1, #303	; 0x12f
 80063a8:	4865      	ldr	r0, [pc, #404]	; (8006540 <HAL_RCC_OscConfig+0x2a4>)
 80063aa:	f004 fe40 	bl	800b02e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80063ae:	6923      	ldr	r3, [r4, #16]
 80063b0:	2b1f      	cmp	r3, #31
 80063b2:	d904      	bls.n	80063be <HAL_RCC_OscConfig+0x122>
 80063b4:	f44f 7198 	mov.w	r1, #304	; 0x130
 80063b8:	4861      	ldr	r0, [pc, #388]	; (8006540 <HAL_RCC_OscConfig+0x2a4>)
 80063ba:	f004 fe38 	bl	800b02e <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063be:	4b61      	ldr	r3, [pc, #388]	; (8006544 <HAL_RCC_OscConfig+0x2a8>)
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	f012 0f0c 	tst.w	r2, #12
 80063c6:	d007      	beq.n	80063d8 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063ce:	2a08      	cmp	r2, #8
 80063d0:	d112      	bne.n	80063f8 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	0259      	lsls	r1, r3, #9
 80063d6:	d40f      	bmi.n	80063f8 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063d8:	4b5a      	ldr	r3, [pc, #360]	; (8006544 <HAL_RCC_OscConfig+0x2a8>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	0792      	lsls	r2, r2, #30
 80063de:	d503      	bpl.n	80063e8 <HAL_RCC_OscConfig+0x14c>
 80063e0:	68e2      	ldr	r2, [r4, #12]
 80063e2:	2a01      	cmp	r2, #1
 80063e4:	f47f af5e 	bne.w	80062a4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	6921      	ldr	r1, [r4, #16]
 80063ec:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80063f0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80063f4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063f6:	e766      	b.n	80062c6 <HAL_RCC_OscConfig+0x2a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063f8:	68e2      	ldr	r2, [r4, #12]
 80063fa:	4b53      	ldr	r3, [pc, #332]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80063fc:	b1b2      	cbz	r2, 800642c <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 80063fe:	2201      	movs	r2, #1
 8006400:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006402:	f7fd fddd 	bl	8003fc0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006406:	4d4f      	ldr	r5, [pc, #316]	; (8006544 <HAL_RCC_OscConfig+0x2a8>)
        tickstart = HAL_GetTick();
 8006408:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800640a:	682b      	ldr	r3, [r5, #0]
 800640c:	079f      	lsls	r7, r3, #30
 800640e:	d507      	bpl.n	8006420 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	6922      	ldr	r2, [r4, #16]
 8006414:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006418:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800641c:	602b      	str	r3, [r5, #0]
 800641e:	e752      	b.n	80062c6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006420:	f7fd fdce 	bl	8003fc0 <HAL_GetTick>
 8006424:	1b80      	subs	r0, r0, r6
 8006426:	2802      	cmp	r0, #2
 8006428:	d9ef      	bls.n	800640a <HAL_RCC_OscConfig+0x16e>
 800642a:	e798      	b.n	800635e <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 800642c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800642e:	f7fd fdc7 	bl	8003fc0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006432:	4d44      	ldr	r5, [pc, #272]	; (8006544 <HAL_RCC_OscConfig+0x2a8>)
        tickstart = HAL_GetTick();
 8006434:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006436:	682b      	ldr	r3, [r5, #0]
 8006438:	0798      	lsls	r0, r3, #30
 800643a:	f57f af44 	bpl.w	80062c6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800643e:	f7fd fdbf 	bl	8003fc0 <HAL_GetTick>
 8006442:	1b80      	subs	r0, r0, r6
 8006444:	2802      	cmp	r0, #2
 8006446:	d9f6      	bls.n	8006436 <HAL_RCC_OscConfig+0x19a>
 8006448:	e789      	b.n	800635e <HAL_RCC_OscConfig+0xc2>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800644a:	6963      	ldr	r3, [r4, #20]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d904      	bls.n	800645a <HAL_RCC_OscConfig+0x1be>
 8006450:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8006454:	483a      	ldr	r0, [pc, #232]	; (8006540 <HAL_RCC_OscConfig+0x2a4>)
 8006456:	f004 fdea 	bl	800b02e <assert_failed>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800645a:	6962      	ldr	r2, [r4, #20]
 800645c:	4b3b      	ldr	r3, [pc, #236]	; (800654c <HAL_RCC_OscConfig+0x2b0>)
 800645e:	b17a      	cbz	r2, 8006480 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 8006460:	2201      	movs	r2, #1
 8006462:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006464:	f7fd fdac 	bl	8003fc0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006468:	4d36      	ldr	r5, [pc, #216]	; (8006544 <HAL_RCC_OscConfig+0x2a8>)
      tickstart = HAL_GetTick();
 800646a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800646c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800646e:	079b      	lsls	r3, r3, #30
 8006470:	f53f af2d 	bmi.w	80062ce <HAL_RCC_OscConfig+0x32>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006474:	f7fd fda4 	bl	8003fc0 <HAL_GetTick>
 8006478:	1b80      	subs	r0, r0, r6
 800647a:	2802      	cmp	r0, #2
 800647c:	d9f6      	bls.n	800646c <HAL_RCC_OscConfig+0x1d0>
 800647e:	e76e      	b.n	800635e <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8006480:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006482:	f7fd fd9d 	bl	8003fc0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006486:	4d2f      	ldr	r5, [pc, #188]	; (8006544 <HAL_RCC_OscConfig+0x2a8>)
      tickstart = HAL_GetTick();
 8006488:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800648a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800648c:	079f      	lsls	r7, r3, #30
 800648e:	f57f af1e 	bpl.w	80062ce <HAL_RCC_OscConfig+0x32>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006492:	f7fd fd95 	bl	8003fc0 <HAL_GetTick>
 8006496:	1b80      	subs	r0, r0, r6
 8006498:	2802      	cmp	r0, #2
 800649a:	d9f6      	bls.n	800648a <HAL_RCC_OscConfig+0x1ee>
 800649c:	e75f      	b.n	800635e <HAL_RCC_OscConfig+0xc2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800649e:	68a3      	ldr	r3, [r4, #8]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d906      	bls.n	80064b2 <HAL_RCC_OscConfig+0x216>
 80064a4:	2b05      	cmp	r3, #5
 80064a6:	d004      	beq.n	80064b2 <HAL_RCC_OscConfig+0x216>
 80064a8:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80064ac:	4824      	ldr	r0, [pc, #144]	; (8006540 <HAL_RCC_OscConfig+0x2a4>)
 80064ae:	f004 fdbe 	bl	800b02e <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064b2:	4b24      	ldr	r3, [pc, #144]	; (8006544 <HAL_RCC_OscConfig+0x2a8>)
 80064b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064b6:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80064ba:	d128      	bne.n	800650e <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_PWR_CLK_ENABLE();
 80064bc:	9201      	str	r2, [sp, #4]
 80064be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80064c4:	641a      	str	r2, [r3, #64]	; 0x40
 80064c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064cc:	9301      	str	r3, [sp, #4]
 80064ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80064d0:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d2:	4d1f      	ldr	r5, [pc, #124]	; (8006550 <HAL_RCC_OscConfig+0x2b4>)
 80064d4:	682b      	ldr	r3, [r5, #0]
 80064d6:	05d8      	lsls	r0, r3, #23
 80064d8:	d51b      	bpl.n	8006512 <HAL_RCC_OscConfig+0x276>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064da:	68a3      	ldr	r3, [r4, #8]
 80064dc:	4d19      	ldr	r5, [pc, #100]	; (8006544 <HAL_RCC_OscConfig+0x2a8>)
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d127      	bne.n	8006532 <HAL_RCC_OscConfig+0x296>
 80064e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80064e4:	f043 0301 	orr.w	r3, r3, #1
 80064e8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80064ea:	f7fd fd69 	bl	8003fc0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064ee:	4d15      	ldr	r5, [pc, #84]	; (8006544 <HAL_RCC_OscConfig+0x2a8>)
      tickstart = HAL_GetTick();
 80064f0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064f2:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80064f8:	079a      	lsls	r2, r3, #30
 80064fa:	d543      	bpl.n	8006584 <HAL_RCC_OscConfig+0x2e8>
    if(pwrclkchanged == SET)
 80064fc:	2e00      	cmp	r6, #0
 80064fe:	f43f aeea 	beq.w	80062d6 <HAL_RCC_OscConfig+0x3a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006502:	4a10      	ldr	r2, [pc, #64]	; (8006544 <HAL_RCC_OscConfig+0x2a8>)
 8006504:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800650a:	6413      	str	r3, [r2, #64]	; 0x40
 800650c:	e6e3      	b.n	80062d6 <HAL_RCC_OscConfig+0x3a>
    FlagStatus       pwrclkchanged = RESET;
 800650e:	2600      	movs	r6, #0
 8006510:	e7df      	b.n	80064d2 <HAL_RCC_OscConfig+0x236>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006512:	682b      	ldr	r3, [r5, #0]
 8006514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006518:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800651a:	f7fd fd51 	bl	8003fc0 <HAL_GetTick>
 800651e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006520:	682b      	ldr	r3, [r5, #0]
 8006522:	05d9      	lsls	r1, r3, #23
 8006524:	d4d9      	bmi.n	80064da <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006526:	f7fd fd4b 	bl	8003fc0 <HAL_GetTick>
 800652a:	1bc0      	subs	r0, r0, r7
 800652c:	2802      	cmp	r0, #2
 800652e:	d9f7      	bls.n	8006520 <HAL_RCC_OscConfig+0x284>
 8006530:	e715      	b.n	800635e <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006532:	2b05      	cmp	r3, #5
 8006534:	d10e      	bne.n	8006554 <HAL_RCC_OscConfig+0x2b8>
 8006536:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006538:	f043 0304 	orr.w	r3, r3, #4
 800653c:	672b      	str	r3, [r5, #112]	; 0x70
 800653e:	e7d0      	b.n	80064e2 <HAL_RCC_OscConfig+0x246>
 8006540:	0800c94c 	.word	0x0800c94c
 8006544:	40023800 	.word	0x40023800
 8006548:	42470000 	.word	0x42470000
 800654c:	42470e80 	.word	0x42470e80
 8006550:	40007000 	.word	0x40007000
 8006554:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8006556:	f022 0201 	bic.w	r2, r2, #1
 800655a:	672a      	str	r2, [r5, #112]	; 0x70
 800655c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800655e:	f022 0204 	bic.w	r2, r2, #4
 8006562:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1c0      	bne.n	80064ea <HAL_RCC_OscConfig+0x24e>
      tickstart = HAL_GetTick();
 8006568:	f7fd fd2a 	bl	8003fc0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800656c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006570:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006572:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006574:	079b      	lsls	r3, r3, #30
 8006576:	d5c1      	bpl.n	80064fc <HAL_RCC_OscConfig+0x260>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006578:	f7fd fd22 	bl	8003fc0 <HAL_GetTick>
 800657c:	1bc0      	subs	r0, r0, r7
 800657e:	4540      	cmp	r0, r8
 8006580:	d9f7      	bls.n	8006572 <HAL_RCC_OscConfig+0x2d6>
 8006582:	e6ec      	b.n	800635e <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006584:	f7fd fd1c 	bl	8003fc0 <HAL_GetTick>
 8006588:	1bc0      	subs	r0, r0, r7
 800658a:	4540      	cmp	r0, r8
 800658c:	d9b3      	bls.n	80064f6 <HAL_RCC_OscConfig+0x25a>
 800658e:	e6e6      	b.n	800635e <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006590:	4e3b      	ldr	r6, [pc, #236]	; (8006680 <HAL_RCC_OscConfig+0x3e4>)
 8006592:	68b3      	ldr	r3, [r6, #8]
 8006594:	f003 030c 	and.w	r3, r3, #12
 8006598:	2b08      	cmp	r3, #8
 800659a:	f43f ae83 	beq.w	80062a4 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800659e:	2a02      	cmp	r2, #2
 80065a0:	4d38      	ldr	r5, [pc, #224]	; (8006684 <HAL_RCC_OscConfig+0x3e8>)
 80065a2:	d15e      	bne.n	8006662 <HAL_RCC_OscConfig+0x3c6>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80065a4:	69e3      	ldr	r3, [r4, #28]
 80065a6:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 80065aa:	d004      	beq.n	80065b6 <HAL_RCC_OscConfig+0x31a>
 80065ac:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 80065b0:	4835      	ldr	r0, [pc, #212]	; (8006688 <HAL_RCC_OscConfig+0x3ec>)
 80065b2:	f004 fd3c 	bl	800b02e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80065b6:	6a23      	ldr	r3, [r4, #32]
 80065b8:	2b3f      	cmp	r3, #63	; 0x3f
 80065ba:	d904      	bls.n	80065c6 <HAL_RCC_OscConfig+0x32a>
 80065bc:	f240 11e9 	movw	r1, #489	; 0x1e9
 80065c0:	4831      	ldr	r0, [pc, #196]	; (8006688 <HAL_RCC_OscConfig+0x3ec>)
 80065c2:	f004 fd34 	bl	800b02e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80065c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065c8:	3b32      	subs	r3, #50	; 0x32
 80065ca:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 80065ce:	d904      	bls.n	80065da <HAL_RCC_OscConfig+0x33e>
 80065d0:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80065d4:	482c      	ldr	r0, [pc, #176]	; (8006688 <HAL_RCC_OscConfig+0x3ec>)
 80065d6:	f004 fd2a 	bl	800b02e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80065da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80065dc:	2a08      	cmp	r2, #8
 80065de:	d804      	bhi.n	80065ea <HAL_RCC_OscConfig+0x34e>
 80065e0:	f44f 73aa 	mov.w	r3, #340	; 0x154
 80065e4:	40d3      	lsrs	r3, r2
 80065e6:	07d8      	lsls	r0, r3, #31
 80065e8:	d404      	bmi.n	80065f4 <HAL_RCC_OscConfig+0x358>
 80065ea:	f240 11eb 	movw	r1, #491	; 0x1eb
 80065ee:	4826      	ldr	r0, [pc, #152]	; (8006688 <HAL_RCC_OscConfig+0x3ec>)
 80065f0:	f004 fd1d 	bl	800b02e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80065f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80065f6:	3b02      	subs	r3, #2
 80065f8:	2b0d      	cmp	r3, #13
 80065fa:	d904      	bls.n	8006606 <HAL_RCC_OscConfig+0x36a>
 80065fc:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8006600:	4821      	ldr	r0, [pc, #132]	; (8006688 <HAL_RCC_OscConfig+0x3ec>)
 8006602:	f004 fd14 	bl	800b02e <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8006606:	2300      	movs	r3, #0
 8006608:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800660a:	f7fd fcd9 	bl	8003fc0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800660e:	4e1c      	ldr	r6, [pc, #112]	; (8006680 <HAL_RCC_OscConfig+0x3e4>)
        tickstart = HAL_GetTick();
 8006610:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006612:	6833      	ldr	r3, [r6, #0]
 8006614:	0199      	lsls	r1, r3, #6
 8006616:	d41e      	bmi.n	8006656 <HAL_RCC_OscConfig+0x3ba>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006618:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800661c:	4313      	orrs	r3, r2
 800661e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006620:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006624:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006626:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800662a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800662c:	4c14      	ldr	r4, [pc, #80]	; (8006680 <HAL_RCC_OscConfig+0x3e4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800662e:	0852      	lsrs	r2, r2, #1
 8006630:	3a01      	subs	r2, #1
 8006632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006636:	6073      	str	r3, [r6, #4]
        __HAL_RCC_PLL_ENABLE();
 8006638:	2301      	movs	r3, #1
 800663a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800663c:	f7fd fcc0 	bl	8003fc0 <HAL_GetTick>
 8006640:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	019a      	lsls	r2, r3, #6
 8006646:	f53f ae52 	bmi.w	80062ee <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800664a:	f7fd fcb9 	bl	8003fc0 <HAL_GetTick>
 800664e:	1b40      	subs	r0, r0, r5
 8006650:	2802      	cmp	r0, #2
 8006652:	d9f6      	bls.n	8006642 <HAL_RCC_OscConfig+0x3a6>
 8006654:	e683      	b.n	800635e <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006656:	f7fd fcb3 	bl	8003fc0 <HAL_GetTick>
 800665a:	1bc0      	subs	r0, r0, r7
 800665c:	2802      	cmp	r0, #2
 800665e:	d9d8      	bls.n	8006612 <HAL_RCC_OscConfig+0x376>
 8006660:	e67d      	b.n	800635e <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_PLL_DISABLE();
 8006662:	2300      	movs	r3, #0
 8006664:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006666:	f7fd fcab 	bl	8003fc0 <HAL_GetTick>
 800666a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800666c:	6833      	ldr	r3, [r6, #0]
 800666e:	019b      	lsls	r3, r3, #6
 8006670:	f57f ae3d 	bpl.w	80062ee <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006674:	f7fd fca4 	bl	8003fc0 <HAL_GetTick>
 8006678:	1b00      	subs	r0, r0, r4
 800667a:	2802      	cmp	r0, #2
 800667c:	d9f6      	bls.n	800666c <HAL_RCC_OscConfig+0x3d0>
 800667e:	e66e      	b.n	800635e <HAL_RCC_OscConfig+0xc2>
 8006680:	40023800 	.word	0x40023800
 8006684:	42470060 	.word	0x42470060
 8006688:	0800c94c 	.word	0x0800c94c

0800668c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800668c:	4913      	ldr	r1, [pc, #76]	; (80066dc <HAL_RCC_GetSysClockFreq+0x50>)
{
 800668e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006690:	688b      	ldr	r3, [r1, #8]
 8006692:	f003 030c 	and.w	r3, r3, #12
 8006696:	2b04      	cmp	r3, #4
 8006698:	d003      	beq.n	80066a2 <HAL_RCC_GetSysClockFreq+0x16>
 800669a:	2b08      	cmp	r3, #8
 800669c:	d003      	beq.n	80066a6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800669e:	4810      	ldr	r0, [pc, #64]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 80066a0:	e000      	b.n	80066a4 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 80066a2:	4810      	ldr	r0, [pc, #64]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x58>)
}
 80066a4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066a6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066a8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066aa:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066ac:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066b0:	bf14      	ite	ne
 80066b2:	480c      	ldrne	r0, [pc, #48]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066b4:	480a      	ldreq	r0, [pc, #40]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066b6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80066ba:	bf18      	it	ne
 80066bc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066c2:	fba1 0100 	umull	r0, r1, r1, r0
 80066c6:	f7fc ff13 	bl	80034f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066ca:	4b04      	ldr	r3, [pc, #16]	; (80066dc <HAL_RCC_GetSysClockFreq+0x50>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80066d2:	3301      	adds	r3, #1
 80066d4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80066d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80066da:	e7e3      	b.n	80066a4 <HAL_RCC_GetSysClockFreq+0x18>
 80066dc:	40023800 	.word	0x40023800
 80066e0:	00f42400 	.word	0x00f42400
 80066e4:	007a1200 	.word	0x007a1200

080066e8 <HAL_RCC_ClockConfig>:
{
 80066e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ec:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80066ee:	4604      	mov	r4, r0
 80066f0:	b910      	cbnz	r0, 80066f8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80066f2:	2001      	movs	r0, #1
}
 80066f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80066f8:	6803      	ldr	r3, [r0, #0]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	2b0e      	cmp	r3, #14
 80066fe:	d904      	bls.n	800670a <HAL_RCC_ClockConfig+0x22>
 8006700:	f44f 7114 	mov.w	r1, #592	; 0x250
 8006704:	486c      	ldr	r0, [pc, #432]	; (80068b8 <HAL_RCC_ClockConfig+0x1d0>)
 8006706:	f004 fc92 	bl	800b02e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800670a:	2d07      	cmp	r5, #7
 800670c:	d904      	bls.n	8006718 <HAL_RCC_ClockConfig+0x30>
 800670e:	f240 2151 	movw	r1, #593	; 0x251
 8006712:	4869      	ldr	r0, [pc, #420]	; (80068b8 <HAL_RCC_ClockConfig+0x1d0>)
 8006714:	f004 fc8b 	bl	800b02e <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006718:	4b68      	ldr	r3, [pc, #416]	; (80068bc <HAL_RCC_ClockConfig+0x1d4>)
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	f002 020f 	and.w	r2, r2, #15
 8006720:	42aa      	cmp	r2, r5
 8006722:	d33c      	bcc.n	800679e <HAL_RCC_ClockConfig+0xb6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006724:	6822      	ldr	r2, [r4, #0]
 8006726:	0796      	lsls	r6, r2, #30
 8006728:	d441      	bmi.n	80067ae <HAL_RCC_ClockConfig+0xc6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	07d9      	lsls	r1, r3, #31
 800672e:	d46b      	bmi.n	8006808 <HAL_RCC_ClockConfig+0x120>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006730:	4b62      	ldr	r3, [pc, #392]	; (80068bc <HAL_RCC_ClockConfig+0x1d4>)
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	f002 020f 	and.w	r2, r2, #15
 8006738:	42aa      	cmp	r2, r5
 800673a:	f200 809a 	bhi.w	8006872 <HAL_RCC_ClockConfig+0x18a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	075a      	lsls	r2, r3, #29
 8006742:	f100 809f 	bmi.w	8006884 <HAL_RCC_ClockConfig+0x19c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	071b      	lsls	r3, r3, #28
 800674a:	d518      	bpl.n	800677e <HAL_RCC_ClockConfig+0x96>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800674c:	6923      	ldr	r3, [r4, #16]
 800674e:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8006752:	d00c      	beq.n	800676e <HAL_RCC_ClockConfig+0x86>
 8006754:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006758:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 800675c:	d007      	beq.n	800676e <HAL_RCC_ClockConfig+0x86>
 800675e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006762:	d004      	beq.n	800676e <HAL_RCC_ClockConfig+0x86>
 8006764:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8006768:	4853      	ldr	r0, [pc, #332]	; (80068b8 <HAL_RCC_ClockConfig+0x1d0>)
 800676a:	f004 fc60 	bl	800b02e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800676e:	4a54      	ldr	r2, [pc, #336]	; (80068c0 <HAL_RCC_ClockConfig+0x1d8>)
 8006770:	6921      	ldr	r1, [r4, #16]
 8006772:	6893      	ldr	r3, [r2, #8]
 8006774:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006778:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800677c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800677e:	f7ff ff85 	bl	800668c <HAL_RCC_GetSysClockFreq>
 8006782:	4b4f      	ldr	r3, [pc, #316]	; (80068c0 <HAL_RCC_ClockConfig+0x1d8>)
 8006784:	4a4f      	ldr	r2, [pc, #316]	; (80068c4 <HAL_RCC_ClockConfig+0x1dc>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800678c:	5cd3      	ldrb	r3, [r2, r3]
 800678e:	40d8      	lsrs	r0, r3
 8006790:	4b4d      	ldr	r3, [pc, #308]	; (80068c8 <HAL_RCC_ClockConfig+0x1e0>)
 8006792:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8006794:	2000      	movs	r0, #0
 8006796:	f7fd fbc9 	bl	8003f2c <HAL_InitTick>
  return HAL_OK;
 800679a:	2000      	movs	r0, #0
 800679c:	e7aa      	b.n	80066f4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800679e:	b2ea      	uxtb	r2, r5
 80067a0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 030f 	and.w	r3, r3, #15
 80067a8:	42ab      	cmp	r3, r5
 80067aa:	d1a2      	bne.n	80066f2 <HAL_RCC_ClockConfig+0xa>
 80067ac:	e7ba      	b.n	8006724 <HAL_RCC_ClockConfig+0x3c>
 80067ae:	4b44      	ldr	r3, [pc, #272]	; (80068c0 <HAL_RCC_ClockConfig+0x1d8>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b0:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067b4:	bf1e      	ittt	ne
 80067b6:	6899      	ldrne	r1, [r3, #8]
 80067b8:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80067bc:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067be:	0710      	lsls	r0, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067c0:	bf42      	ittt	mi
 80067c2:	689a      	ldrmi	r2, [r3, #8]
 80067c4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80067c8:	609a      	strmi	r2, [r3, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80067ca:	68a3      	ldr	r3, [r4, #8]
 80067cc:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 80067d0:	d012      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x110>
 80067d2:	f023 0220 	bic.w	r2, r3, #32
 80067d6:	2a90      	cmp	r2, #144	; 0x90
 80067d8:	d00e      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x110>
 80067da:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80067de:	2aa0      	cmp	r2, #160	; 0xa0
 80067e0:	d00a      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x110>
 80067e2:	f023 0210 	bic.w	r2, r3, #16
 80067e6:	2ac0      	cmp	r2, #192	; 0xc0
 80067e8:	d006      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x110>
 80067ea:	2bf0      	cmp	r3, #240	; 0xf0
 80067ec:	d004      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x110>
 80067ee:	f44f 711d 	mov.w	r1, #628	; 0x274
 80067f2:	4831      	ldr	r0, [pc, #196]	; (80068b8 <HAL_RCC_ClockConfig+0x1d0>)
 80067f4:	f004 fc1b 	bl	800b02e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067f8:	4a31      	ldr	r2, [pc, #196]	; (80068c0 <HAL_RCC_ClockConfig+0x1d8>)
 80067fa:	68a1      	ldr	r1, [r4, #8]
 80067fc:	6893      	ldr	r3, [r2, #8]
 80067fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006802:	430b      	orrs	r3, r1
 8006804:	6093      	str	r3, [r2, #8]
 8006806:	e790      	b.n	800672a <HAL_RCC_ClockConfig+0x42>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006808:	6863      	ldr	r3, [r4, #4]
 800680a:	2b03      	cmp	r3, #3
 800680c:	d904      	bls.n	8006818 <HAL_RCC_ClockConfig+0x130>
 800680e:	f240 217b 	movw	r1, #635	; 0x27b
 8006812:	4829      	ldr	r0, [pc, #164]	; (80068b8 <HAL_RCC_ClockConfig+0x1d0>)
 8006814:	f004 fc0b 	bl	800b02e <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006818:	6862      	ldr	r2, [r4, #4]
 800681a:	4b29      	ldr	r3, [pc, #164]	; (80068c0 <HAL_RCC_ClockConfig+0x1d8>)
 800681c:	2a01      	cmp	r2, #1
 800681e:	d11e      	bne.n	800685e <HAL_RCC_ClockConfig+0x176>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006826:	f43f af64 	beq.w	80066f2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800682a:	4e25      	ldr	r6, [pc, #148]	; (80068c0 <HAL_RCC_ClockConfig+0x1d8>)
 800682c:	68b3      	ldr	r3, [r6, #8]
 800682e:	f023 0303 	bic.w	r3, r3, #3
 8006832:	4313      	orrs	r3, r2
 8006834:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006836:	f7fd fbc3 	bl	8003fc0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800683a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800683e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006840:	68b3      	ldr	r3, [r6, #8]
 8006842:	6862      	ldr	r2, [r4, #4]
 8006844:	f003 030c 	and.w	r3, r3, #12
 8006848:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800684c:	f43f af70 	beq.w	8006730 <HAL_RCC_ClockConfig+0x48>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006850:	f7fd fbb6 	bl	8003fc0 <HAL_GetTick>
 8006854:	1bc0      	subs	r0, r0, r7
 8006856:	4540      	cmp	r0, r8
 8006858:	d9f2      	bls.n	8006840 <HAL_RCC_ClockConfig+0x158>
        return HAL_TIMEOUT;
 800685a:	2003      	movs	r0, #3
 800685c:	e74a      	b.n	80066f4 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800685e:	1e91      	subs	r1, r2, #2
 8006860:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006862:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006864:	d802      	bhi.n	800686c <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006866:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800686a:	e7dc      	b.n	8006826 <HAL_RCC_ClockConfig+0x13e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800686c:	f013 0f02 	tst.w	r3, #2
 8006870:	e7d9      	b.n	8006826 <HAL_RCC_ClockConfig+0x13e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006872:	b2ea      	uxtb	r2, r5
 8006874:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 030f 	and.w	r3, r3, #15
 800687c:	42ab      	cmp	r3, r5
 800687e:	f47f af38 	bne.w	80066f2 <HAL_RCC_ClockConfig+0xa>
 8006882:	e75c      	b.n	800673e <HAL_RCC_ClockConfig+0x56>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006884:	68e3      	ldr	r3, [r4, #12]
 8006886:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800688a:	d00c      	beq.n	80068a6 <HAL_RCC_ClockConfig+0x1be>
 800688c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006890:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8006894:	d007      	beq.n	80068a6 <HAL_RCC_ClockConfig+0x1be>
 8006896:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800689a:	d004      	beq.n	80068a6 <HAL_RCC_ClockConfig+0x1be>
 800689c:	f240 21b9 	movw	r1, #697	; 0x2b9
 80068a0:	4805      	ldr	r0, [pc, #20]	; (80068b8 <HAL_RCC_ClockConfig+0x1d0>)
 80068a2:	f004 fbc4 	bl	800b02e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068a6:	4a06      	ldr	r2, [pc, #24]	; (80068c0 <HAL_RCC_ClockConfig+0x1d8>)
 80068a8:	68e1      	ldr	r1, [r4, #12]
 80068aa:	6893      	ldr	r3, [r2, #8]
 80068ac:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80068b0:	430b      	orrs	r3, r1
 80068b2:	6093      	str	r3, [r2, #8]
 80068b4:	e747      	b.n	8006746 <HAL_RCC_ClockConfig+0x5e>
 80068b6:	bf00      	nop
 80068b8:	0800c94c 	.word	0x0800c94c
 80068bc:	40023c00 	.word	0x40023c00
 80068c0:	40023800 	.word	0x40023800
 80068c4:	0800cfb6 	.word	0x0800cfb6
 80068c8:	20000084 	.word	0x20000084

080068cc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80068cc:	4b01      	ldr	r3, [pc, #4]	; (80068d4 <HAL_RCC_GetHCLKFreq+0x8>)
 80068ce:	6818      	ldr	r0, [r3, #0]
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20000084 	.word	0x20000084

080068d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068d8:	4b04      	ldr	r3, [pc, #16]	; (80068ec <HAL_RCC_GetPCLK1Freq+0x14>)
 80068da:	4a05      	ldr	r2, [pc, #20]	; (80068f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80068e2:	5cd3      	ldrb	r3, [r2, r3]
 80068e4:	4a03      	ldr	r2, [pc, #12]	; (80068f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80068e6:	6810      	ldr	r0, [r2, #0]
}
 80068e8:	40d8      	lsrs	r0, r3
 80068ea:	4770      	bx	lr
 80068ec:	40023800 	.word	0x40023800
 80068f0:	0800cfc6 	.word	0x0800cfc6
 80068f4:	20000084 	.word	0x20000084

080068f8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80068f8:	4b04      	ldr	r3, [pc, #16]	; (800690c <HAL_RCC_GetPCLK2Freq+0x14>)
 80068fa:	4a05      	ldr	r2, [pc, #20]	; (8006910 <HAL_RCC_GetPCLK2Freq+0x18>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006902:	5cd3      	ldrb	r3, [r2, r3]
 8006904:	4a03      	ldr	r2, [pc, #12]	; (8006914 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006906:	6810      	ldr	r0, [r2, #0]
}
 8006908:	40d8      	lsrs	r0, r3
 800690a:	4770      	bx	lr
 800690c:	40023800 	.word	0x40023800
 8006910:	0800cfc6 	.word	0x0800cfc6
 8006914:	20000084 	.word	0x20000084

08006918 <HAL_RCCEx_PeriphCLKConfig>:
{
  uint32_t tickstart = 0U;
  uint32_t tmpreg1 = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006918:	6803      	ldr	r3, [r0, #0]
 800691a:	3b01      	subs	r3, #1
 800691c:	2b06      	cmp	r3, #6
{
 800691e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006920:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006922:	d904      	bls.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x16>
 8006924:	f640 11dd 	movw	r1, #2525	; 0x9dd
 8006928:	486a      	ldr	r0, [pc, #424]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800692a:	f004 fb80 	bl	800b02e <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	f013 0f05 	tst.w	r3, #5
 8006934:	d105      	bne.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006936:	6820      	ldr	r0, [r4, #0]
 8006938:	f010 0002 	ands.w	r0, r0, #2
 800693c:	d13b      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 800693e:	b003      	add	sp, #12
 8006940:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006942:	68a3      	ldr	r3, [r4, #8]
 8006944:	3b02      	subs	r3, #2
 8006946:	2b05      	cmp	r3, #5
 8006948:	d904      	bls.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800694a:	f640 11e4 	movw	r1, #2532	; 0x9e4
 800694e:	4861      	ldr	r0, [pc, #388]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006950:	f004 fb6d 	bl	800b02e <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006954:	6863      	ldr	r3, [r4, #4]
 8006956:	3b32      	subs	r3, #50	; 0x32
 8006958:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800695c:	d904      	bls.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800695e:	f640 11e5 	movw	r1, #2533	; 0x9e5
 8006962:	485c      	ldr	r0, [pc, #368]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006964:	f004 fb63 	bl	800b02e <assert_failed>
    __HAL_RCC_PLLI2S_DISABLE();
 8006968:	4d5b      	ldr	r5, [pc, #364]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800696a:	4e5c      	ldr	r6, [pc, #368]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
    __HAL_RCC_PLLI2S_DISABLE();
 800696c:	2300      	movs	r3, #0
 800696e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8006970:	f7fd fb26 	bl	8003fc0 <HAL_GetTick>
 8006974:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006976:	6833      	ldr	r3, [r6, #0]
 8006978:	011b      	lsls	r3, r3, #4
 800697a:	d415      	bmi.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800697c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8006980:	071b      	lsls	r3, r3, #28
 8006982:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006986:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800698a:	2301      	movs	r3, #1
 800698c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800698e:	f7fd fb17 	bl	8003fc0 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006992:	4d52      	ldr	r5, [pc, #328]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
    tickstart = HAL_GetTick();
 8006994:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006996:	682b      	ldr	r3, [r5, #0]
 8006998:	0118      	lsls	r0, r3, #4
 800699a:	d4cc      	bmi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800699c:	f7fd fb10 	bl	8003fc0 <HAL_GetTick>
 80069a0:	1b80      	subs	r0, r0, r6
 80069a2:	2802      	cmp	r0, #2
 80069a4:	d9f7      	bls.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 80069a6:	e004      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80069a8:	f7fd fb0a 	bl	8003fc0 <HAL_GetTick>
 80069ac:	1bc0      	subs	r0, r0, r7
 80069ae:	2802      	cmp	r0, #2
 80069b0:	d9e1      	bls.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x5e>
        return HAL_TIMEOUT;
 80069b2:	2003      	movs	r0, #3
 80069b4:	e7c3      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x26>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80069b6:	68e3      	ldr	r3, [r4, #12]
 80069b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069bc:	d02e      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x104>
 80069be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069c2:	d02b      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x104>
 80069c4:	4a46      	ldr	r2, [pc, #280]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80069c6:	f423 20a0 	bic.w	r0, r3, #327680	; 0x50000
 80069ca:	4290      	cmp	r0, r2
 80069cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069d0:	d024      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x104>
 80069d2:	f423 2010 	bic.w	r0, r3, #589824	; 0x90000
 80069d6:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 80069da:	4290      	cmp	r0, r2
 80069dc:	d01e      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x104>
 80069de:	4841      	ldr	r0, [pc, #260]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80069e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069e4:	4282      	cmp	r2, r0
 80069e6:	d019      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x104>
 80069e8:	f423 1388 	bic.w	r3, r3, #1114112	; 0x110000
 80069ec:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 80069f0:	4283      	cmp	r3, r0
 80069f2:	d013      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x104>
 80069f4:	4b3c      	ldr	r3, [pc, #240]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d010      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x104>
 80069fa:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d00c      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8006a02:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d008      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8006a0a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8006a0e:	4299      	cmp	r1, r3
 8006a10:	d004      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8006a12:	f640 2116 	movw	r1, #2582	; 0xa16
 8006a16:	482f      	ldr	r0, [pc, #188]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a18:	f004 fb09 	bl	800b02e <assert_failed>
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	4b2e      	ldr	r3, [pc, #184]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
    PWR->CR |= PWR_CR_DBP;
 8006a22:	4d32      	ldr	r5, [pc, #200]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a2a:	641a      	str	r2, [r3, #64]	; 0x40
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a32:	9301      	str	r3, [sp, #4]
 8006a34:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8006a36:	682b      	ldr	r3, [r5, #0]
 8006a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a3c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8006a3e:	f7fd fabf 	bl	8003fc0 <HAL_GetTick>
 8006a42:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006a44:	682b      	ldr	r3, [r5, #0]
 8006a46:	05d9      	lsls	r1, r3, #23
 8006a48:	d51b      	bpl.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a4a:	4d24      	ldr	r5, [pc, #144]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a4c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a4e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006a52:	d11c      	bne.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a54:	68e3      	ldr	r3, [r4, #12]
 8006a56:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006a5a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006a5e:	4a1f      	ldr	r2, [pc, #124]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a60:	d134      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006a62:	6891      	ldr	r1, [r2, #8]
 8006a64:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8006a68:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006a6c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8006a70:	4301      	orrs	r1, r0
 8006a72:	6091      	str	r1, [r2, #8]
 8006a74:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8006a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a7a:	430b      	orrs	r3, r1
 8006a7c:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 8006a7e:	2000      	movs	r0, #0
 8006a80:	e75d      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x26>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006a82:	f7fd fa9d 	bl	8003fc0 <HAL_GetTick>
 8006a86:	1b80      	subs	r0, r0, r6
 8006a88:	2802      	cmp	r0, #2
 8006a8a:	d9db      	bls.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8006a8c:	e791      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a8e:	68e2      	ldr	r2, [r4, #12]
 8006a90:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d0dd      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a98:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a9a:	4a15      	ldr	r2, [pc, #84]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8006aa8:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006aaa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006aac:	07da      	lsls	r2, r3, #31
 8006aae:	d5d1      	bpl.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
        tickstart = HAL_GetTick();
 8006ab0:	f7fd fa86 	bl	8003fc0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ab4:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006ab8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006abc:	079b      	lsls	r3, r3, #30
 8006abe:	d4c9      	bmi.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ac0:	f7fd fa7e 	bl	8003fc0 <HAL_GetTick>
 8006ac4:	1b80      	subs	r0, r0, r6
 8006ac6:	42b8      	cmp	r0, r7
 8006ac8:	d9f7      	bls.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8006aca:	e772      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006acc:	6891      	ldr	r1, [r2, #8]
 8006ace:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006ad2:	e7ce      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006ad4:	0800c984 	.word	0x0800c984
 8006ad8:	42470068 	.word	0x42470068
 8006adc:	40023800 	.word	0x40023800
 8006ae0:	00020300 	.word	0x00020300
 8006ae4:	00080300 	.word	0x00080300
 8006ae8:	00100300 	.word	0x00100300
 8006aec:	40007000 	.word	0x40007000
 8006af0:	42470e40 	.word	0x42470e40

08006af4 <HAL_RCCEx_GetPeriphCLKConfig>:

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006af4:	4a0a      	ldr	r2, [pc, #40]	; (8006b20 <HAL_RCCEx_GetPeriphCLKConfig+0x2c>)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8006af6:	2303      	movs	r3, #3
 8006af8:	6003      	str	r3, [r0, #0]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006afa:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8006afe:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8006b02:	6043      	str	r3, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b04:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8006b08:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8006b0c:	6083      	str	r3, [r0, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006b0e:	6891      	ldr	r1, [r2, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006b10:	6f13      	ldr	r3, [r2, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006b12:	f401 12f8 	and.w	r2, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60c3      	str	r3, [r0, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8006b1e:	4770      	bx	lr
 8006b20:	40023800 	.word	0x40023800

08006b24 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8006b24:	2801      	cmp	r0, #1
 8006b26:	d120      	bne.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006b28:	4b11      	ldr	r3, [pc, #68]	; (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8006b2a:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8006b2c:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8006b30:	d004      	beq.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8006b32:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006b34:	480f      	ldr	r0, [pc, #60]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8006b36:	bf18      	it	ne
 8006b38:	2000      	movne	r0, #0
 8006b3a:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006b3c:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006b3e:	490c      	ldr	r1, [pc, #48]	; (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b40:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006b42:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006b44:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b48:	bf4c      	ite	mi
 8006b4a:	4b0b      	ldrmi	r3, [pc, #44]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b4c:	4b0b      	ldrpl	r3, [pc, #44]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b4e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b52:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006b56:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006b5a:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8006b5e:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006b60:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8006b64:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8006b68:	4770      	bx	lr
          frequency = 0U;
 8006b6a:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40023800 	.word	0x40023800
 8006b74:	00bb8000 	.word	0x00bb8000
 8006b78:	007a1200 	.word	0x007a1200
 8006b7c:	00f42400 	.word	0x00f42400

08006b80 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmpreg = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006b84:	6842      	ldr	r2, [r0, #4]
 8006b86:	4b9d      	ldr	r3, [pc, #628]	; (8006dfc <UART_SetConfig+0x27c>)
 8006b88:	429a      	cmp	r2, r3
{
 8006b8a:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006b8c:	d904      	bls.n	8006b98 <UART_SetConfig+0x18>
 8006b8e:	f640 1185 	movw	r1, #2437	; 0x985
 8006b92:	489b      	ldr	r0, [pc, #620]	; (8006e00 <UART_SetConfig+0x280>)
 8006b94:	f004 fa4b 	bl	800b02e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006b98:	68e3      	ldr	r3, [r4, #12]
 8006b9a:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8006b9e:	d004      	beq.n	8006baa <UART_SetConfig+0x2a>
 8006ba0:	f640 1186 	movw	r1, #2438	; 0x986
 8006ba4:	4896      	ldr	r0, [pc, #600]	; (8006e00 <UART_SetConfig+0x280>)
 8006ba6:	f004 fa42 	bl	800b02e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006baa:	6923      	ldr	r3, [r4, #16]
 8006bac:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8006bb0:	d007      	beq.n	8006bc2 <UART_SetConfig+0x42>
 8006bb2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006bb6:	d004      	beq.n	8006bc2 <UART_SetConfig+0x42>
 8006bb8:	f640 1187 	movw	r1, #2439	; 0x987
 8006bbc:	4890      	ldr	r0, [pc, #576]	; (8006e00 <UART_SetConfig+0x280>)
 8006bbe:	f004 fa36 	bl	800b02e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006bc2:	6963      	ldr	r3, [r4, #20]
 8006bc4:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 8006bc8:	4213      	tst	r3, r2
 8006bca:	d100      	bne.n	8006bce <UART_SetConfig+0x4e>
 8006bcc:	b923      	cbnz	r3, 8006bd8 <UART_SetConfig+0x58>
 8006bce:	f640 1188 	movw	r1, #2440	; 0x988
 8006bd2:	488b      	ldr	r0, [pc, #556]	; (8006e00 <UART_SetConfig+0x280>)
 8006bd4:	f004 fa2b 	bl	800b02e <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8006bd8:	6823      	ldr	r3, [r4, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8006bda:	68e1      	ldr	r1, [r4, #12]
  tmpreg = huart->Instance->CR2;
 8006bdc:	691a      	ldr	r2, [r3, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bde:	6925      	ldr	r5, [r4, #16]
 8006be0:	69e0      	ldr	r0, [r4, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8006be2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8006be6:	430a      	orrs	r2, r1
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8006be8:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bea:	68a2      	ldr	r2, [r4, #8]
  tmpreg = huart->Instance->CR1;
 8006bec:	68d9      	ldr	r1, [r3, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bee:	432a      	orrs	r2, r5
 8006bf0:	6965      	ldr	r5, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8006bf2:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bf6:	432a      	orrs	r2, r5
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8006bf8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bfc:	4302      	orrs	r2, r0
 8006bfe:	430a      	orrs	r2, r1
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8006c00:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8006c02:	695a      	ldr	r2, [r3, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8006c04:	69a1      	ldr	r1, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8006c06:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8006c0a:	430a      	orrs	r2, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c0c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8006c10:	615a      	str	r2, [r3, #20]
 8006c12:	4a7c      	ldr	r2, [pc, #496]	; (8006e04 <UART_SetConfig+0x284>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c14:	d17b      	bne.n	8006d0e <UART_SetConfig+0x18e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d003      	beq.n	8006c22 <UART_SetConfig+0xa2>
 8006c1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d144      	bne.n	8006cac <UART_SetConfig+0x12c>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006c22:	f7ff fe69 	bl	80068f8 <HAL_RCC_GetPCLK2Freq>
 8006c26:	6867      	ldr	r7, [r4, #4]
 8006c28:	2519      	movs	r5, #25
 8006c2a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8006c2e:	fb05 f300 	mul.w	r3, r5, r0
 8006c32:	007f      	lsls	r7, r7, #1
 8006c34:	fbb3 f3f7 	udiv	r3, r3, r7
 8006c38:	fbb3 f3f8 	udiv	r3, r3, r8
 8006c3c:	011f      	lsls	r7, r3, #4
 8006c3e:	f7ff fe5b 	bl	80068f8 <HAL_RCC_GetPCLK2Freq>
 8006c42:	6863      	ldr	r3, [r4, #4]
 8006c44:	4368      	muls	r0, r5
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	fbb0 f6f3 	udiv	r6, r0, r3
 8006c4c:	f7ff fe54 	bl	80068f8 <HAL_RCC_GetPCLK2Freq>
 8006c50:	6863      	ldr	r3, [r4, #4]
 8006c52:	4368      	muls	r0, r5
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c5a:	fbb3 f3f8 	udiv	r3, r3, r8
 8006c5e:	fb08 6313 	mls	r3, r8, r3, r6
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	3332      	adds	r3, #50	; 0x32
 8006c66:	fbb3 f3f8 	udiv	r3, r3, r8
 8006c6a:	005b      	lsls	r3, r3, #1
 8006c6c:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8006c70:	f7ff fe42 	bl	80068f8 <HAL_RCC_GetPCLK2Freq>
 8006c74:	6862      	ldr	r2, [r4, #4]
 8006c76:	4368      	muls	r0, r5
 8006c78:	0052      	lsls	r2, r2, #1
 8006c7a:	fbb0 f9f2 	udiv	r9, r0, r2
 8006c7e:	f7ff fe3b 	bl	80068f8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006c82:	6863      	ldr	r3, [r4, #4]
 8006c84:	6822      	ldr	r2, [r4, #0]
 8006c86:	4368      	muls	r0, r5
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c8e:	fbb3 f3f8 	udiv	r3, r3, r8
 8006c92:	fb08 9313 	mls	r3, r8, r3, r9
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	3332      	adds	r3, #50	; 0x32
 8006c9a:	fbb3 f3f8 	udiv	r3, r3, r8
 8006c9e:	f003 0307 	and.w	r3, r3, #7
 8006ca2:	443b      	add	r3, r7
 8006ca4:	4433      	add	r3, r6
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006ca6:	6093      	str	r3, [r2, #8]
    }
  }
}
 8006ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006cac:	f7ff fe14 	bl	80068d8 <HAL_RCC_GetPCLK1Freq>
 8006cb0:	6867      	ldr	r7, [r4, #4]
 8006cb2:	2519      	movs	r5, #25
 8006cb4:	f04f 0864 	mov.w	r8, #100	; 0x64
 8006cb8:	fb05 f300 	mul.w	r3, r5, r0
 8006cbc:	007f      	lsls	r7, r7, #1
 8006cbe:	fbb3 f3f7 	udiv	r3, r3, r7
 8006cc2:	fbb3 f3f8 	udiv	r3, r3, r8
 8006cc6:	011f      	lsls	r7, r3, #4
 8006cc8:	f7ff fe06 	bl	80068d8 <HAL_RCC_GetPCLK1Freq>
 8006ccc:	6863      	ldr	r3, [r4, #4]
 8006cce:	4368      	muls	r0, r5
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	fbb0 f6f3 	udiv	r6, r0, r3
 8006cd6:	f7ff fdff 	bl	80068d8 <HAL_RCC_GetPCLK1Freq>
 8006cda:	6863      	ldr	r3, [r4, #4]
 8006cdc:	4368      	muls	r0, r5
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ce4:	fbb3 f3f8 	udiv	r3, r3, r8
 8006ce8:	fb08 6313 	mls	r3, r8, r3, r6
 8006cec:	00db      	lsls	r3, r3, #3
 8006cee:	3332      	adds	r3, #50	; 0x32
 8006cf0:	fbb3 f3f8 	udiv	r3, r3, r8
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8006cfa:	f7ff fded 	bl	80068d8 <HAL_RCC_GetPCLK1Freq>
 8006cfe:	6862      	ldr	r2, [r4, #4]
 8006d00:	4368      	muls	r0, r5
 8006d02:	0052      	lsls	r2, r2, #1
 8006d04:	fbb0 f9f2 	udiv	r9, r0, r2
 8006d08:	f7ff fde6 	bl	80068d8 <HAL_RCC_GetPCLK1Freq>
 8006d0c:	e7b9      	b.n	8006c82 <UART_SetConfig+0x102>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d002      	beq.n	8006d18 <UART_SetConfig+0x198>
 8006d12:	4a3d      	ldr	r2, [pc, #244]	; (8006e08 <UART_SetConfig+0x288>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d141      	bne.n	8006d9c <UART_SetConfig+0x21c>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006d18:	f7ff fdee 	bl	80068f8 <HAL_RCC_GetPCLK2Freq>
 8006d1c:	6867      	ldr	r7, [r4, #4]
 8006d1e:	2519      	movs	r5, #25
 8006d20:	f04f 0864 	mov.w	r8, #100	; 0x64
 8006d24:	fb05 f300 	mul.w	r3, r5, r0
 8006d28:	00bf      	lsls	r7, r7, #2
 8006d2a:	fbb3 f3f7 	udiv	r3, r3, r7
 8006d2e:	fbb3 f3f8 	udiv	r3, r3, r8
 8006d32:	011f      	lsls	r7, r3, #4
 8006d34:	f7ff fde0 	bl	80068f8 <HAL_RCC_GetPCLK2Freq>
 8006d38:	6863      	ldr	r3, [r4, #4]
 8006d3a:	4368      	muls	r0, r5
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	fbb0 f6f3 	udiv	r6, r0, r3
 8006d42:	f7ff fdd9 	bl	80068f8 <HAL_RCC_GetPCLK2Freq>
 8006d46:	6863      	ldr	r3, [r4, #4]
 8006d48:	4368      	muls	r0, r5
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d50:	fbb3 f3f8 	udiv	r3, r3, r8
 8006d54:	fb08 6313 	mls	r3, r8, r3, r6
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	3332      	adds	r3, #50	; 0x32
 8006d5c:	fbb3 f3f8 	udiv	r3, r3, r8
 8006d60:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8006d64:	f7ff fdc8 	bl	80068f8 <HAL_RCC_GetPCLK2Freq>
 8006d68:	6862      	ldr	r2, [r4, #4]
 8006d6a:	4368      	muls	r0, r5
 8006d6c:	0092      	lsls	r2, r2, #2
 8006d6e:	fbb0 f9f2 	udiv	r9, r0, r2
 8006d72:	f7ff fdc1 	bl	80068f8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006d76:	6863      	ldr	r3, [r4, #4]
 8006d78:	6822      	ldr	r2, [r4, #0]
 8006d7a:	4368      	muls	r0, r5
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d82:	fbb3 f3f8 	udiv	r3, r3, r8
 8006d86:	fb08 9313 	mls	r3, r8, r3, r9
 8006d8a:	011b      	lsls	r3, r3, #4
 8006d8c:	3332      	adds	r3, #50	; 0x32
 8006d8e:	fbb3 f3f8 	udiv	r3, r3, r8
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	4333      	orrs	r3, r6
 8006d98:	443b      	add	r3, r7
 8006d9a:	e784      	b.n	8006ca6 <UART_SetConfig+0x126>
 8006d9c:	f7ff fd9c 	bl	80068d8 <HAL_RCC_GetPCLK1Freq>
 8006da0:	6867      	ldr	r7, [r4, #4]
 8006da2:	2519      	movs	r5, #25
 8006da4:	f04f 0864 	mov.w	r8, #100	; 0x64
 8006da8:	fb05 f300 	mul.w	r3, r5, r0
 8006dac:	00bf      	lsls	r7, r7, #2
 8006dae:	fbb3 f3f7 	udiv	r3, r3, r7
 8006db2:	fbb3 f3f8 	udiv	r3, r3, r8
 8006db6:	011f      	lsls	r7, r3, #4
 8006db8:	f7ff fd8e 	bl	80068d8 <HAL_RCC_GetPCLK1Freq>
 8006dbc:	6863      	ldr	r3, [r4, #4]
 8006dbe:	4368      	muls	r0, r5
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	fbb0 f6f3 	udiv	r6, r0, r3
 8006dc6:	f7ff fd87 	bl	80068d8 <HAL_RCC_GetPCLK1Freq>
 8006dca:	6863      	ldr	r3, [r4, #4]
 8006dcc:	4368      	muls	r0, r5
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006dd4:	fbb3 f3f8 	udiv	r3, r3, r8
 8006dd8:	fb08 6313 	mls	r3, r8, r3, r6
 8006ddc:	011b      	lsls	r3, r3, #4
 8006dde:	3332      	adds	r3, #50	; 0x32
 8006de0:	fbb3 f3f8 	udiv	r3, r3, r8
 8006de4:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8006de8:	f7ff fd76 	bl	80068d8 <HAL_RCC_GetPCLK1Freq>
 8006dec:	6862      	ldr	r2, [r4, #4]
 8006dee:	4368      	muls	r0, r5
 8006df0:	0092      	lsls	r2, r2, #2
 8006df2:	fbb0 f9f2 	udiv	r9, r0, r2
 8006df6:	f7ff fd6f 	bl	80068d8 <HAL_RCC_GetPCLK1Freq>
 8006dfa:	e7bc      	b.n	8006d76 <UART_SetConfig+0x1f6>
 8006dfc:	00a037a0 	.word	0x00a037a0
 8006e00:	0800c9bf 	.word	0x0800c9bf
 8006e04:	40011000 	.word	0x40011000
 8006e08:	40011400 	.word	0x40011400

08006e0c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	4604      	mov	r4, r0
 8006e10:	460e      	mov	r6, r1
 8006e12:	4617      	mov	r7, r2
 8006e14:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8006e16:	6821      	ldr	r1, [r4, #0]
 8006e18:	680b      	ldr	r3, [r1, #0]
 8006e1a:	ea36 0303 	bics.w	r3, r6, r3
 8006e1e:	d101      	bne.n	8006e24 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8006e20:	2000      	movs	r0, #0
 8006e22:	e014      	b.n	8006e4e <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if(Timeout != HAL_MAX_DELAY)
 8006e24:	1c6b      	adds	r3, r5, #1
 8006e26:	d0f7      	beq.n	8006e18 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8006e28:	b995      	cbnz	r5, 8006e50 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e32:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	f022 0201 	bic.w	r2, r2, #1
 8006e3a:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8006e3c:	2320      	movs	r3, #32
 8006e3e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006e42:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8006e46:	2300      	movs	r3, #0
 8006e48:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8006e4c:	2003      	movs	r0, #3
}
 8006e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8006e50:	f7fd f8b6 	bl	8003fc0 <HAL_GetTick>
 8006e54:	1bc0      	subs	r0, r0, r7
 8006e56:	4285      	cmp	r5, r0
 8006e58:	d2dd      	bcs.n	8006e16 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8006e5a:	e7e6      	b.n	8006e2a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08006e5c <HAL_UART_MspInit>:
}
 8006e5c:	4770      	bx	lr
	...

08006e60 <HAL_UART_Init>:
{
 8006e60:	b510      	push	{r4, lr}
  if(huart == NULL)
 8006e62:	4604      	mov	r4, r0
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d074      	beq.n	8006f52 <HAL_UART_Init+0xf2>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006e68:	6981      	ldr	r1, [r0, #24]
 8006e6a:	6803      	ldr	r3, [r0, #0]
 8006e6c:	4a3a      	ldr	r2, [pc, #232]	; (8006f58 <HAL_UART_Init+0xf8>)
 8006e6e:	2900      	cmp	r1, #0
 8006e70:	d057      	beq.n	8006f22 <HAL_UART_Init+0xc2>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d010      	beq.n	8006e98 <HAL_UART_Init+0x38>
 8006e76:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d00c      	beq.n	8006e98 <HAL_UART_Init+0x38>
 8006e7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d008      	beq.n	8006e98 <HAL_UART_Init+0x38>
 8006e86:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d004      	beq.n	8006e98 <HAL_UART_Init+0x38>
 8006e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e92:	4832      	ldr	r0, [pc, #200]	; (8006f5c <HAL_UART_Init+0xfc>)
 8006e94:	f004 f8cb 	bl	800b02e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006e98:	69a3      	ldr	r3, [r4, #24]
 8006e9a:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8006e9e:	d004      	beq.n	8006eaa <HAL_UART_Init+0x4a>
 8006ea0:	f240 1101 	movw	r1, #257	; 0x101
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006ea4:	482d      	ldr	r0, [pc, #180]	; (8006f5c <HAL_UART_Init+0xfc>)
 8006ea6:	f004 f8c2 	bl	800b02e <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006eaa:	68a3      	ldr	r3, [r4, #8]
 8006eac:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8006eb0:	d004      	beq.n	8006ebc <HAL_UART_Init+0x5c>
 8006eb2:	f240 1107 	movw	r1, #263	; 0x107
 8006eb6:	4829      	ldr	r0, [pc, #164]	; (8006f5c <HAL_UART_Init+0xfc>)
 8006eb8:	f004 f8b9 	bl	800b02e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006ebc:	69e3      	ldr	r3, [r4, #28]
 8006ebe:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8006ec2:	d004      	beq.n	8006ece <HAL_UART_Init+0x6e>
 8006ec4:	f44f 7184 	mov.w	r1, #264	; 0x108
 8006ec8:	4824      	ldr	r0, [pc, #144]	; (8006f5c <HAL_UART_Init+0xfc>)
 8006eca:	f004 f8b0 	bl	800b02e <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 8006ece:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8006ed2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006ed6:	b923      	cbnz	r3, 8006ee2 <HAL_UART_Init+0x82>
    huart->Lock = HAL_UNLOCKED;
 8006ed8:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8006edc:	4620      	mov	r0, r4
 8006ede:	f7ff ffbd 	bl	8006e5c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006ee2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006ee4:	2324      	movs	r3, #36	; 0x24
 8006ee6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8006eea:	68d3      	ldr	r3, [r2, #12]
 8006eec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ef0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f7ff fe44 	bl	8006b80 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	691a      	ldr	r2, [r3, #16]
 8006efc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f02:	695a      	ldr	r2, [r3, #20]
 8006f04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f08:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f10:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f12:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8006f14:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f16:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8006f18:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8006f1c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8006f20:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d0c1      	beq.n	8006eaa <HAL_UART_Init+0x4a>
 8006f26:	4a0e      	ldr	r2, [pc, #56]	; (8006f60 <HAL_UART_Init+0x100>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d0be      	beq.n	8006eaa <HAL_UART_Init+0x4a>
 8006f2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d0ba      	beq.n	8006eaa <HAL_UART_Init+0x4a>
 8006f34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d0b6      	beq.n	8006eaa <HAL_UART_Init+0x4a>
 8006f3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d0b2      	beq.n	8006eaa <HAL_UART_Init+0x4a>
 8006f44:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d0ae      	beq.n	8006eaa <HAL_UART_Init+0x4a>
 8006f4c:	f240 1105 	movw	r1, #261	; 0x105
 8006f50:	e7a8      	b.n	8006ea4 <HAL_UART_Init+0x44>
    return HAL_ERROR;
 8006f52:	2001      	movs	r0, #1
 8006f54:	e7e4      	b.n	8006f20 <HAL_UART_Init+0xc0>
 8006f56:	bf00      	nop
 8006f58:	40011000 	.word	0x40011000
 8006f5c:	0800c9bf 	.word	0x0800c9bf
 8006f60:	40004400 	.word	0x40004400

08006f64 <HAL_UART_Transmit>:
{
 8006f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f68:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8006f6a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8006f6e:	2b20      	cmp	r3, #32
{
 8006f70:	4604      	mov	r4, r0
 8006f72:	460d      	mov	r5, r1
 8006f74:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8006f76:	d14d      	bne.n	8007014 <HAL_UART_Transmit+0xb0>
    if((pData == NULL ) || (Size == 0)) 
 8006f78:	2900      	cmp	r1, #0
 8006f7a:	d049      	beq.n	8007010 <HAL_UART_Transmit+0xac>
 8006f7c:	2a00      	cmp	r2, #0
 8006f7e:	d047      	beq.n	8007010 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8006f80:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d045      	beq.n	8007014 <HAL_UART_Transmit+0xb0>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f92:	2321      	movs	r3, #33	; 0x21
 8006f94:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8006f98:	f7fd f812 	bl	8003fc0 <HAL_GetTick>
    huart->TxXferSize = Size;
 8006f9c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8006fa0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8006fa2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8006fa6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	b963      	cbnz	r3, 8006fc6 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fac:	463b      	mov	r3, r7
 8006fae:	4632      	mov	r2, r6
 8006fb0:	2140      	movs	r1, #64	; 0x40
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f7ff ff2a 	bl	8006e0c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8006fb8:	b9a8      	cbnz	r0, 8006fe6 <HAL_UART_Transmit+0x82>
      huart->gState = HAL_UART_STATE_READY;
 8006fba:	2320      	movs	r3, #32
 8006fbc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8006fc0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8006fc4:	e010      	b.n	8006fe8 <HAL_UART_Transmit+0x84>
      huart->TxXferCount--;
 8006fc6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006fce:	68a3      	ldr	r3, [r4, #8]
 8006fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fd4:	4632      	mov	r2, r6
 8006fd6:	463b      	mov	r3, r7
 8006fd8:	f04f 0180 	mov.w	r1, #128	; 0x80
 8006fdc:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006fde:	d10e      	bne.n	8006ffe <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fe0:	f7ff ff14 	bl	8006e0c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8006fe4:	b110      	cbz	r0, 8006fec <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8006fe6:	2003      	movs	r0, #3
}
 8006fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006fec:	882b      	ldrh	r3, [r5, #0]
 8006fee:	6822      	ldr	r2, [r4, #0]
 8006ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff4:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8006ff6:	6923      	ldr	r3, [r4, #16]
 8006ff8:	b943      	cbnz	r3, 800700c <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8006ffa:	3502      	adds	r5, #2
 8006ffc:	e7d3      	b.n	8006fa6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ffe:	f7ff ff05 	bl	8006e0c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8007002:	2800      	cmp	r0, #0
 8007004:	d1ef      	bne.n	8006fe6 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	782a      	ldrb	r2, [r5, #0]
 800700a:	605a      	str	r2, [r3, #4]
 800700c:	3501      	adds	r5, #1
 800700e:	e7ca      	b.n	8006fa6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8007010:	2001      	movs	r0, #1
 8007012:	e7e9      	b.n	8006fe8 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8007014:	2002      	movs	r0, #2
 8007016:	e7e7      	b.n	8006fe8 <HAL_UART_Transmit+0x84>

08007018 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007018:	b084      	sub	sp, #16
 800701a:	b538      	push	{r3, r4, r5, lr}
 800701c:	ad05      	add	r5, sp, #20
 800701e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007024:	2b01      	cmp	r3, #1
{
 8007026:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007028:	d126      	bne.n	8007078 <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800702a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800702c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007030:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007032:	68c3      	ldr	r3, [r0, #12]
 8007034:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800703c:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800703e:	68c3      	ldr	r3, [r0, #12]
 8007040:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007044:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8007046:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007048:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800704a:	bf02      	ittt	eq
 800704c:	68c3      	ldreq	r3, [r0, #12]
 800704e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8007052:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8007054:	f000 f88a 	bl	800716c <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 8007058:	9b08      	ldr	r3, [sp, #32]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d107      	bne.n	800706e <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800705e:	68a3      	ldr	r3, [r4, #8]
 8007060:	f043 0306 	orr.w	r3, r3, #6
 8007064:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007066:	68a3      	ldr	r3, [r4, #8]
 8007068:	f043 0320 	orr.w	r3, r3, #32
 800706c:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 800706e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007072:	2000      	movs	r0, #0
 8007074:	b004      	add	sp, #16
 8007076:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007078:	68c3      	ldr	r3, [r0, #12]
 800707a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800707e:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8007080:	f000 f874 	bl	800716c <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8007084:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007088:	63a3      	str	r3, [r4, #56]	; 0x38
 800708a:	e7e5      	b.n	8007058 <USB_CoreInit+0x40>

0800708c <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800708c:	6883      	ldr	r3, [r0, #8]
 800708e:	f043 0301 	orr.w	r3, r3, #1
 8007092:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8007094:	2000      	movs	r0, #0
 8007096:	4770      	bx	lr

08007098 <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007098:	6883      	ldr	r3, [r0, #8]
 800709a:	f023 0301 	bic.w	r3, r3, #1
 800709e:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80070a0:	2000      	movs	r0, #0
 80070a2:	4770      	bx	lr

080070a4 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 80070a4:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80070a6:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 80070a8:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80070aa:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80070ae:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80070b0:	d108      	bne.n	80070c4 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80070b2:	68c3      	ldr	r3, [r0, #12]
 80070b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070b8:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 80070ba:	2032      	movs	r0, #50	; 0x32
 80070bc:	f7fc ff86 	bl	8003fcc <HAL_Delay>
  
  return HAL_OK;
}
 80070c0:	2000      	movs	r0, #0
 80070c2:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 80070c4:	2900      	cmp	r1, #0
 80070c6:	d1f8      	bne.n	80070ba <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80070c8:	68c3      	ldr	r3, [r0, #12]
 80070ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070ce:	60c3      	str	r3, [r0, #12]
 80070d0:	e7f3      	b.n	80070ba <USB_SetCurrentMode+0x16>
	...

080070d4 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80070d4:	0189      	lsls	r1, r1, #6
 80070d6:	f041 0120 	orr.w	r1, r1, #32
 80070da:	4a06      	ldr	r2, [pc, #24]	; (80070f4 <USB_FlushTxFifo+0x20>)
 80070dc:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80070de:	3a01      	subs	r2, #1
 80070e0:	d005      	beq.n	80070ee <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80070e2:	6903      	ldr	r3, [r0, #16]
 80070e4:	f013 0320 	ands.w	r3, r3, #32
 80070e8:	d1f9      	bne.n	80070de <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 80070ea:	4618      	mov	r0, r3
 80070ec:	4770      	bx	lr
      return HAL_TIMEOUT;
 80070ee:	2003      	movs	r0, #3
}
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	00030d41 	.word	0x00030d41

080070f8 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070f8:	2310      	movs	r3, #16
 80070fa:	4a06      	ldr	r2, [pc, #24]	; (8007114 <USB_FlushRxFifo+0x1c>)
 80070fc:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80070fe:	3a01      	subs	r2, #1
 8007100:	d005      	beq.n	800710e <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007102:	6903      	ldr	r3, [r0, #16]
 8007104:	f013 0310 	ands.w	r3, r3, #16
 8007108:	d1f9      	bne.n	80070fe <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 800710a:	4618      	mov	r0, r3
 800710c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800710e:	2003      	movs	r0, #3
}
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	00030d41 	.word	0x00030d41

08007118 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007118:	b510      	push	{r4, lr}
 800711a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 800711e:	b94c      	cbnz	r4, 8007134 <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8007120:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8007122:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
    count32b =  (len + 3U) / 4U;
 8007126:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8007128:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 800712c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++, src += 4U)
 8007130:	4299      	cmp	r1, r3
 8007132:	d101      	bne.n	8007138 <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8007134:	2000      	movs	r0, #0
 8007136:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8007138:	f851 0b04 	ldr.w	r0, [r1], #4
 800713c:	6010      	str	r0, [r2, #0]
 800713e:	e7f7      	b.n	8007130 <USB_WritePacket+0x18>

08007140 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8007140:	3203      	adds	r2, #3
 8007142:	0892      	lsrs	r2, r2, #2
 8007144:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8007148:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 800714c:	4291      	cmp	r1, r2
 800714e:	d101      	bne.n	8007154 <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8007150:	4608      	mov	r0, r1
 8007152:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8007154:	6803      	ldr	r3, [r0, #0]
 8007156:	f841 3b04 	str.w	r3, [r1], #4
 800715a:	e7f7      	b.n	800714c <USB_ReadPacket+0xc>

0800715c <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 800715c:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 800715e:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8007160:	4010      	ands	r0, r2
 8007162:	4770      	bx	lr

08007164 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8007164:	6940      	ldr	r0, [r0, #20]
}
 8007166:	f000 0001 	and.w	r0, r0, #1
 800716a:	4770      	bx	lr

0800716c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800716c:	4b0a      	ldr	r3, [pc, #40]	; (8007198 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800716e:	3b01      	subs	r3, #1
 8007170:	d00f      	beq.n	8007192 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007172:	6902      	ldr	r2, [r0, #16]
 8007174:	2a00      	cmp	r2, #0
 8007176:	dafa      	bge.n	800716e <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007178:	6903      	ldr	r3, [r0, #16]
 800717a:	4a07      	ldr	r2, [pc, #28]	; (8007198 <USB_CoreReset+0x2c>)
 800717c:	f043 0301 	orr.w	r3, r3, #1
 8007180:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8007182:	3a01      	subs	r2, #1
 8007184:	d005      	beq.n	8007192 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007186:	6903      	ldr	r3, [r0, #16]
 8007188:	f013 0301 	ands.w	r3, r3, #1
 800718c:	d1f9      	bne.n	8007182 <USB_CoreReset+0x16>
  
  return HAL_OK;
 800718e:	4618      	mov	r0, r3
 8007190:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007192:	2003      	movs	r0, #3
}
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	00030d41 	.word	0x00030d41

0800719c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800719c:	b084      	sub	sp, #16
 800719e:	b538      	push	{r3, r4, r5, lr}
 80071a0:	4604      	mov	r4, r0
 80071a2:	a805      	add	r0, sp, #20
 80071a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 80071ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80071b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071b4:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 80071b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80071b8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80071bc:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80071c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071c4:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 80071c6:	9b07      	ldr	r3, [sp, #28]
 80071c8:	2b03      	cmp	r3, #3
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 80071ca:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 80071ce:	d13c      	bne.n	800724a <USB_HostInit+0xae>
 80071d0:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80071d4:	d039      	beq.n	800724a <USB_HostInit+0xae>
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 80071d6:	f043 0304 	orr.w	r3, r3, #4
 80071da:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80071de:	2110      	movs	r1, #16
 80071e0:	4620      	mov	r0, r4
 80071e2:	f7ff ff77 	bl	80070d4 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80071e6:	4620      	mov	r0, r4
 80071e8:	f7ff ff86 	bl	80070f8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80071ec:	2300      	movs	r3, #0
 80071ee:	9906      	ldr	r1, [sp, #24]
 80071f0:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80071f4:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 80071f8:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 80071fa:	4299      	cmp	r1, r3
 80071fc:	d12a      	bne.n	8007254 <USB_HostInit+0xb8>
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 80071fe:	2101      	movs	r1, #1
 8007200:	4620      	mov	r0, r4
 8007202:	f000 f873 	bl	80072ec <USB_DriveVbus>
  
  HAL_Delay(200U);
 8007206:	20c8      	movs	r0, #200	; 0xc8
 8007208:	f7fc fee0 	bl	8003fcc <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
  
  if(USBx == USB_OTG_FS)
 8007210:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007214:	f04f 33ff 	mov.w	r3, #4294967295
 8007218:	6163      	str	r3, [r4, #20]
  if(USBx == USB_OTG_FS)
 800721a:	d120      	bne.n	800725e <USB_HostInit+0xc2>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U; 
 800721c:	2380      	movs	r3, #128	; 0x80
 800721e:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 8007220:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8007224:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007226:	4b13      	ldr	r3, [pc, #76]	; (8007274 <USB_HostInit+0xd8>)
 8007228:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 800722c:	9b08      	ldr	r3, [sp, #32]
 800722e:	b91b      	cbnz	r3, 8007238 <USB_HostInit+0x9c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8007230:	69a3      	ldr	r3, [r4, #24]
 8007232:	f043 0310 	orr.w	r3, r3, #16
 8007236:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 8007238:	69a2      	ldr	r2, [r4, #24]
 800723a:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <USB_HostInit+0xdc>)
 800723c:	4313      	orrs	r3, r2
 800723e:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 8007240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007244:	2000      	movs	r0, #0
 8007246:	b004      	add	sp, #16
 8007248:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 800724a:	f023 0304 	bic.w	r3, r3, #4
 800724e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8007252:	e7c4      	b.n	80071de <USB_HostInit+0x42>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007254:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007256:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8007258:	60d5      	str	r5, [r2, #12]
 800725a:	3220      	adds	r2, #32
 800725c:	e7cd      	b.n	80071fa <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x200U; 
 800725e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007262:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 8007264:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8007268:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800726a:	4b04      	ldr	r3, [pc, #16]	; (800727c <USB_HostInit+0xe0>)
 800726c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8007270:	e7dc      	b.n	800722c <USB_HostInit+0x90>
 8007272:	bf00      	nop
 8007274:	004000e0 	.word	0x004000e0
 8007278:	a3200008 	.word	0xa3200008
 800727c:	00e00300 	.word	0x00e00300

08007280 <USB_InitFSLSPClkSel>:
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007280:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8007284:	f023 0303 	bic.w	r3, r3, #3
{
 8007288:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800728a:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 800728e:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8007292:	f001 0303 	and.w	r3, r1, #3
 8007296:	4323      	orrs	r3, r4
  
  if (freq ==  HCFG_48_MHZ)
 8007298:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800729a:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 800729e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq ==  HCFG_48_MHZ)
 80072a2:	d104      	bne.n	80072ae <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 80072a4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80072a8:	6053      	str	r3, [r2, #4]
  else if (freq ==  HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
  } 
  return HAL_OK;  
}
 80072aa:	2000      	movs	r0, #0
 80072ac:	bd10      	pop	{r4, pc}
  else if (freq ==  HCFG_6_MHZ)
 80072ae:	2902      	cmp	r1, #2
    USBx_HOST->HFIR = 6000U;
 80072b0:	bf04      	itt	eq
 80072b2:	f241 7370 	movweq	r3, #6000	; 0x1770
 80072b6:	6053      	streq	r3, [r2, #4]
 80072b8:	e7f7      	b.n	80072aa <USB_InitFSLSPClkSel+0x2a>

080072ba <USB_ResetPort>:
  * @retval HAL status
  * @note   (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80072ba:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 80072bc:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80072c0:	9301      	str	r3, [sp, #4]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 80072c2:	9b01      	ldr	r3, [sp, #4]
 80072c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80072c8:	9301      	str	r3, [sp, #4]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 80072ca:	9b01      	ldr	r3, [sp, #4]
 80072cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80072d0:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 80072d2:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay (10U);                                /* See Note #1 */
 80072d6:	200a      	movs	r0, #10
 80072d8:	f7fc fe78 	bl	8003fcc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 80072dc:	9b01      	ldr	r3, [sp, #4]
  return HAL_OK;
}
 80072de:	2000      	movs	r0, #0
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 80072e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072e4:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
}
 80072e8:	b002      	add	sp, #8
 80072ea:	bd10      	pop	{r4, pc}

080072ec <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80072ec:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 80072ee:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80072f2:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 80072f4:	9b01      	ldr	r3, [sp, #4]
 80072f6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80072fa:	9301      	str	r3, [sp, #4]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80072fc:	9b01      	ldr	r3, [sp, #4]
 80072fe:	04da      	lsls	r2, r3, #19
 8007300:	d406      	bmi.n	8007310 <USB_DriveVbus+0x24>
 8007302:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 8007304:	bf02      	ittt	eq
 8007306:	9b01      	ldreq	r3, [sp, #4]
 8007308:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800730c:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007310:	9b01      	ldr	r3, [sp, #4]
 8007312:	04db      	lsls	r3, r3, #19
 8007314:	d505      	bpl.n	8007322 <USB_DriveVbus+0x36>
 8007316:	b921      	cbnz	r1, 8007322 <USB_DriveVbus+0x36>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 8007318:	9b01      	ldr	r3, [sp, #4]
 800731a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800731e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK; 
}
 8007322:	2000      	movs	r0, #0
 8007324:	b002      	add	sp, #8
 8007326:	4770      	bx	lr

08007328 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 8007328:	b082      	sub	sp, #8
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 800732a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800732e:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 8007330:	9801      	ldr	r0, [sp, #4]
}
 8007332:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8007336:	b002      	add	sp, #8
 8007338:	4770      	bx	lr

0800733a <USB_GetCurrentFrame>:
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800733a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800733e:	6880      	ldr	r0, [r0, #8]
}
 8007340:	b280      	uxth	r0, r0
 8007342:	4770      	bx	lr

08007344 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8007344:	b5f0      	push	{r4, r5, r6, r7, lr}
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 8007346:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 800734a:	eb04 1441 	add.w	r4, r4, r1, lsl #5
{
 800734e:	f89d 6018 	ldrb.w	r6, [sp, #24]
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 8007352:	f04f 35ff 	mov.w	r5, #4294967295
 8007356:	60a5      	str	r5, [r4, #8]
 8007358:	b255      	sxtb	r5, r2
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 800735a:	2e03      	cmp	r6, #3
 800735c:	d814      	bhi.n	8007388 <USB_HC_Init+0x44>
 800735e:	e8df f006 	tbb	[pc, r6]
 8007362:	4e02      	.short	0x4e02
 8007364:	4802      	.short	0x4802
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8007366:	f240 479d 	movw	r7, #1181	; 0x49d
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 800736a:	2d00      	cmp	r5, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800736c:	60e7      	str	r7, [r4, #12]
    if (epnum & 0x80U) 
 800736e:	da04      	bge.n	800737a <USB_HC_Init+0x36>
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007370:	68e7      	ldr	r7, [r4, #12]
 8007372:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 8007376:	60e7      	str	r7, [r4, #12]
 8007378:	e006      	b.n	8007388 <USB_HC_Init+0x44>
      if(USBx != USB_OTG_FS)
 800737a:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 800737e:	d003      	beq.n	8007388 <USB_HC_Init+0x44>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007380:	68e7      	ldr	r7, [r4, #12]
 8007382:	f047 0760 	orr.w	r7, r7, #96	; 0x60
 8007386:	60e7      	str	r7, [r4, #12]
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8007388:	059b      	lsls	r3, r3, #22
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 800738a:	02d2      	lsls	r2, r2, #11
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 800738c:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8007390:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8007394:	f8d0 e418 	ldr.w	lr, [r0, #1048]	; 0x418
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8007398:	431a      	orrs	r2, r3
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 800739a:	2701      	movs	r7, #1
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 800739c:	f89d 3014 	ldrb.w	r3, [sp, #20]
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80073a0:	fa07 f101 	lsl.w	r1, r7, r1
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80073a4:	2b02      	cmp	r3, #2
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80073a6:	ea41 010e 	orr.w	r1, r1, lr
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 80073aa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80073ae:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80073b2:	6981      	ldr	r1, [r0, #24]
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 80073b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 80073b8:	f405 4500 	and.w	r5, r5, #32768	; 0x8000
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80073bc:	ea43 0302 	orr.w	r3, r3, r2
 80073c0:	ea4f 4286 	mov.w	r2, r6, lsl #18
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80073c4:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80073c8:	ea43 0305 	orr.w	r3, r3, r5
 80073cc:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80073d0:	6181      	str	r1, [r0, #24]
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80073d2:	ea43 0302 	orr.w	r3, r3, r2
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80073d6:	bf14      	ite	ne
 80073d8:	2100      	movne	r1, #0
 80073da:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80073de:	430b      	orrs	r3, r1
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80073e0:	6023      	str	r3, [r4, #0]
    
  if (ep_type == EP_TYPE_INTR)
 80073e2:	2e03      	cmp	r6, #3
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80073e4:	bf02      	ittt	eq
 80073e6:	6823      	ldreq	r3, [r4, #0]
 80073e8:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 80073ec:	6023      	streq	r3, [r4, #0]
  }

  return HAL_OK; 
}
 80073ee:	2000      	movs	r0, #0
 80073f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80073f2:	f240 679d 	movw	r7, #1693	; 0x69d
    if (epnum & 0x80U) 
 80073f6:	2d00      	cmp	r5, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80073f8:	60e7      	str	r7, [r4, #12]
    if (epnum & 0x80U) 
 80073fa:	dac5      	bge.n	8007388 <USB_HC_Init+0x44>
 80073fc:	e7b8      	b.n	8007370 <USB_HC_Init+0x2c>
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80073fe:	f240 2725 	movw	r7, #549	; 0x225
 8007402:	60e7      	str	r7, [r4, #12]
    if (epnum & 0x80U) 
 8007404:	2d00      	cmp	r5, #0
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 8007406:	bfbe      	ittt	lt
 8007408:	68e7      	ldrlt	r7, [r4, #12]
 800740a:	f447 77c0 	orrlt.w	r7, r7, #384	; 0x180
 800740e:	60e7      	strlt	r7, [r4, #12]
 8007410:	e7ba      	b.n	8007388 <USB_HC_Init+0x44>
	...

08007414 <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08a      	sub	sp, #40	; 0x28
 8007418:	af02      	add	r7, sp, #8
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	4613      	mov	r3, r2
 8007420:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0; 
 8007422:	2300      	movs	r3, #0
 8007424:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0;   
 8007426:	2300      	movs	r3, #0
 8007428:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0;
 800742a:	2300      	movs	r3, #0
 800742c:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256;
 800742e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007432:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800743e:	d02a      	beq.n	8007496 <USB_HC_StartXfer+0x82>
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	791b      	ldrb	r3, [r3, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d126      	bne.n	8007496 <USB_HC_StartXfer+0x82>
  {
    if((dma == 0) && (hc->do_ping == 1U))
 8007448:	79fb      	ldrb	r3, [r7, #7]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10b      	bne.n	8007466 <USB_HC_StartXfer+0x52>
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	795b      	ldrb	r3, [r3, #5]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d107      	bne.n	8007466 <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	785b      	ldrb	r3, [r3, #1]
 800745a:	4619      	mov	r1, r3
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f000 fa03 	bl	8007868 <USB_DoPing>
      return HAL_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	e109      	b.n	800767a <USB_HC_StartXfer+0x266>
    }
    else if(dma == 1)
 8007466:	79fb      	ldrb	r3, [r7, #7]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d114      	bne.n	8007496 <USB_HC_StartXfer+0x82>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	785b      	ldrb	r3, [r3, #1]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	4413      	add	r3, r2
 8007476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	7852      	ldrb	r2, [r2, #1]
 8007480:	0151      	lsls	r1, r2, #5
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	440a      	add	r2, r1
 8007486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800748a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800748e:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2200      	movs	r2, #0
 8007494:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d019      	beq.n	80074d2 <USB_HC_StartXfer+0xbe>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	8912      	ldrh	r2, [r2, #8]
 80074a6:	4413      	add	r3, r2
 80074a8:	3b01      	subs	r3, #1
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	8912      	ldrh	r2, [r2, #8]
 80074ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80074b2:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 80074b4:	8bfa      	ldrh	r2, [r7, #30]
 80074b6:	8b3b      	ldrh	r3, [r7, #24]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d90c      	bls.n	80074d6 <USB_HC_StartXfer+0xc2>
    {
      num_packets = max_hc_pkt_count;
 80074bc:	8b3b      	ldrh	r3, [r7, #24]
 80074be:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 80074c0:	8bfb      	ldrh	r3, [r7, #30]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	8912      	ldrh	r2, [r2, #8]
 80074c6:	fb02 f303 	mul.w	r3, r2, r3
 80074ca:	461a      	mov	r2, r3
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	611a      	str	r2, [r3, #16]
 80074d0:	e001      	b.n	80074d6 <USB_HC_StartXfer+0xc2>
    }
  }
  else
  {
    num_packets = 1;
 80074d2:	2301      	movs	r3, #1
 80074d4:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	78db      	ldrb	r3, [r3, #3]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d007      	beq.n	80074ee <USB_HC_StartXfer+0xda>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 80074de:	8bfb      	ldrh	r3, [r7, #30]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	8912      	ldrh	r2, [r2, #8]
 80074e4:	fb02 f303 	mul.w	r3, r2, r3
 80074e8:	461a      	mov	r2, r3
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 80074f6:	8bfb      	ldrh	r3, [r7, #30]
 80074f8:	04db      	lsls	r3, r3, #19
 80074fa:	4619      	mov	r1, r3
 80074fc:	4b61      	ldr	r3, [pc, #388]	; (8007684 <USB_HC_StartXfer+0x270>)
 80074fe:	400b      	ands	r3, r1
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8007500:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	7a9b      	ldrb	r3, [r3, #10]
 8007506:	075b      	lsls	r3, r3, #29
 8007508:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800750c:	68b9      	ldr	r1, [r7, #8]
 800750e:	7849      	ldrb	r1, [r1, #1]
 8007510:	0148      	lsls	r0, r1, #5
 8007512:	68f9      	ldr	r1, [r7, #12]
 8007514:	4401      	add	r1, r0
 8007516:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 800751a:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800751c:	610b      	str	r3, [r1, #16]
  
  if (dma)
 800751e:	79fb      	ldrb	r3, [r7, #7]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <USB_HC_StartXfer+0x126>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	68d9      	ldr	r1, [r3, #12]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	785b      	ldrb	r3, [r3, #1]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4413      	add	r3, r2
 8007532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007536:	460a      	mov	r2, r1
 8007538:	615a      	str	r2, [r3, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b00      	cmp	r3, #0
 8007548:	bf0c      	ite	eq
 800754a:	2301      	moveq	r3, #1
 800754c:	2300      	movne	r3, #0
 800754e:	b2db      	uxtb	r3, r3
 8007550:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	785b      	ldrb	r3, [r3, #1]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	4413      	add	r3, r2
 800755c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	7852      	ldrb	r2, [r2, #1]
 8007566:	0151      	lsls	r1, r2, #5
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	440a      	add	r2, r1
 800756c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007570:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007574:	6013      	str	r3, [r2, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	785b      	ldrb	r3, [r3, #1]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	7f7a      	ldrb	r2, [r7, #29]
 8007588:	0752      	lsls	r2, r2, #29
 800758a:	4610      	mov	r0, r2
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	7852      	ldrb	r2, [r2, #1]
 8007590:	0151      	lsls	r1, r2, #5
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	440a      	add	r2, r1
 8007596:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800759a:	4303      	orrs	r3, r0
 800759c:	6013      	str	r3, [r2, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	785b      	ldrb	r3, [r3, #1]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075b6:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075be:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	785b      	ldrb	r3, [r3, #1]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ce:	461a      	mov	r2, r3
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	6013      	str	r3, [r2, #0]
  
  if (dma == 0) /* Slave mode */
 80075d4:	79fb      	ldrb	r3, [r7, #7]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d14e      	bne.n	8007678 <USB_HC_StartXfer+0x264>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	78db      	ldrb	r3, [r3, #3]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d14a      	bne.n	8007678 <USB_HC_StartXfer+0x264>
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d046      	beq.n	8007678 <USB_HC_StartXfer+0x264>
    {
      switch(hc->ep_type) 
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	79db      	ldrb	r3, [r3, #7]
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d830      	bhi.n	8007654 <USB_HC_StartXfer+0x240>
 80075f2:	a201      	add	r2, pc, #4	; (adr r2, 80075f8 <USB_HC_StartXfer+0x1e4>)
 80075f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f8:	08007609 	.word	0x08007609
 80075fc:	0800762d 	.word	0x0800762d
 8007600:	08007609 	.word	0x08007609
 8007604:	0800762d 	.word	0x0800762d
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3) / 4;
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	3303      	adds	r3, #3
 800760e:	089b      	lsrs	r3, r3, #2
 8007610:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 8007612:	8b7a      	ldrh	r2, [r7, #26]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007618:	b29b      	uxth	r3, r3
 800761a:	429a      	cmp	r2, r3
 800761c:	d91c      	bls.n	8007658 <USB_HC_StartXfer+0x244>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	f043 0220 	orr.w	r2, r3, #32
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	619a      	str	r2, [r3, #24]
        }
        break;
 800762a:	e015      	b.n	8007658 <USB_HC_StartXfer+0x244>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	3303      	adds	r3, #3
 8007632:	089b      	lsrs	r3, r3, #2
 8007634:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 8007636:	8b7a      	ldrh	r2, [r7, #26]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	b29b      	uxth	r3, r3
 8007642:	429a      	cmp	r2, r3
 8007644:	d90a      	bls.n	800765c <USB_HC_StartXfer+0x248>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	619a      	str	r2, [r3, #24]
        }
        break;
 8007652:	e003      	b.n	800765c <USB_HC_StartXfer+0x248>
        
      default:
        break;
 8007654:	bf00      	nop
 8007656:	e002      	b.n	800765e <USB_HC_StartXfer+0x24a>
        break;
 8007658:	bf00      	nop
 800765a:	e000      	b.n	800765e <USB_HC_StartXfer+0x24a>
        break;
 800765c:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	68d9      	ldr	r1, [r3, #12]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	785a      	ldrb	r2, [r3, #1]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	b298      	uxth	r0, r3
 800766c:	2300      	movs	r3, #0
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	4603      	mov	r3, r0
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f7ff fd50 	bl	8007118 <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3720      	adds	r7, #32
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	1ff80000 	.word	0x1ff80000

08007688 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	b29b      	uxth	r3, r3
}
 800769a:	4618      	mov	r0, r3
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b085      	sub	sp, #20
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	460b      	mov	r3, r1
 80076b0:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80076b6:	78fb      	ldrb	r3, [r7, #3]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	0c9b      	lsrs	r3, r3, #18
 80076c6:	f003 0303 	and.w	r3, r3, #3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00b      	beq.n	80076e6 <USB_HC_Halt+0x40>
 80076ce:	78fb      	ldrb	r3, [r7, #3]
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076da:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 80076dc:	0c9b      	lsrs	r3, r3, #18
 80076de:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d15c      	bne.n	80077a0 <USB_HC_Halt+0xfa>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	78fa      	ldrb	r2, [r7, #3]
 80076f6:	0151      	lsls	r1, r2, #5
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	440a      	add	r2, r1
 80076fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007700:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007704:	6013      	str	r3, [r2, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d133      	bne.n	800777a <USB_HC_Halt+0xd4>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007712:	78fb      	ldrb	r3, [r7, #3]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4413      	add	r3, r2
 800771a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	78fa      	ldrb	r2, [r7, #3]
 8007722:	0151      	lsls	r1, r2, #5
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	440a      	add	r2, r1
 8007728:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800772c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007730:	6013      	str	r3, [r2, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8007732:	78fb      	ldrb	r3, [r7, #3]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4413      	add	r3, r2
 800773a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	78fa      	ldrb	r2, [r7, #3]
 8007742:	0151      	lsls	r1, r2, #5
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	440a      	add	r2, r1
 8007748:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800774c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007750:	6013      	str	r3, [r2, #0]
      do 
      {
        if (++count > 1000U) 
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3301      	adds	r3, #1
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800775e:	d81d      	bhi.n	800779c <USB_HC_Halt+0xf6>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4413      	add	r3, r2
 8007768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007772:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007776:	d0ec      	beq.n	8007752 <USB_HC_Halt+0xac>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8007778:	e06f      	b.n	800785a <USB_HC_Halt+0x1b4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4413      	add	r3, r2
 8007782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	78fa      	ldrb	r2, [r7, #3]
 800778a:	0151      	lsls	r1, r2, #5
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	440a      	add	r2, r1
 8007790:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007798:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800779a:	e05e      	b.n	800785a <USB_HC_Halt+0x1b4>
          break;
 800779c:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800779e:	e05c      	b.n	800785a <USB_HC_Halt+0x1b4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80077a0:	78fb      	ldrb	r3, [r7, #3]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	78fa      	ldrb	r2, [r7, #3]
 80077b0:	0151      	lsls	r1, r2, #5
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	440a      	add	r2, r1
 80077b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077be:	6013      	str	r3, [r2, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d133      	bne.n	8007836 <USB_HC_Halt+0x190>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80077ce:	78fb      	ldrb	r3, [r7, #3]
 80077d0:	015a      	lsls	r2, r3, #5
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	78fa      	ldrb	r2, [r7, #3]
 80077de:	0151      	lsls	r1, r2, #5
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	440a      	add	r2, r1
 80077e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077ec:	6013      	str	r3, [r2, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 80077ee:	78fb      	ldrb	r3, [r7, #3]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	78fa      	ldrb	r2, [r7, #3]
 80077fe:	0151      	lsls	r1, r2, #5
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	440a      	add	r2, r1
 8007804:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007808:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800780c:	6013      	str	r3, [r2, #0]
      do 
      {
        if (++count > 1000U) 
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3301      	adds	r3, #1
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800781a:	d81d      	bhi.n	8007858 <USB_HC_Halt+0x1b2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 800781c:	78fb      	ldrb	r3, [r7, #3]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4413      	add	r3, r2
 8007824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800782e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007832:	d0ec      	beq.n	800780e <USB_HC_Halt+0x168>
 8007834:	e011      	b.n	800785a <USB_HC_Halt+0x1b4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8007836:	78fb      	ldrb	r3, [r7, #3]
 8007838:	015a      	lsls	r2, r3, #5
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4413      	add	r3, r2
 800783e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	78fa      	ldrb	r2, [r7, #3]
 8007846:	0151      	lsls	r1, r2, #5
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	440a      	add	r2, r1
 800784c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007850:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007854:	6013      	str	r3, [r2, #0]
 8007856:	e000      	b.n	800785a <USB_HC_Halt+0x1b4>
          break;
 8007858:	bf00      	nop
    }
  }
  
  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	460b      	mov	r3, r1
 8007872:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 8007874:	2301      	movs	r3, #1
 8007876:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 800787c:	7bfb      	ldrb	r3, [r7, #15]
 800787e:	04db      	lsls	r3, r3, #19
 8007880:	461a      	mov	r2, r3
 8007882:	4b15      	ldr	r3, [pc, #84]	; (80078d8 <USB_DoPing+0x70>)
 8007884:	4013      	ands	r3, r2
 8007886:	78fa      	ldrb	r2, [r7, #3]
 8007888:	0151      	lsls	r1, r2, #5
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	440a      	add	r2, r1
 800788e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007892:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007896:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078ae:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078b6:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80078b8:	78fb      	ldrb	r3, [r7, #3]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078c4:	461a      	mov	r2, r3
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	1ff80000 	.word	0x1ff80000

080078dc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7ff fbd5 	bl	8007098 <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 80078ee:	2110      	movs	r1, #16
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff fbef 	bl	80070d4 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff fbfe 	bl	80070f8 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 80078fc:	2300      	movs	r3, #0
 80078fe:	75fb      	strb	r3, [r7, #23]
 8007900:	e01f      	b.n	8007942 <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 8007902:	7dfb      	ldrb	r3, [r7, #23]
 8007904:	015a      	lsls	r2, r3, #5
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4413      	add	r3, r2
 800790a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007918:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007920:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007928:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 800792a:	7dfb      	ldrb	r3, [r7, #23]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4413      	add	r3, r2
 8007932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007936:	461a      	mov	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 800793c:	7dfb      	ldrb	r3, [r7, #23]
 800793e:	3301      	adds	r3, #1
 8007940:	75fb      	strb	r3, [r7, #23]
 8007942:	7dfb      	ldrb	r3, [r7, #23]
 8007944:	2b0f      	cmp	r3, #15
 8007946:	d9dc      	bls.n	8007902 <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 8007948:	2300      	movs	r3, #0
 800794a:	75fb      	strb	r3, [r7, #23]
 800794c:	e034      	b.n	80079b8 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 800794e:	7dfb      	ldrb	r3, [r7, #23]
 8007950:	015a      	lsls	r2, r3, #5
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4413      	add	r3, r2
 8007956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007964:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800796c:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007974:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 8007976:	7dfb      	ldrb	r3, [r7, #23]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4413      	add	r3, r2
 800797e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007982:	461a      	mov	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	3301      	adds	r3, #1
 800798c:	613b      	str	r3, [r7, #16]
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007994:	d80c      	bhi.n	80079b0 <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4413      	add	r3, r2
 800799e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079ac:	d0ec      	beq.n	8007988 <USB_StopHost+0xac>
 80079ae:	e000      	b.n	80079b2 <USB_StopHost+0xd6>
        break;
 80079b0:	bf00      	nop
  for (i = 0; i <= 15; i++)
 80079b2:	7dfb      	ldrb	r3, [r7, #23]
 80079b4:	3301      	adds	r3, #1
 80079b6:	75fb      	strb	r3, [r7, #23]
 80079b8:	7dfb      	ldrb	r3, [r7, #23]
 80079ba:	2b0f      	cmp	r3, #15
 80079bc:	d9c7      	bls.n	800794e <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079c4:	461a      	mov	r2, r3
 80079c6:	f04f 33ff 	mov.w	r3, #4294967295
 80079ca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f04f 32ff 	mov.w	r2, #4294967295
 80079d2:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff fb59 	bl	800708c <USB_EnableGlobalInt>
  return HAL_OK;  
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3718      	adds	r7, #24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <USBH_MSC_SOFProcess>:
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{

  return USBH_OK;
}
 80079e4:	2000      	movs	r0, #0
 80079e6:	4770      	bx	lr

080079e8 <USBH_MSC_Process>:
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079e8:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 80079ec:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079ee:	69dd      	ldr	r5, [r3, #28]
  switch (MSC_Handle->state)
 80079f0:	7b2b      	ldrb	r3, [r5, #12]
{
 80079f2:	4606      	mov	r6, r0
  switch (MSC_Handle->state)
 80079f4:	b123      	cbz	r3, 8007a00 <USBH_MSC_Process+0x18>
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	f000 80e7 	beq.w	8007bca <USBH_MSC_Process+0x1e2>
  USBH_StatusTypeDef error = USBH_BUSY ;
 80079fc:	2001      	movs	r0, #1
        break;  
 80079fe:	e076      	b.n	8007aee <USBH_MSC_Process+0x106>
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 8007a00:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
 8007a04:	682a      	ldr	r2, [r5, #0]
 8007a06:	4291      	cmp	r1, r2
 8007a08:	f04f 0401 	mov.w	r4, #1
 8007a0c:	f080 80d5 	bcs.w	8007bba <USBH_MSC_Process+0x1d2>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007a10:	2234      	movs	r2, #52	; 0x34
 8007a12:	fb02 5301 	mla	r3, r2, r1, r5
 8007a16:	f883 4091 	strb.w	r4, [r3, #145]	; 0x91
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8007a1a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007a1e:	4614      	mov	r4, r2
 8007a20:	2b08      	cmp	r3, #8
 8007a22:	d8eb      	bhi.n	80079fc <USBH_MSC_Process+0x14>
 8007a24:	a201      	add	r2, pc, #4	; (adr r2, 8007a2c <USBH_MSC_Process+0x44>)
 8007a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2a:	bf00      	nop
 8007a2c:	08007a51 	.word	0x08007a51
 8007a30:	080079fd 	.word	0x080079fd
 8007a34:	08007a87 	.word	0x08007a87
 8007a38:	08007b0d 	.word	0x08007b0d
 8007a3c:	08007a63 	.word	0x08007a63
 8007a40:	08007b55 	.word	0x08007b55
 8007a44:	080079fd 	.word	0x080079fd
 8007a48:	080079fd 	.word	0x080079fd
 8007a4c:	08007bb3 	.word	0x08007bb3
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007a50:	fb04 5401 	mla	r4, r4, r1, r5
 8007a54:	2304      	movs	r3, #4
 8007a56:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        MSC_Handle->timer = phost->Timer;
 8007a5a:	f8d0 33b8 	ldr.w	r3, [r0, #952]	; 0x3b8
 8007a5e:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007a62:	2434      	movs	r4, #52	; 0x34
 8007a64:	fb04 5201 	mla	r2, r4, r1, r5
 8007a68:	329f      	adds	r2, #159	; 0x9f
 8007a6a:	b2c9      	uxtb	r1, r1
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	f000 fbd9 	bl	8008224 <USBH_MSC_SCSI_Inquiry>
        if( scsi_status == USBH_OK)
 8007a72:	2800      	cmp	r0, #0
 8007a74:	d15e      	bne.n	8007b34 <USBH_MSC_Process+0x14c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;        
 8007a76:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8007a7a:	fb04 5503 	mla	r5, r4, r3, r5
 8007a7e:	2302      	movs	r3, #2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
 8007a80:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
 8007a84:	e7ba      	b.n	80079fc <USBH_MSC_Process+0x14>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, MSC_Handle->current_lun);
 8007a86:	b2c9      	uxtb	r1, r1
 8007a88:	f000 fb70 	bl	800816c <USBH_MSC_SCSI_TestUnitReady>
        if( ready_status == USBH_OK)
 8007a8c:	b9a8      	cbnz	r0, 8007aba <USBH_MSC_Process+0xd2>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007a8e:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8007a92:	2234      	movs	r2, #52	; 0x34
 8007a94:	fb02 5103 	mla	r1, r2, r3, r5
 8007a98:	f891 0092 	ldrb.w	r0, [r1, #146]	; 0x92
 8007a9c:	b100      	cbz	r0, 8007aa0 <USBH_MSC_Process+0xb8>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 8007a9e:	2001      	movs	r0, #1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007aa0:	fb02 5503 	mla	r5, r2, r3, r5
 8007aa4:	2303      	movs	r3, #3
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8007aa6:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007aaa:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8007ab4:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
 8007ab8:	e7a0      	b.n	80079fc <USBH_MSC_Process+0x14>
        if( ready_status == USBH_FAIL)
 8007aba:	2802      	cmp	r0, #2
 8007abc:	d118      	bne.n	8007af0 <USBH_MSC_Process+0x108>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007abe:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8007ac2:	2234      	movs	r2, #52	; 0x34
 8007ac4:	fb02 5103 	mla	r1, r2, r3, r5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 8007ac8:	fb02 5503 	mla	r5, r2, r3, r5
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007acc:	f891 0092 	ldrb.w	r0, [r1, #146]	; 0x92
 8007ad0:	2802      	cmp	r0, #2
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 8007ad2:	bf14      	ite	ne
 8007ad4:	2001      	movne	r0, #1
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8007ad6:	2000      	moveq	r0, #0
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 8007ad8:	2305      	movs	r3, #5
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8007ada:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 8007ade:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007ae2:	2001      	movs	r0, #1
            MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007ae4:	2302      	movs	r3, #2
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007ae6:	f885 0091 	strb.w	r0, [r5, #145]	; 0x91
            MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007aea:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
}
 8007aee:	bd70      	pop	{r4, r5, r6, pc}
        else if(ready_status == USBH_UNRECOVERED_ERROR)
 8007af0:	2804      	cmp	r0, #4
 8007af2:	d183      	bne.n	80079fc <USBH_MSC_Process+0x14>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007af4:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8007af8:	2234      	movs	r2, #52	; 0x34
 8007afa:	fb02 5503 	mla	r5, r2, r3, r5
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007afe:	2001      	movs	r0, #1
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007b00:	2302      	movs	r3, #2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007b02:	f885 0090 	strb.w	r0, [r5, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007b06:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
 8007b0a:	e7f0      	b.n	8007aee <USBH_MSC_Process+0x106>
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost,MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8007b0c:	fb04 5201 	mla	r2, r4, r1, r5
 8007b10:	3294      	adds	r2, #148	; 0x94
 8007b12:	b2c9      	uxtb	r1, r1
 8007b14:	f000 fb50 	bl	80081b8 <USBH_MSC_SCSI_ReadCapacity>
        if(scsi_status == USBH_OK)
 8007b18:	b960      	cbnz	r0, 8007b34 <USBH_MSC_Process+0x14c>
          if(MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1)
 8007b1a:	f8b5 20f8 	ldrh.w	r2, [r5, #248]	; 0xf8
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	fb04 5402 	mla	r4, r4, r2, r5
          MSC_Handle->current_lun++;
 8007b24:	441a      	add	r2, r3
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007b26:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007b2a:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
          MSC_Handle->current_lun++;
 8007b2e:	f8a5 20f8 	strh.w	r2, [r5, #248]	; 0xf8
 8007b32:	e763      	b.n	80079fc <USBH_MSC_Process+0x14>
        else if( scsi_status == USBH_FAIL)
 8007b34:	2802      	cmp	r0, #2
 8007b36:	d105      	bne.n	8007b44 <USBH_MSC_Process+0x15c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007b38:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8007b3c:	fb04 5503 	mla	r5, r4, r3, r5
 8007b40:	2305      	movs	r3, #5
 8007b42:	e79d      	b.n	8007a80 <USBH_MSC_Process+0x98>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 8007b44:	2804      	cmp	r0, #4
 8007b46:	f47f af59 	bne.w	80079fc <USBH_MSC_Process+0x14>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007b4a:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8007b4e:	fb04 5503 	mla	r5, r4, r3, r5
 8007b52:	e7d4      	b.n	8007afe <USBH_MSC_Process+0x116>
        scsi_status = USBH_MSC_SCSI_RequestSense(phost,  MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007b54:	fb04 5201 	mla	r2, r4, r1, r5
 8007b58:	329c      	adds	r2, #156	; 0x9c
 8007b5a:	b2c9      	uxtb	r1, r1
 8007b5c:	f000 fbca 	bl	80082f4 <USBH_MSC_SCSI_RequestSense>
        if( scsi_status == USBH_OK)
 8007b60:	b9f8      	cbnz	r0, 8007ba2 <USBH_MSC_Process+0x1ba>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007b62:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8007b66:	fb04 5403 	mla	r4, r4, r3, r5
 8007b6a:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
 8007b6e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8007b72:	2a02      	cmp	r2, #2
 8007b74:	d10b      	bne.n	8007b8e <USBH_MSC_Process+0x1a6>
            if((phost->Timer - MSC_Handle->timer) < 10000)
 8007b76:	f8d5 00fc 	ldr.w	r0, [r5, #252]	; 0xfc
 8007b7a:	f8d6 13b8 	ldr.w	r1, [r6, #952]	; 0x3b8
 8007b7e:	1a09      	subs	r1, r1, r0
 8007b80:	f242 700f 	movw	r0, #9999	; 0x270f
 8007b84:	4281      	cmp	r1, r0
 8007b86:	d802      	bhi.n	8007b8e <USBH_MSC_Process+0x1a6>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007b88:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
 8007b8c:	e736      	b.n	80079fc <USBH_MSC_Process+0x14>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007b8e:	2234      	movs	r2, #52	; 0x34
 8007b90:	fb02 5203 	mla	r2, r2, r3, r5
 8007b94:	2001      	movs	r0, #1
          MSC_Handle->current_lun++;
 8007b96:	4403      	add	r3, r0
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007b98:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
          MSC_Handle->current_lun++;
 8007b9c:	f8a5 30f8 	strh.w	r3, [r5, #248]	; 0xf8
 8007ba0:	e7a5      	b.n	8007aee <USBH_MSC_Process+0x106>
        if( scsi_status == USBH_FAIL)
 8007ba2:	2802      	cmp	r0, #2
 8007ba4:	d1ce      	bne.n	8007b44 <USBH_MSC_Process+0x15c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
 8007ba6:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8007baa:	fb04 5503 	mla	r5, r4, r3, r5
 8007bae:	2308      	movs	r3, #8
 8007bb0:	e766      	b.n	8007a80 <USBH_MSC_Process+0x98>
        MSC_Handle->current_lun++;
 8007bb2:	3101      	adds	r1, #1
 8007bb4:	f8a5 10f8 	strh.w	r1, [r5, #248]	; 0xf8
 8007bb8:	e720      	b.n	80079fc <USBH_MSC_Process+0x14>
      MSC_Handle->current_lun = 0;
 8007bba:	f8a5 30f8 	strh.w	r3, [r5, #248]	; 0xf8
    MSC_Handle->state = MSC_IDLE;
 8007bbe:	732c      	strb	r4, [r5, #12]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);     
 8007bc0:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8007bc4:	2102      	movs	r1, #2
 8007bc6:	4798      	blx	r3
 8007bc8:	e718      	b.n	80079fc <USBH_MSC_Process+0x14>
    error = USBH_OK;  
 8007bca:	2000      	movs	r0, #0
 8007bcc:	e78f      	b.n	8007aee <USBH_MSC_Process+0x106>
 8007bce:	bf00      	nop

08007bd0 <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 8007bd0:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{   
 8007bd4:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 8007bd6:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 8007bd8:	7ba3      	ldrb	r3, [r4, #14]
 8007bda:	2b02      	cmp	r3, #2
{   
 8007bdc:	4602      	mov	r2, r0
  switch (MSC_Handle->req_state)
 8007bde:	d002      	beq.n	8007be6 <USBH_MSC_ClassRequest+0x16>
 8007be0:	2b03      	cmp	r3, #3
 8007be2:	d020      	beq.n	8007c26 <USBH_MSC_ClassRequest+0x56>
 8007be4:	bb2b      	cbnz	r3, 8007c32 <USBH_MSC_ClassRequest+0x62>
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 8007be6:	4621      	mov	r1, r4
 8007be8:	4610      	mov	r0, r2
 8007bea:	f000 f9b6 	bl	8007f5a <USBH_MSC_BOT_REQ_GetMaxLUN>
    if(status == USBH_NOT_SUPPORTED)
 8007bee:	2803      	cmp	r0, #3
 8007bf0:	d10e      	bne.n	8007c10 <USBH_MSC_ClassRequest+0x40>
      MSC_Handle->max_lun = 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	6023      	str	r3, [r4, #0]
      MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
 8007bf6:	7822      	ldrb	r2, [r4, #0]
      for(i = 0; i < MSC_Handle->max_lun; i++)
 8007bf8:	2300      	movs	r3, #0
      MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
 8007bfa:	3201      	adds	r2, #1
 8007bfc:	6022      	str	r2, [r4, #0]
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007bfe:	2034      	movs	r0, #52	; 0x34
 8007c00:	2502      	movs	r5, #2
        MSC_Handle->unit[i].state_changed = 0;
 8007c02:	461e      	mov	r6, r3
 8007c04:	1c59      	adds	r1, r3, #1
      for(i = 0; i < MSC_Handle->max_lun; i++)
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d804      	bhi.n	8007c16 <USBH_MSC_ClassRequest+0x46>
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	e001      	b.n	8007c14 <USBH_MSC_ClassRequest+0x44>
    if(status == USBH_OK)
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d0f0      	beq.n	8007bf6 <USBH_MSC_ClassRequest+0x26>
}
 8007c14:	bd70      	pop	{r4, r5, r6, pc}
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007c16:	fb00 4303 	mla	r3, r0, r3, r4
 8007c1a:	f883 5092 	strb.w	r5, [r3, #146]	; 0x92
        MSC_Handle->unit[i].state_changed = 0;
 8007c1e:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
 8007c22:	460b      	mov	r3, r1
 8007c24:	e7ee      	b.n	8007c04 <USBH_MSC_ClassRequest+0x34>
    if(USBH_ClrFeature(phost, 0x00) == USBH_OK)
 8007c26:	2100      	movs	r1, #0
 8007c28:	f001 f80d 	bl	8008c46 <USBH_ClrFeature>
 8007c2c:	b908      	cbnz	r0, 8007c32 <USBH_MSC_ClassRequest+0x62>
      MSC_Handle->req_state = MSC_Handle->prev_req_state; 
 8007c2e:	7be3      	ldrb	r3, [r4, #15]
 8007c30:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c32:	2001      	movs	r0, #1
 8007c34:	e7ee      	b.n	8007c14 <USBH_MSC_ClassRequest+0x44>

08007c36 <USBH_MSC_InterfaceDeInit>:
{
 8007c36:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c38:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8007c3c:	69dd      	ldr	r5, [r3, #28]
  if ( MSC_Handle->OutPipe)
 8007c3e:	7969      	ldrb	r1, [r5, #5]
{
 8007c40:	4604      	mov	r4, r0
  if ( MSC_Handle->OutPipe)
 8007c42:	b139      	cbz	r1, 8007c54 <USBH_MSC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007c44:	f001 f87a 	bl	8008d3c <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 8007c48:	7969      	ldrb	r1, [r5, #5]
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f001 f893 	bl	8008d76 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 8007c50:	2300      	movs	r3, #0
 8007c52:	716b      	strb	r3, [r5, #5]
  if ( MSC_Handle->InPipe)
 8007c54:	7929      	ldrb	r1, [r5, #4]
 8007c56:	b141      	cbz	r1, 8007c6a <USBH_MSC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f001 f86f 	bl	8008d3c <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 8007c5e:	7929      	ldrb	r1, [r5, #4]
 8007c60:	4620      	mov	r0, r4
 8007c62:	f001 f888 	bl	8008d76 <USBH_FreePipe>
    MSC_Handle->InPipe = 0;     /* Reset the Channel as Free */
 8007c66:	2300      	movs	r3, #0
 8007c68:	712b      	strb	r3, [r5, #4]
  if(phost->pActiveClass->pData)
 8007c6a:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8007c6e:	69d8      	ldr	r0, [r3, #28]
 8007c70:	b128      	cbz	r0, 8007c7e <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free (phost->pActiveClass->pData);
 8007c72:	f003 fde5 	bl	800b840 <free>
    phost->pActiveClass->pData = 0;
 8007c76:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	61da      	str	r2, [r3, #28]
}
 8007c7e:	2000      	movs	r0, #0
 8007c80:	bd38      	pop	{r3, r4, r5, pc}

08007c82 <USBH_MSC_InterfaceInit>:
{	 
 8007c82:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007c84:	f8d0 1374 	ldr.w	r1, [r0, #884]	; 0x374
{	 
 8007c88:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007c8a:	7909      	ldrb	r1, [r1, #4]
 8007c8c:	2350      	movs	r3, #80	; 0x50
 8007c8e:	2206      	movs	r2, #6
{	 
 8007c90:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007c92:	f000 fc4c 	bl	800852e <USBH_FindInterface>
  if(interface == 0xFF) /* Not Valid Interface */
 8007c96:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007c98:	4601      	mov	r1, r0
  if(interface == 0xFF) /* Not Valid Interface */
 8007c9a:	d06a      	beq.n	8007d72 <USBH_MSC_InterfaceInit+0xf0>
    USBH_SelectInterface (phost, interface);
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f000 fc3d 	bl	800851c <USBH_SelectInterface>
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 8007ca2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007ca6:	f8d5 6374 	ldr.w	r6, [r5, #884]	; 0x374
 8007caa:	f003 fdc1 	bl	800b830 <malloc>
 8007cae:	61f0      	str	r0, [r6, #28]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8007cb0:	f895 231f 	ldrb.w	r2, [r5, #799]	; 0x31f
 8007cb4:	231a      	movs	r3, #26
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 8007cb6:	4604      	mov	r4, r0
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8007cb8:	fb03 5002 	mla	r0, r3, r2, r5
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8007cbc:	fb03 5302 	mla	r3, r3, r2, r5
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8007cc0:	f890 1348 	ldrb.w	r1, [r0, #840]	; 0x348
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8007cc4:	f893 2350 	ldrb.w	r2, [r3, #848]	; 0x350
 8007cc8:	f8b0 034a 	ldrh.w	r0, [r0, #842]	; 0x34a
 8007ccc:	f8b3 3352 	ldrh.w	r3, [r3, #850]	; 0x352
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8007cd0:	f011 0f80 	tst.w	r1, #128	; 0x80
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8007cd4:	bf19      	ittee	ne
 8007cd6:	71e1      	strbne	r1, [r4, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8007cd8:	8160      	strhne	r0, [r4, #10]
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8007cda:	71a1      	strbeq	r1, [r4, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;      
 8007cdc:	8120      	strheq	r0, [r4, #8]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8007cde:	0611      	lsls	r1, r2, #24
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8007ce0:	bf58      	it	pl
 8007ce2:	71a2      	strbpl	r2, [r4, #6]
    MSC_Handle->current_lun = 0;
 8007ce4:	f04f 0600 	mov.w	r6, #0
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007ce8:	79a1      	ldrb	r1, [r4, #6]
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8007cea:	bf48      	it	mi
 8007cec:	71e2      	strbmi	r2, [r4, #7]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007cee:	4628      	mov	r0, r5
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 8007cf0:	bf4c      	ite	mi
 8007cf2:	8163      	strhmi	r3, [r4, #10]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 8007cf4:	8123      	strhpl	r3, [r4, #8]
    MSC_Handle->current_lun = 0;
 8007cf6:	f8c4 60f8 	str.w	r6, [r4, #248]	; 0xf8
    MSC_Handle->state = MSC_INIT;
 8007cfa:	7326      	strb	r6, [r4, #12]
    MSC_Handle->error = MSC_OK;
 8007cfc:	7366      	strb	r6, [r4, #13]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 8007cfe:	73a6      	strb	r6, [r4, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007d00:	f001 f821 	bl	8008d46 <USBH_AllocPipe>
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007d04:	79e1      	ldrb	r1, [r4, #7]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007d06:	7160      	strb	r0, [r4, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f001 f81c 	bl	8008d46 <USBH_AllocPipe>
 8007d0e:	7120      	strb	r0, [r4, #4]
    USBH_MSC_BOT_Init(phost);
 8007d10:	4628      	mov	r0, r5
 8007d12:	f000 f92b 	bl	8007f6c <USBH_MSC_BOT_Init>
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 8007d16:	2268      	movs	r2, #104	; 0x68
 8007d18:	4631      	mov	r1, r6
 8007d1a:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8007d1e:	f003 fd97 	bl	800b850 <memset>
    USBH_OpenPipe  (phost,
 8007d22:	8920      	ldrh	r0, [r4, #8]
 8007d24:	9002      	str	r0, [sp, #8]
 8007d26:	2702      	movs	r7, #2
 8007d28:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8007d2c:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8007d30:	79a2      	ldrb	r2, [r4, #6]
 8007d32:	7961      	ldrb	r1, [r4, #5]
 8007d34:	9000      	str	r0, [sp, #0]
 8007d36:	9701      	str	r7, [sp, #4]
 8007d38:	4628      	mov	r0, r5
 8007d3a:	f000 fff0 	bl	8008d1e <USBH_OpenPipe>
    USBH_OpenPipe  (phost,
 8007d3e:	8960      	ldrh	r0, [r4, #10]
 8007d40:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8007d44:	79e2      	ldrb	r2, [r4, #7]
 8007d46:	7921      	ldrb	r1, [r4, #4]
 8007d48:	e9cd 7001 	strd	r7, r0, [sp, #4]
 8007d4c:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8007d50:	9000      	str	r0, [sp, #0]
 8007d52:	4628      	mov	r0, r5
 8007d54:	f000 ffe3 	bl	8008d1e <USBH_OpenPipe>
    USBH_LL_SetToggle  (phost, MSC_Handle->InPipe,0);
 8007d58:	4632      	mov	r2, r6
 8007d5a:	7921      	ldrb	r1, [r4, #4]
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f003 fc6b 	bl	800b638 <USBH_LL_SetToggle>
    USBH_LL_SetToggle  (phost, MSC_Handle->OutPipe,0);
 8007d62:	4632      	mov	r2, r6
 8007d64:	7961      	ldrb	r1, [r4, #5]
 8007d66:	4628      	mov	r0, r5
 8007d68:	f003 fc66 	bl	800b638 <USBH_LL_SetToggle>
    status = USBH_OK; 
 8007d6c:	4630      	mov	r0, r6
}
 8007d6e:	b005      	add	sp, #20
 8007d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = USBH_FAIL;      
 8007d72:	2002      	movs	r0, #2
 8007d74:	e7fb      	b.n	8007d6e <USBH_MSC_InterfaceInit+0xec>

08007d76 <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d76:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8007d7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d7c:	69dd      	ldr	r5, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;  
  
  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007d7e:	2634      	movs	r6, #52	; 0x34
 8007d80:	fb06 5401 	mla	r4, r6, r1, r5
 8007d84:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8007d88:	2b06      	cmp	r3, #6
 8007d8a:	d010      	beq.n	8007dae <USBH_MSC_RdWrProcess+0x38>
 8007d8c:	2b07      	cmp	r3, #7
 8007d8e:	d019      	beq.n	8007dc4 <USBH_MSC_RdWrProcess+0x4e>
 8007d90:	2b05      	cmp	r3, #5
 8007d92:	d122      	bne.n	8007dda <USBH_MSC_RdWrProcess+0x64>
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif       
    break; 
  
  case MSC_REQUEST_SENSE:
    scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007d94:	fb06 5201 	mla	r2, r6, r1, r5
 8007d98:	329c      	adds	r2, #156	; 0x9c
 8007d9a:	f000 faab 	bl	80082f4 <USBH_MSC_SCSI_RequestSense>
    
    if( scsi_status == USBH_OK)
 8007d9e:	b9f0      	cbnz	r0, 8007dde <USBH_MSC_RdWrProcess+0x68>
    {
      USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
      USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
      USBH_UsrLog ("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8007da0:	2301      	movs	r3, #1
      MSC_Handle->unit[lun].error = MSC_ERROR;
 8007da2:	2002      	movs	r0, #2
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8007da4:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      MSC_Handle->unit[lun].error = MSC_ERROR;
 8007da8:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
 8007dac:	e008      	b.n	8007dc0 <USBH_MSC_RdWrProcess+0x4a>
    scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0, NULL, 0) ;
 8007dae:	2300      	movs	r3, #0
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	f000 fb29 	bl	800840a <USBH_MSC_SCSI_Read>
    if(scsi_status == USBH_OK)
 8007db8:	b950      	cbnz	r0, 8007dd0 <USBH_MSC_RdWrProcess+0x5a>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  default:
    break;  
    
  }
  return error;
}
 8007dc0:	b002      	add	sp, #8
 8007dc2:	bd70      	pop	{r4, r5, r6, pc}
    scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0, NULL, 0) ;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	f000 fadc 	bl	8008386 <USBH_MSC_SCSI_Write>
 8007dce:	e7f3      	b.n	8007db8 <USBH_MSC_RdWrProcess+0x42>
    else if( scsi_status == USBH_FAIL)
 8007dd0:	2802      	cmp	r0, #2
 8007dd2:	d104      	bne.n	8007dde <USBH_MSC_RdWrProcess+0x68>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;  
 8007dd4:	2305      	movs	r3, #5
 8007dd6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007dda:	2001      	movs	r0, #1
 8007ddc:	e7f0      	b.n	8007dc0 <USBH_MSC_RdWrProcess+0x4a>
    if( scsi_status == USBH_FAIL)
 8007dde:	2804      	cmp	r0, #4
 8007de0:	d1fb      	bne.n	8007dda <USBH_MSC_RdWrProcess+0x64>
      MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;  
 8007de2:	2308      	movs	r3, #8
 8007de4:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 8007de8:	2002      	movs	r0, #2
 8007dea:	e7e9      	b.n	8007dc0 <USBH_MSC_RdWrProcess+0x4a>

08007dec <USBH_MSC_UnitIsReady>:
  */
uint8_t  USBH_MSC_UnitIsReady (USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
  
  if(phost->gState == HOST_CLASS)
 8007dec:	7803      	ldrb	r3, [r0, #0]
 8007dee:	2b0a      	cmp	r3, #10
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 8007df0:	bf01      	itttt	eq
 8007df2:	f8d0 3374 	ldreq.w	r3, [r0, #884]	; 0x374
  {
    return (MSC_Handle->unit[lun].error == MSC_OK);
 8007df6:	69db      	ldreq	r3, [r3, #28]
 8007df8:	2234      	moveq	r2, #52	; 0x34
 8007dfa:	fb02 3101 	mlaeq	r1, r2, r1, r3
 8007dfe:	bf03      	ittte	eq
 8007e00:	f891 0091 	ldrbeq.w	r0, [r1, #145]	; 0x91
 8007e04:	fab0 f080 	clzeq	r0, r0
 8007e08:	0940      	lsreq	r0, r0, #5
  }
  else
  {
    return 0;
 8007e0a:	2000      	movne	r0, #0
  }
}
 8007e0c:	4770      	bx	lr

08007e0e <USBH_MSC_GetLUNInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;    
  if(phost->gState == HOST_CLASS)
 8007e0e:	7803      	ldrb	r3, [r0, #0]
 8007e10:	2b0a      	cmp	r3, #10
{
 8007e12:	b510      	push	{r4, lr}
  if(phost->gState == HOST_CLASS)
 8007e14:	d111      	bne.n	8007e3a <USBH_MSC_GetLUNInfo+0x2c>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;    
 8007e16:	f8d0 0374 	ldr.w	r0, [r0, #884]	; 0x374
  {
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007e1a:	2334      	movs	r3, #52	; 0x34
 8007e1c:	2490      	movs	r4, #144	; 0x90
 8007e1e:	fb13 4301 	smlabb	r3, r3, r1, r4
 8007e22:	69c1      	ldr	r1, [r0, #28]
 8007e24:	4419      	add	r1, r3
 8007e26:	f101 0334 	add.w	r3, r1, #52	; 0x34
 8007e2a:	f851 0b04 	ldr.w	r0, [r1], #4
 8007e2e:	f842 0b04 	str.w	r0, [r2], #4
 8007e32:	4299      	cmp	r1, r3
 8007e34:	d1f9      	bne.n	8007e2a <USBH_MSC_GetLUNInfo+0x1c>
    return USBH_OK;
 8007e36:	2000      	movs	r0, #0
  }
  else
  {
    return USBH_FAIL;
  }
}
 8007e38:	bd10      	pop	{r4, pc}
    return USBH_FAIL;
 8007e3a:	2002      	movs	r0, #2
 8007e3c:	e7fc      	b.n	8007e38 <USBH_MSC_GetLUNInfo+0x2a>

08007e3e <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8007e3e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
  
  if ((phost->device.is_connected == 0) || 
 8007e42:	f890 531e 	ldrb.w	r5, [r0, #798]	; 0x31e
{
 8007e46:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	460f      	mov	r7, r1
  if ((phost->device.is_connected == 0) || 
 8007e4e:	b3bd      	cbz	r5, 8007ec0 <USBH_MSC_Read+0x82>
      (phost->gState != HOST_CLASS) || 
 8007e50:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0) || 
 8007e52:	2d0a      	cmp	r5, #10
 8007e54:	d134      	bne.n	8007ec0 <USBH_MSC_Read+0x82>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
 8007e56:	f8d0 5374 	ldr.w	r5, [r0, #884]	; 0x374
 8007e5a:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007e5c:	2634      	movs	r6, #52	; 0x34
 8007e5e:	fb06 5601 	mla	r6, r6, r1, r5
      (phost->gState != HOST_CLASS) || 
 8007e62:	f896 c090 	ldrb.w	ip, [r6, #144]	; 0x90
 8007e66:	f1bc 0f01 	cmp.w	ip, #1
 8007e6a:	d129      	bne.n	8007ec0 <USBH_MSC_Read+0x82>
  {
    return  USBH_FAIL;
  }
  MSC_Handle->state = MSC_READ;
 8007e6c:	f04f 0c06 	mov.w	ip, #6
 8007e70:	f885 c00c 	strb.w	ip, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8007e74:	f886 c090 	strb.w	ip, [r6, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8007e78:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa
  USBH_MSC_SCSI_Read(phost,
 8007e7c:	f8cd 8000 	str.w	r8, [sp]
 8007e80:	f000 fac3 	bl	800840a <USBH_MSC_SCSI_Read>
  
  timeout = phost->Timer;
  
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
 8007e84:	f242 7610 	movw	r6, #10000	; 0x2710
  timeout = phost->Timer;
 8007e88:	f8d4 93b8 	ldr.w	r9, [r4, #952]	; 0x3b8
    if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
 8007e8c:	fb06 f608 	mul.w	r6, r6, r8
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007e90:	4639      	mov	r1, r7
 8007e92:	4620      	mov	r0, r4
 8007e94:	f7ff ff6f 	bl	8007d76 <USBH_MSC_RdWrProcess>
 8007e98:	2801      	cmp	r0, #1
 8007e9a:	d005      	beq.n	8007ea8 <USBH_MSC_Read+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	732b      	strb	r3, [r5, #12]
  return USBH_OK;
 8007ea0:	2000      	movs	r0, #0
}
 8007ea2:	b003      	add	sp, #12
 8007ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
 8007ea8:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8007eac:	eba3 0309 	sub.w	r3, r3, r9
 8007eb0:	42b3      	cmp	r3, r6
 8007eb2:	d803      	bhi.n	8007ebc <USBH_MSC_Read+0x7e>
 8007eb4:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e9      	bne.n	8007e90 <USBH_MSC_Read+0x52>
      MSC_Handle->state = MSC_IDLE;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 8007ec0:	2002      	movs	r0, #2
 8007ec2:	e7ee      	b.n	8007ea2 <USBH_MSC_Read+0x64>

08007ec4 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8007ec4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
  
  if ((phost->device.is_connected == 0) || 
 8007ec8:	f890 531e 	ldrb.w	r5, [r0, #798]	; 0x31e
{
 8007ecc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	460f      	mov	r7, r1
  if ((phost->device.is_connected == 0) || 
 8007ed4:	b3bd      	cbz	r5, 8007f46 <USBH_MSC_Write+0x82>
      (phost->gState != HOST_CLASS) || 
 8007ed6:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0) || 
 8007ed8:	2d0a      	cmp	r5, #10
 8007eda:	d134      	bne.n	8007f46 <USBH_MSC_Write+0x82>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
 8007edc:	f8d0 5374 	ldr.w	r5, [r0, #884]	; 0x374
 8007ee0:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007ee2:	2634      	movs	r6, #52	; 0x34
 8007ee4:	fb06 5601 	mla	r6, r6, r1, r5
      (phost->gState != HOST_CLASS) || 
 8007ee8:	f896 c090 	ldrb.w	ip, [r6, #144]	; 0x90
 8007eec:	f1bc 0f01 	cmp.w	ip, #1
 8007ef0:	d129      	bne.n	8007f46 <USBH_MSC_Write+0x82>
  {
    return  USBH_FAIL;
  }
  MSC_Handle->state = MSC_WRITE;
 8007ef2:	f04f 0c07 	mov.w	ip, #7
 8007ef6:	f885 c00c 	strb.w	ip, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8007efa:	f886 c090 	strb.w	ip, [r6, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8007efe:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa
  USBH_MSC_SCSI_Write(phost,
 8007f02:	f8cd 8000 	str.w	r8, [sp]
 8007f06:	f000 fa3e 	bl	8008386 <USBH_MSC_SCSI_Write>
                     length);
  
  timeout = phost->Timer;
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
 8007f0a:	f242 7610 	movw	r6, #10000	; 0x2710
  timeout = phost->Timer;
 8007f0e:	f8d4 93b8 	ldr.w	r9, [r4, #952]	; 0x3b8
    if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
 8007f12:	fb06 f608 	mul.w	r6, r6, r8
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007f16:	4639      	mov	r1, r7
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f7ff ff2c 	bl	8007d76 <USBH_MSC_RdWrProcess>
 8007f1e:	2801      	cmp	r0, #1
 8007f20:	d005      	beq.n	8007f2e <USBH_MSC_Write+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007f22:	2301      	movs	r3, #1
 8007f24:	732b      	strb	r3, [r5, #12]
  return USBH_OK;
 8007f26:	2000      	movs	r0, #0
}
 8007f28:	b003      	add	sp, #12
 8007f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
 8007f2e:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8007f32:	eba3 0309 	sub.w	r3, r3, r9
 8007f36:	42b3      	cmp	r3, r6
 8007f38:	d803      	bhi.n	8007f42 <USBH_MSC_Write+0x7e>
 8007f3a:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e9      	bne.n	8007f16 <USBH_MSC_Write+0x52>
      MSC_Handle->state = MSC_IDLE;
 8007f42:	2301      	movs	r3, #1
 8007f44:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 8007f46:	2002      	movs	r0, #2
 8007f48:	e7ee      	b.n	8007f28 <USBH_MSC_Write+0x64>

08007f4a <USBH_MSC_BOT_REQ_Reset>:
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
  phost->Control.setup.b.wValue.w = 0;
 8007f4a:	f64f 7121 	movw	r1, #65313	; 0xff21
 8007f4e:	2200      	movs	r2, #0
 8007f50:	e9c0 1204 	strd	r1, r2, [r0, #16]
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;           
  
  return USBH_CtlReq(phost, 0 , 0 );  
 8007f54:	4611      	mov	r1, r2
 8007f56:	f000 bc6c 	b.w	8008832 <USBH_CtlReq>

08007f5a <USBH_MSC_BOT_REQ_GetMaxLUN>:
{
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0;
 8007f5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007f5e:	f64f 6ca1 	movw	ip, #65185	; 0xfea1
 8007f62:	e9c0 c204 	strd	ip, r2, [r0, #16]
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 1;           
  
  return USBH_CtlReq(phost, Maxlun , 1 ); 
 8007f66:	2201      	movs	r2, #1
 8007f68:	f000 bc63 	b.w	8008832 <USBH_CtlReq>

08007f6c <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
  
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f6c:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
  
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007f70:	4905      	ldr	r1, [pc, #20]	; (8007f88 <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f72:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007f74:	4a05      	ldr	r2, [pc, #20]	; (8007f8c <USBH_MSC_BOT_Init+0x20>)
 8007f76:	e9c3 1215 	strd	r1, r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.state = BOT_SEND_CBW;    
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;   
 8007f80:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  
  return USBH_OK;
}
 8007f84:	2000      	movs	r0, #0
 8007f86:	4770      	bx	lr
 8007f88:	43425355 	.word	0x43425355
 8007f8c:	20304050 	.word	0x20304050

08007f90 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;  
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f90:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8007f94:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f96:	69dc      	ldr	r4, [r3, #28]
  uint8_t toggle = 0;
  
  switch (MSC_Handle->hbot.state)
 8007f98:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8007f9c:	3b01      	subs	r3, #1
{
 8007f9e:	4606      	mov	r6, r0
  switch (MSC_Handle->hbot.state)
 8007fa0:	2b0a      	cmp	r3, #10
 8007fa2:	d859      	bhi.n	8008058 <USBH_MSC_BOT_Process+0xc8>
 8007fa4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007fa8:	001a000b 	.word	0x001a000b
 8007fac:	003d0033 	.word	0x003d0033
 8007fb0:	0068005e 	.word	0x0068005e
 8007fb4:	0093008b 	.word	0x0093008b
 8007fb8:	00be00b4 	.word	0x00be00b4
 8007fbc:	00d6      	.short	0x00d6
  {
  case BOT_SEND_CBW:
    MSC_Handle->hbot.cbw.field.LUN = lun;
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;    
 8007fbe:	2302      	movs	r3, #2
    USBH_BulkSendData (phost,
 8007fc0:	2501      	movs	r5, #1
    MSC_Handle->hbot.cbw.field.LUN = lun;
 8007fc2:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;    
 8007fc6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    USBH_BulkSendData (phost,
 8007fca:	221f      	movs	r2, #31
 8007fcc:	7963      	ldrb	r3, [r4, #5]
 8007fce:	9500      	str	r5, [sp, #0]
 8007fd0:	f104 0154 	add.w	r1, r4, #84	; 0x54
      } 
      
      /* More Data To be Sent */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
      {
        USBH_BulkSendData (phost,
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f000 fe7b 	bl	8008cd0 <USBH_BulkSendData>
 8007fda:	e03d      	b.n	8008058 <USBH_MSC_BOT_Process+0xc8>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe); 
 8007fdc:	7961      	ldrb	r1, [r4, #5]
 8007fde:	f003 fb21 	bl	800b624 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8007fe2:	2801      	cmp	r0, #1
 8007fe4:	d10c      	bne.n	8008000 <USBH_MSC_BOT_Process+0x70>
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0 )
 8007fe6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007fe8:	b143      	cbz	r3, 8007ffc <USBH_MSC_BOT_Process+0x6c>
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8007fea:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 8007fee:	2b00      	cmp	r3, #0
          MSC_Handle->hbot.state = BOT_DATA_IN;
 8007ff0:	bfb4      	ite	lt
 8007ff2:	2303      	movlt	r3, #3
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007ff4:	2305      	movge	r3, #5
    
  case BOT_UNRECOVERED_ERROR: 
    status = USBH_MSC_BOT_REQ_Reset(phost);
    if ( status == USBH_OK)
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW; 
 8007ff6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8007ffa:	e006      	b.n	800800a <USBH_MSC_BOT_Process+0x7a>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007ffc:	2307      	movs	r3, #7
 8007ffe:	e7fa      	b.n	8007ff6 <USBH_MSC_BOT_Process+0x66>
    else if(URB_Status == USBH_URB_NOTREADY)
 8008000:	2802      	cmp	r0, #2
 8008002:	d158      	bne.n	80080b6 <USBH_MSC_BOT_Process+0x126>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008004:	2001      	movs	r0, #1
 8008006:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    
  default:      
    break;
  }
  return status;
}
 800800a:	b002      	add	sp, #8
 800800c:	bd70      	pop	{r4, r5, r6, pc}
    USBH_BulkReceiveData (phost,
 800800e:	7923      	ldrb	r3, [r4, #4]
 8008010:	8962      	ldrh	r2, [r4, #10]
 8008012:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8008016:	f000 fe72 	bl	8008cfe <USBH_BulkReceiveData>
    MSC_Handle->hbot.state  = BOT_DATA_IN_WAIT;
 800801a:	2304      	movs	r3, #4
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800801c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8008020:	e01a      	b.n	8008058 <USBH_MSC_BOT_Process+0xc8>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 8008022:	7921      	ldrb	r1, [r4, #4]
 8008024:	f003 fafe 	bl	800b624 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE) 
 8008028:	2801      	cmp	r0, #1
 800802a:	d117      	bne.n	800805c <USBH_MSC_BOT_Process+0xcc>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800802c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800802e:	8962      	ldrh	r2, [r4, #10]
 8008030:	4293      	cmp	r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;  
 8008032:	bf8a      	itet	hi
 8008034:	1a9b      	subhi	r3, r3, r2
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8008036:	2300      	movls	r3, #0
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008038:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 800803c:	65e3      	str	r3, [r4, #92]	; 0x5c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 800803e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008040:	bf84      	itt	hi
 8008042:	1889      	addhi	r1, r1, r2
 8008044:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8008048:	2b00      	cmp	r3, #0
 800804a:	d065      	beq.n	8008118 <USBH_MSC_BOT_Process+0x188>
        USBH_BulkReceiveData (phost,
 800804c:	7923      	ldrb	r3, [r4, #4]
 800804e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8008052:	4630      	mov	r0, r6
 8008054:	f000 fe53 	bl	8008cfe <USBH_BulkReceiveData>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008058:	2001      	movs	r0, #1
 800805a:	e7d6      	b.n	800800a <USBH_MSC_BOT_Process+0x7a>
    else if(URB_Status == USBH_URB_STALL)
 800805c:	2805      	cmp	r0, #5
 800805e:	d1fb      	bne.n	8008058 <USBH_MSC_BOT_Process+0xc8>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008060:	2309      	movs	r3, #9
 8008062:	e7db      	b.n	800801c <USBH_MSC_BOT_Process+0x8c>
    USBH_BulkSendData (phost,
 8008064:	2501      	movs	r5, #1
 8008066:	7963      	ldrb	r3, [r4, #5]
 8008068:	8922      	ldrh	r2, [r4, #8]
 800806a:	9500      	str	r5, [sp, #0]
 800806c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8008070:	f000 fe2e 	bl	8008cd0 <USBH_BulkSendData>
    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008074:	2306      	movs	r3, #6
 8008076:	e7d1      	b.n	800801c <USBH_MSC_BOT_Process+0x8c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);     
 8008078:	7961      	ldrb	r1, [r4, #5]
 800807a:	f003 fad3 	bl	800b624 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 800807e:	2801      	cmp	r0, #1
 8008080:	d115      	bne.n	80080ae <USBH_MSC_BOT_Process+0x11e>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008082:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008084:	8922      	ldrh	r2, [r4, #8]
 8008086:	4293      	cmp	r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize; 
 8008088:	bf8a      	itet	hi
 800808a:	1a9b      	subhi	r3, r3, r2
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 800808c:	2300      	movls	r3, #0
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800808e:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8008092:	65e3      	str	r3, [r4, #92]	; 0x5c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8008094:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008096:	bf84      	itt	hi
 8008098:	1889      	addhi	r1, r1, r2
 800809a:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
 800809e:	2501      	movs	r5, #1
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d039      	beq.n	8008118 <USBH_MSC_BOT_Process+0x188>
        USBH_BulkSendData (phost,
 80080a4:	7963      	ldrb	r3, [r4, #5]
 80080a6:	9500      	str	r5, [sp, #0]
 80080a8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80080ac:	e792      	b.n	8007fd4 <USBH_MSC_BOT_Process+0x44>
    else if(URB_Status == USBH_URB_NOTREADY)
 80080ae:	2802      	cmp	r0, #2
 80080b0:	d101      	bne.n	80080b6 <USBH_MSC_BOT_Process+0x126>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80080b2:	2305      	movs	r3, #5
 80080b4:	e7b2      	b.n	800801c <USBH_MSC_BOT_Process+0x8c>
    else if(URB_Status == USBH_URB_STALL)
 80080b6:	2805      	cmp	r0, #5
 80080b8:	d1ce      	bne.n	8008058 <USBH_MSC_BOT_Process+0xc8>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80080ba:	230a      	movs	r3, #10
 80080bc:	e7ae      	b.n	800801c <USBH_MSC_BOT_Process+0x8c>
    USBH_BulkReceiveData (phost,
 80080be:	7923      	ldrb	r3, [r4, #4]
 80080c0:	220d      	movs	r2, #13
 80080c2:	f104 0178 	add.w	r1, r4, #120	; 0x78
 80080c6:	f000 fe1a 	bl	8008cfe <USBH_BulkReceiveData>
    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80080ca:	2308      	movs	r3, #8
 80080cc:	e7a6      	b.n	800801c <USBH_MSC_BOT_Process+0x8c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 80080ce:	7921      	ldrb	r1, [r4, #4]
 80080d0:	f003 faa8 	bl	800b624 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80080d4:	2801      	cmp	r0, #1
 80080d6:	d1c1      	bne.n	800805c <USBH_MSC_BOT_Process+0xcc>
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80080d8:	f8d6 3374 	ldr.w	r3, [r6, #884]	; 0x374
      MSC_Handle->hbot.state = BOT_SEND_CBW;    
 80080dc:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;        
 80080e0:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80080e4:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
  
    /*Checking if the transfer length is different than 13*/    
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80080e6:	4630      	mov	r0, r6
 80080e8:	7921      	ldrb	r1, [r4, #4]
 80080ea:	f003 fa57 	bl	800b59c <USBH_LL_GetLastXferSize>
 80080ee:	280d      	cmp	r0, #13
 80080f0:	d137      	bne.n	8008162 <USBH_MSC_BOT_Process+0x1d2>
    }
    else
    { /* CSW length is Correct */
      
      /* Check validity of the CSW Signature and CSWStatus */
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80080f2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80080f4:	4b1c      	ldr	r3, [pc, #112]	; (8008168 <USBH_MSC_BOT_Process+0x1d8>)
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d133      	bne.n	8008162 <USBH_MSC_BOT_Process+0x1d2>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */
        
        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80080fa:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80080fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080fe:	429a      	cmp	r2, r3
 8008100:	d12f      	bne.n	8008162 <USBH_MSC_BOT_Process+0x1d2>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the 
          corresponding CBW */

          if(MSC_Handle->hbot.csw.field.Status == 0) 
 8008102:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
        status = USBH_OK;
 8008106:	2b00      	cmp	r3, #0
 8008108:	bf14      	ite	ne
 800810a:	2002      	movne	r0, #2
 800810c:	2000      	moveq	r0, #0
 800810e:	e77c      	b.n	800800a <USBH_MSC_BOT_Process+0x7a>
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008110:	79e1      	ldrb	r1, [r4, #7]
 8008112:	f000 fd98 	bl	8008c46 <USBH_ClrFeature>
    if (error == USBH_OK)
 8008116:	b908      	cbnz	r0, 800811c <USBH_MSC_BOT_Process+0x18c>
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008118:	2307      	movs	r3, #7
 800811a:	e77f      	b.n	800801c <USBH_MSC_BOT_Process+0x8c>
    else if (error == USBH_UNRECOVERED_ERROR)
 800811c:	2804      	cmp	r0, #4
 800811e:	d19b      	bne.n	8008058 <USBH_MSC_BOT_Process+0xc8>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008120:	230b      	movs	r3, #11
 8008122:	e77b      	b.n	800801c <USBH_MSC_BOT_Process+0x8c>
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008124:	79a1      	ldrb	r1, [r4, #6]
 8008126:	f000 fd8e 	bl	8008c46 <USBH_ClrFeature>
    if ( error == USBH_OK)
 800812a:	4605      	mov	r5, r0
 800812c:	b980      	cbnz	r0, 8008150 <USBH_MSC_BOT_Process+0x1c0>
      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe); 
 800812e:	7961      	ldrb	r1, [r4, #5]
 8008130:	4630      	mov	r0, r6
 8008132:	f003 fa90 	bl	800b656 <USBH_LL_GetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1- toggle);   
 8008136:	f1c0 0201 	rsb	r2, r0, #1
 800813a:	7961      	ldrb	r1, [r4, #5]
 800813c:	b2d2      	uxtb	r2, r2
 800813e:	4630      	mov	r0, r6
 8008140:	f003 fa7a 	bl	800b638 <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0);  
 8008144:	462a      	mov	r2, r5
 8008146:	7921      	ldrb	r1, [r4, #4]
 8008148:	4630      	mov	r0, r6
 800814a:	f003 fa75 	bl	800b638 <USBH_LL_SetToggle>
 800814e:	e787      	b.n	8008060 <USBH_MSC_BOT_Process+0xd0>
    else if (error == USBH_UNRECOVERED_ERROR)
 8008150:	2804      	cmp	r0, #4
 8008152:	e7e4      	b.n	800811e <USBH_MSC_BOT_Process+0x18e>
    status = USBH_MSC_BOT_REQ_Reset(phost);
 8008154:	f7ff fef9 	bl	8007f4a <USBH_MSC_BOT_REQ_Reset>
    if ( status == USBH_OK)
 8008158:	2800      	cmp	r0, #0
 800815a:	f47f af56 	bne.w	800800a <USBH_MSC_BOT_Process+0x7a>
      MSC_Handle->hbot.state = BOT_SEND_CBW; 
 800815e:	2301      	movs	r3, #1
 8008160:	e749      	b.n	8007ff6 <USBH_MSC_BOT_Process+0x66>
        status = USBH_FAIL;
 8008162:	2002      	movs	r0, #2
 8008164:	e751      	b.n	800800a <USBH_MSC_BOT_Process+0x7a>
 8008166:	bf00      	nop
 8008168:	53425355 	.word	0x53425355

0800816c <USBH_MSC_SCSI_TestUnitReady>:
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost, 
                                                uint8_t lun)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800816c:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8008170:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008172:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8008174:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8008178:	2d01      	cmp	r5, #1
 800817a:	d003      	beq.n	8008184 <USBH_MSC_SCSI_TestUnitReady+0x18>
 800817c:	2d02      	cmp	r5, #2
 800817e:	d017      	beq.n	80081b0 <USBH_MSC_SCSI_TestUnitReady+0x44>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008180:	2002      	movs	r0, #2
 8008182:	e014      	b.n	80081ae <USBH_MSC_SCSI_TestUnitReady+0x42>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;     
 8008184:	2600      	movs	r6, #0
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008186:	230a      	movs	r3, #10
 8008188:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;     
 800818c:	65e6      	str	r6, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800818e:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008192:	2210      	movs	r2, #16
 8008194:	4631      	mov	r1, r6
 8008196:	f104 0063 	add.w	r0, r4, #99	; 0x63
 800819a:	f003 fb59 	bl	800b850 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY; 
    
    MSC_Handle->hbot.state = BOT_SEND_CBW;
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800819e:	2302      	movs	r3, #2
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY; 
 80081a0:	f884 6063 	strb.w	r6, [r4, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80081a4:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80081a8:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    error = USBH_BUSY; 
 80081ac:	4628      	mov	r0, r5
  default:
    break;
  }
  
  return error;
}
 80081ae:	bd70      	pop	{r4, r5, r6, pc}
 80081b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    error = USBH_MSC_BOT_Process(phost, lun);
 80081b4:	f7ff beec 	b.w	8007f90 <USBH_MSC_BOT_Process>

080081b8 <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost, 
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081b8:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 80081bc:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081be:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 80081c0:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 80081c4:	2d01      	cmp	r5, #1
{
 80081c6:	4616      	mov	r6, r2
  switch(MSC_Handle->hbot.cmd_state)
 80081c8:	d003      	beq.n	80081d2 <USBH_MSC_SCSI_ReadCapacity+0x1a>
 80081ca:	2d02      	cmp	r5, #2
 80081cc:	d01c      	beq.n	8008208 <USBH_MSC_SCSI_ReadCapacity+0x50>
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80081ce:	2001      	movs	r0, #1
 80081d0:	e027      	b.n	8008222 <USBH_MSC_SCSI_ReadCapacity+0x6a>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80081d2:	2308      	movs	r3, #8
 80081d4:	65e3      	str	r3, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80081d6:	2380      	movs	r3, #128	; 0x80
 80081d8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80081dc:	230a      	movs	r3, #10
 80081de:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80081e2:	2210      	movs	r2, #16
 80081e4:	2100      	movs	r1, #0
 80081e6:	f104 0063 	add.w	r0, r4, #99	; 0x63
 80081ea:	f003 fb31 	bl	800b850 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10; 
 80081ee:	2325      	movs	r3, #37	; 0x25
 80081f0:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    
    MSC_Handle->hbot.state = BOT_SEND_CBW;
    
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80081f4:	2302      	movs	r3, #2
 80081f6:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 80081fa:	f104 0310 	add.w	r3, r4, #16
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80081fe:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8008202:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8008206:	e7e2      	b.n	80081ce <USBH_MSC_SCSI_ReadCapacity+0x16>
    error = USBH_BUSY; 
    break;
    
  case BOT_CMD_WAIT: 
    
    error = USBH_MSC_BOT_Process(phost, lun);
 8008208:	f7ff fec2 	bl	8007f90 <USBH_MSC_BOT_Process>
    
    if(error == USBH_OK)
 800820c:	b948      	cbnz	r0, 8008222 <USBH_MSC_SCSI_ReadCapacity+0x6a>
    {
      /*assign the capacity*/
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 800820e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8008212:	680b      	ldr	r3, [r1, #0]
 8008214:	ba1b      	rev	r3, r3
 8008216:	6033      	str	r3, [r6, #0]
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);

      /*assign the page length*/
      capacity->block_size = MSC_Handle->hbot.pbuf[7] | (MSC_Handle->hbot.pbuf[6] << 8); 
 8008218:	798a      	ldrb	r2, [r1, #6]
 800821a:	79cb      	ldrb	r3, [r1, #7]
 800821c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008220:	80b3      	strh	r3, [r6, #4]
  default:
    break;
  }
  
  return error;
}
 8008222:	bd70      	pop	{r4, r5, r6, pc}

08008224 <USBH_MSC_SCSI_Inquiry>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008226:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 800822a:	69dc      	ldr	r4, [r3, #28]
  switch(MSC_Handle->hbot.cmd_state)
 800822c:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8008230:	2d01      	cmp	r5, #1
{
 8008232:	460f      	mov	r7, r1
 8008234:	4616      	mov	r6, r2
  switch(MSC_Handle->hbot.cmd_state)
 8008236:	d003      	beq.n	8008240 <USBH_MSC_SCSI_Inquiry+0x1c>
 8008238:	2d02      	cmp	r5, #2
 800823a:	d025      	beq.n	8008288 <USBH_MSC_SCSI_Inquiry+0x64>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800823c:	2502      	movs	r5, #2
 800823e:	e021      	b.n	8008284 <USBH_MSC_SCSI_Inquiry+0x60>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008240:	2380      	movs	r3, #128	; 0x80
 8008242:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008246:	230a      	movs	r3, #10
 8008248:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800824c:	2300      	movs	r3, #0
 800824e:	f8c4 3069 	str.w	r3, [r4, #105]	; 0x69
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
    MSC_Handle->hbot.cbw.field.CB[2]  = 0;    
 8008252:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0;    
 8008256:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24;    
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;    
 800825a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
        
    MSC_Handle->hbot.state = BOT_SEND_CBW;

    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800825e:	2302      	movs	r3, #2
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8008260:	2224      	movs	r2, #36	; 0x24
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
 8008262:	2112      	movs	r1, #18
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
 8008264:	017f      	lsls	r7, r7, #5
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008266:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 800826a:	f104 0310 	add.w	r3, r4, #16
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800826e:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
 8008270:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
 8008274:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24;    
 8008278:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 800827c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8008280:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  default:
    break;
  }
  
  return error;
}
 8008284:	4628      	mov	r0, r5
 8008286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 8008288:	f7ff fe82 	bl	8007f90 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 800828c:	4605      	mov	r5, r0
 800828e:	2800      	cmp	r0, #0
 8008290:	d1f8      	bne.n	8008284 <USBH_MSC_SCSI_Inquiry+0x60>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008292:	4601      	mov	r1, r0
 8008294:	2222      	movs	r2, #34	; 0x22
 8008296:	4630      	mov	r0, r6
 8008298:	f003 fada 	bl	800b850 <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1F;
 800829c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	f003 031f 	and.w	r3, r3, #31
 80082a6:	7073      	strb	r3, [r6, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5;  
 80082a8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	095b      	lsrs	r3, r3, #5
 80082b0:	7033      	strb	r3, [r6, #0]
      inquiry->RemovableMedia = (MSC_Handle->hbot.pbuf[1] & 0x80)== 0x80;
 80082b2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80082b6:	785b      	ldrb	r3, [r3, #1]
 80082b8:	09db      	lsrs	r3, r3, #7
 80082ba:	70b3      	strb	r3, [r6, #2]
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8);
 80082bc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80082c0:	f852 3f08 	ldr.w	r3, [r2, #8]!
 80082c4:	f8c6 3003 	str.w	r3, [r6, #3]
 80082c8:	6853      	ldr	r3, [r2, #4]
 80082ca:	f8c6 3007 	str.w	r3, [r6, #7]
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16);
 80082ce:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80082d2:	3310      	adds	r3, #16
 80082d4:	f106 020c 	add.w	r2, r6, #12
 80082d8:	f103 0110 	add.w	r1, r3, #16
 80082dc:	f853 0b04 	ldr.w	r0, [r3], #4
 80082e0:	f842 0b04 	str.w	r0, [r2], #4
 80082e4:	428b      	cmp	r3, r1
 80082e6:	d1f9      	bne.n	80082dc <USBH_MSC_SCSI_Inquiry+0xb8>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4);    
 80082e8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	f8c6 301d 	str.w	r3, [r6, #29]
 80082f2:	e7c7      	b.n	8008284 <USBH_MSC_SCSI_Inquiry+0x60>

080082f4 <USBH_MSC_SCSI_RequestSense>:
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_SenseTypeDef *sense_data)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80082f4:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 80082f8:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80082fa:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 80082fc:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8008300:	2b01      	cmp	r3, #1
{
 8008302:	460e      	mov	r6, r1
 8008304:	4615      	mov	r5, r2
  switch(MSC_Handle->hbot.cmd_state)
 8008306:	d003      	beq.n	8008310 <USBH_MSC_SCSI_RequestSense+0x1c>
 8008308:	2b02      	cmp	r3, #2
 800830a:	d029      	beq.n	8008360 <USBH_MSC_SCSI_RequestSense+0x6c>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800830c:	2002      	movs	r0, #2
 800830e:	e026      	b.n	800835e <USBH_MSC_SCSI_RequestSense+0x6a>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008310:	2280      	movs	r2, #128	; 0x80
 8008312:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008316:	220a      	movs	r2, #10
 8008318:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800831c:	2200      	movs	r2, #0
 800831e:	f8c4 2069 	str.w	r2, [r4, #105]	; 0x69
 8008322:	f8c4 206d 	str.w	r2, [r4, #109]	; 0x6d
 8008326:	f8a4 2071 	strh.w	r2, [r4, #113]	; 0x71
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE; 
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5); 
    MSC_Handle->hbot.cbw.field.CB[2]  = 0; 
 800832a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0; 
 800832e:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;       
 8008332:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    
    MSC_Handle->hbot.state = BOT_SEND_CBW;
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008336:	2202      	movs	r2, #2
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8008338:	210e      	movs	r1, #14
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE; 
 800833a:	2003      	movs	r0, #3
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5); 
 800833c:	0176      	lsls	r6, r6, #5
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800833e:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8008342:	f104 0210 	add.w	r2, r4, #16
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE; 
 8008346:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800834a:	65e1      	str	r1, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5); 
 800834c:	f884 6064 	strb.w	r6, [r4, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8008350:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008354:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8008358:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    error = USBH_BUSY; 
 800835c:	4618      	mov	r0, r3
  default:
    break;
  }
  
  return error;
}
 800835e:	bd70      	pop	{r4, r5, r6, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 8008360:	f7ff fe16 	bl	8007f90 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 8008364:	2800      	cmp	r0, #0
 8008366:	d1fa      	bne.n	800835e <USBH_MSC_SCSI_RequestSense+0x6a>
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0F;  
 8008368:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800836c:	789b      	ldrb	r3, [r3, #2]
 800836e:	f003 030f 	and.w	r3, r3, #15
 8008372:	702b      	strb	r3, [r5, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8008374:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008378:	7b1b      	ldrb	r3, [r3, #12]
 800837a:	706b      	strb	r3, [r5, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800837c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008380:	7b5b      	ldrb	r3, [r3, #13]
 8008382:	70ab      	strb	r3, [r5, #2]
 8008384:	e7eb      	b.n	800835e <USBH_MSC_SCSI_RequestSense+0x6a>

08008386 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8008386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800838a:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800838c:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8008390:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008392:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8008394:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8008398:	2d01      	cmp	r5, #1
{
 800839a:	4616      	mov	r6, r2
  switch(MSC_Handle->hbot.cmd_state)
 800839c:	d003      	beq.n	80083a6 <USBH_MSC_SCSI_Write+0x20>
 800839e:	2d02      	cmp	r5, #2
 80083a0:	d02f      	beq.n	8008402 <USBH_MSC_SCSI_Write+0x7c>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80083a2:	2002      	movs	r0, #2
 80083a4:	e02b      	b.n	80083fe <USBH_MSC_SCSI_Write+0x78>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 80083a6:	027b      	lsls	r3, r7, #9
 80083a8:	65e3      	str	r3, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80083aa:	2100      	movs	r1, #0
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80083ac:	230a      	movs	r3, #10
 80083ae:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80083b2:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80083b6:	2210      	movs	r2, #16
 80083b8:	f104 0063 	add.w	r0, r4, #99	; 0x63
 80083bc:	f003 fa48 	bl	800b850 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10; 
 80083c0:	232a      	movs	r3, #42	; 0x2a
 80083c2:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    
    /*logical block address*/
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)&address)[3]);
 80083c6:	f3c6 6307 	ubfx	r3, r6, #24, #8
 80083ca:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)&address)[2]);
 80083ce:	f3c6 4307 	ubfx	r3, r6, #16, #8
 80083d2:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)&address)[1]);
 80083d6:	f3c6 2307 	ubfx	r3, r6, #8, #8
 80083da:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)&address)[0]);
    
    
    /*Transfer length */
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)&length)[1]) ; 
 80083de:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80083e2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)&length)[0]) ; 

    
    MSC_Handle->hbot.state = BOT_SEND_CBW;
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80083e6:	2302      	movs	r3, #2
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)&address)[0]);
 80083e8:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)&length)[0]) ; 
 80083ec:	f884 706b 	strb.w	r7, [r4, #107]	; 0x6b
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80083f0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80083f4:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 80083f8:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
    error = USBH_BUSY; 
 80083fc:	4628      	mov	r0, r5
  default:
    break;
  }
  
  return error;
}
 80083fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    error = USBH_MSC_BOT_Process(phost, lun);
 8008406:	f7ff bdc3 	b.w	8007f90 <USBH_MSC_BOT_Process>

0800840a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 800840a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800840e:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008410:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8008414:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008416:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8008418:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800841c:	2d01      	cmp	r5, #1
{
 800841e:	4616      	mov	r6, r2
  switch(MSC_Handle->hbot.cmd_state)
 8008420:	d003      	beq.n	800842a <USBH_MSC_SCSI_Read+0x20>
 8008422:	2d02      	cmp	r5, #2
 8008424:	d030      	beq.n	8008488 <USBH_MSC_SCSI_Read+0x7e>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008426:	2002      	movs	r0, #2
 8008428:	e02c      	b.n	8008484 <USBH_MSC_SCSI_Read+0x7a>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 800842a:	027b      	lsls	r3, r7, #9
 800842c:	65e3      	str	r3, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800842e:	2380      	movs	r3, #128	; 0x80
 8008430:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008434:	230a      	movs	r3, #10
 8008436:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800843a:	2210      	movs	r2, #16
 800843c:	2100      	movs	r1, #0
 800843e:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8008442:	f003 fa05 	bl	800b850 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10; 
 8008446:	2328      	movs	r3, #40	; 0x28
 8008448:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    
    /*logical block address*/
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)&address)[3]);
 800844c:	f3c6 6307 	ubfx	r3, r6, #24, #8
 8008450:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)&address)[2]);
 8008454:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8008458:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)&address)[1]);
 800845c:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8008460:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)&address)[0]);
    
    
    /*Transfer length */
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)&length)[1]) ; 
 8008464:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8008468:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)&length)[0]) ; 

    
    MSC_Handle->hbot.state = BOT_SEND_CBW;
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800846c:	2302      	movs	r3, #2
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)&address)[0]);
 800846e:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)&length)[0]) ; 
 8008472:	f884 706b 	strb.w	r7, [r4, #107]	; 0x6b
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008476:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800847a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 800847e:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
    error = USBH_BUSY; 
 8008482:	4628      	mov	r0, r5
  default:
    break;
  }
  
  return error;
}
 8008484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    error = USBH_MSC_BOT_Process(phost, lun);
 800848c:	f7ff bd80 	b.w	8007f90 <USBH_MSC_BOT_Process>

08008490 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008490:	f500 735f 	add.w	r3, r0, #892	; 0x37c
 8008494:	f500 726e 	add.w	r2, r0, #952	; 0x3b8
  uint32_t i = 0;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0;
 8008498:	2100      	movs	r1, #0
 800849a:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d1fb      	bne.n	800849a <DeInitStateMachine+0xa>
 80084a2:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80084a6:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0;
 80084aa:	2300      	movs	r3, #0
 80084ac:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 80084b0:	4291      	cmp	r1, r2
 80084b2:	d1fb      	bne.n	80084ac <DeInitStateMachine+0x1c>
  }
  
  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 80084b4:	2201      	movs	r2, #1
  phost->gState = HOST_IDLE;
 80084b6:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 80084b8:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 80084ba:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0;  
 80084bc:	f8c0 33b8 	str.w	r3, [r0, #952]	; 0x3b8
  
  phost->Control.state = CTRL_SETUP;
 80084c0:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
  phost->Control.errorcount = 0;
 80084c2:	7643      	strb	r3, [r0, #25]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 80084c4:	2240      	movs	r2, #64	; 0x40
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 80084c6:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 80084ca:	7182      	strb	r2, [r0, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 80084cc:	f8a0 331c 	strh.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
  
  return USBH_OK;
}
 80084d0:	2000      	movs	r0, #0
 80084d2:	4770      	bx	lr

080084d4 <USBH_Init>:
{
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	460d      	mov	r5, r1
  if(phost == NULL)
 80084d8:	4604      	mov	r4, r0
 80084da:	b180      	cbz	r0, 80084fe <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 80084dc:	2300      	movs	r3, #0
  phost->id = id;
 80084de:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  phost->pActiveClass = NULL;
 80084e2:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
  phost->ClassNumber = 0;
 80084e6:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  DeInitStateMachine(phost);
 80084ea:	f7ff ffd1 	bl	8008490 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 80084ee:	b10d      	cbz	r5, 80084f4 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 80084f0:	f8c4 53c4 	str.w	r5, [r4, #964]	; 0x3c4
  USBH_LL_Init(phost);
 80084f4:	4620      	mov	r0, r4
 80084f6:	f002 ffed 	bl	800b4d4 <USBH_LL_Init>
  return USBH_OK;
 80084fa:	2000      	movs	r0, #0
}
 80084fc:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL; 
 80084fe:	2002      	movs	r0, #2
 8008500:	e7fc      	b.n	80084fc <USBH_Init+0x28>

08008502 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(pclass != 0)
 8008502:	b149      	cbz	r1, 8008518 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008504:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8008508:	b933      	cbnz	r3, 8008518 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800850a:	2201      	movs	r2, #1
 800850c:	f8c0 2378 	str.w	r2, [r0, #888]	; 0x378
 8008510:	f8c0 1370 	str.w	r1, [r0, #880]	; 0x370
      status = USBH_OK;
 8008514:	4618      	mov	r0, r3
 8008516:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 8008518:	2002      	movs	r0, #2
  }
  
  return status;
}
 800851a:	4770      	bx	lr

0800851c <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800851c:	f890 3336 	ldrb.w	r3, [r0, #822]	; 0x336
 8008520:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8008522:	bf86      	itte	hi
 8008524:	f880 131f 	strbhi.w	r1, [r0, #799]	; 0x31f
  USBH_StatusTypeDef   status = USBH_OK;
 8008528:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 800852a:	2002      	movls	r0, #2
  }
  return status;  
}
 800852c:	4770      	bx	lr

0800852e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800852e:	b530      	push	{r4, r5, lr}
 8008530:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;  
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8008532:	f890 5341 	ldrb.w	r5, [r0, #833]	; 0x341
 8008536:	428d      	cmp	r5, r1
 8008538:	d001      	beq.n	800853e <USBH_FindInterface+0x10>
 800853a:	29ff      	cmp	r1, #255	; 0xff
 800853c:	d10f      	bne.n	800855e <USBH_FindInterface+0x30>
 800853e:	f890 5342 	ldrb.w	r5, [r0, #834]	; 0x342
 8008542:	4295      	cmp	r5, r2
 8008544:	d001      	beq.n	800854a <USBH_FindInterface+0x1c>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8008546:	2aff      	cmp	r2, #255	; 0xff
 8008548:	d109      	bne.n	800855e <USBH_FindInterface+0x30>
 800854a:	f890 5343 	ldrb.w	r5, [r0, #835]	; 0x343
 800854e:	429d      	cmp	r5, r3
 8008550:	d103      	bne.n	800855a <USBH_FindInterface+0x2c>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
    {
      return  if_ix;
 8008552:	b2e0      	uxtb	r0, r4
    }
    if_ix++;
  }
  return 0xFF;
}
 8008554:	bd30      	pop	{r4, r5, pc}
 8008556:	2401      	movs	r4, #1
 8008558:	e7eb      	b.n	8008532 <USBH_FindInterface+0x4>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 800855a:	2bff      	cmp	r3, #255	; 0xff
 800855c:	d0f9      	beq.n	8008552 <USBH_FindInterface+0x24>
 800855e:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008560:	2c00      	cmp	r4, #0
 8008562:	d0f8      	beq.n	8008556 <USBH_FindInterface+0x28>
  return 0xFF;
 8008564:	20ff      	movs	r0, #255	; 0xff
 8008566:	e7f5      	b.n	8008554 <USBH_FindInterface+0x26>

08008568 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8008568:	b510      	push	{r4, lr}
 800856a:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800856c:	f002 ffde 	bl	800b52c <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 8008570:	2101      	movs	r1, #1
 8008572:	4620      	mov	r0, r4
 8008574:	f003 f85a 	bl	800b62c <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
}
 8008578:	2000      	movs	r0, #0
 800857a:	bd10      	pop	{r4, pc}

0800857c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800857c:	b530      	push	{r4, r5, lr}
 800857e:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008580:	2302      	movs	r3, #2
 8008582:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0;
  
  switch (phost->gState)
 8008586:	7803      	ldrb	r3, [r0, #0]
{
 8008588:	4604      	mov	r4, r0
  switch (phost->gState)
 800858a:	2b0a      	cmp	r3, #10
 800858c:	d817      	bhi.n	80085be <USBH_Process+0x42>
 800858e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008592:	000b      	.short	0x000b
 8008594:	00190016 	.word	0x00190016
 8008598:	00160102 	.word	0x00160102
 800859c:	00ea0049 	.word	0x00ea0049
 80085a0:	00c200ba 	.word	0x00c200ba
 80085a4:	00fa00cb 	.word	0x00fa00cb
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 80085a8:	f890 331e 	ldrb.w	r3, [r0, #798]	; 0x31e
 80085ac:	b13b      	cbz	r3, 80085be <USBH_Process+0x42>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 80085ae:	2301      	movs	r3, #1
 80085b0:	7003      	strb	r3, [r0, #0]
      USBH_Delay(200); 
 80085b2:	20c8      	movs	r0, #200	; 0xc8
 80085b4:	f003 f85d 	bl	800b672 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80085b8:	4620      	mov	r0, r4
 80085ba:	f002 ffe1 	bl	800b580 <USBH_LL_ResetPort>
  case HOST_ABORT_STATE:
  default :
    break;
  }
 return USBH_OK;  
}
 80085be:	2000      	movs	r0, #0
 80085c0:	b007      	add	sp, #28
 80085c2:	bd30      	pop	{r4, r5, pc}
    USBH_Delay(100); 
 80085c4:	2064      	movs	r0, #100	; 0x64
 80085c6:	f003 f854 	bl	800b672 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80085ca:	4620      	mov	r0, r4
 80085cc:	f002 ffca 	bl	800b564 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 80085d0:	2305      	movs	r3, #5
 80085d2:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80085d4:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 80085d8:	2100      	movs	r1, #0
 80085da:	4620      	mov	r0, r4
 80085dc:	f000 fbb3 	bl	8008d46 <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80085e0:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 80085e2:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 fbae 	bl	8008d46 <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 80085ea:	79a2      	ldrb	r2, [r4, #6]
 80085ec:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80085f0:	7120      	strb	r0, [r4, #4]
 80085f2:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 80085f4:	9202      	str	r2, [sp, #8]
 80085f6:	2500      	movs	r5, #0
      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
      
      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80085f8:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80085fc:	9200      	str	r2, [sp, #0]
 80085fe:	9501      	str	r5, [sp, #4]
 8008600:	2280      	movs	r2, #128	; 0x80
 8008602:	4620      	mov	r0, r4
 8008604:	f000 fb8b 	bl	8008d1e <USBH_OpenPipe>
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8008608:	79a2      	ldrb	r2, [r4, #6]
 800860a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800860e:	7961      	ldrb	r1, [r4, #5]
 8008610:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8008614:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8008618:	9200      	str	r2, [sp, #0]
 800861a:	4620      	mov	r0, r4
 800861c:	462a      	mov	r2, r5
 800861e:	f000 fb7e 	bl	8008d1e <USBH_OpenPipe>
 8008622:	e7cc      	b.n	80085be <USBH_Process+0x42>
  switch (phost->EnumState)
 8008624:	7843      	ldrb	r3, [r0, #1]
 8008626:	2b07      	cmp	r3, #7
 8008628:	d8c9      	bhi.n	80085be <USBH_Process+0x42>
 800862a:	e8df f003 	tbb	[pc, r3]
 800862e:	1404      	.short	0x1404
 8008630:	3c342d1c 	.word	0x3c342d1c
 8008634:	5548      	.short	0x5548
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 8008636:	2108      	movs	r1, #8
 8008638:	f000 f9d5 	bl	80089e6 <USBH_Get_DevDesc>
 800863c:	4605      	mov	r5, r0
 800863e:	2800      	cmp	r0, #0
 8008640:	d1bd      	bne.n	80085be <USBH_Process+0x42>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008642:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008644:	f894 2327 	ldrb.w	r2, [r4, #807]	; 0x327
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008648:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 800864a:	7921      	ldrb	r1, [r4, #4]
 800864c:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008650:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 8008652:	9202      	str	r2, [sp, #8]
 8008654:	e7d0      	b.n	80085f8 <USBH_Process+0x7c>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8008656:	2112      	movs	r1, #18
 8008658:	f000 f9c5 	bl	80089e6 <USBH_Get_DevDesc>
 800865c:	2800      	cmp	r0, #0
 800865e:	d1ae      	bne.n	80085be <USBH_Process+0x42>
      phost->EnumState = ENUM_SET_ADDR;
 8008660:	2302      	movs	r3, #2
                                phost->device.Data , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008662:	7063      	strb	r3, [r4, #1]
 8008664:	e7ab      	b.n	80085be <USBH_Process+0x42>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8008666:	2101      	movs	r1, #1
 8008668:	f000 fad3 	bl	8008c12 <USBH_SetAddress>
 800866c:	4605      	mov	r5, r0
 800866e:	2800      	cmp	r0, #0
 8008670:	d1a5      	bne.n	80085be <USBH_Process+0x42>
      USBH_Delay(2);
 8008672:	2002      	movs	r0, #2
 8008674:	f002 fffd 	bl	800b672 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8008678:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 800867a:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 800867c:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 800867e:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 8008682:	7921      	ldrb	r1, [r4, #4]
 8008684:	79a2      	ldrb	r2, [r4, #6]
 8008686:	e7e4      	b.n	8008652 <USBH_Process+0xd6>
    if ( USBH_Get_CfgDesc(phost, 
 8008688:	2109      	movs	r1, #9
 800868a:	f000 fa05 	bl	8008a98 <USBH_Get_CfgDesc>
 800868e:	2800      	cmp	r0, #0
 8008690:	d195      	bne.n	80085be <USBH_Process+0x42>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 8008692:	2304      	movs	r3, #4
 8008694:	e7e5      	b.n	8008662 <USBH_Process+0xe6>
    if (USBH_Get_CfgDesc(phost, 
 8008696:	f8b0 1334 	ldrh.w	r1, [r0, #820]	; 0x334
 800869a:	f000 f9fd 	bl	8008a98 <USBH_Get_CfgDesc>
 800869e:	2800      	cmp	r0, #0
 80086a0:	d18d      	bne.n	80085be <USBH_Process+0x42>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 80086a2:	2305      	movs	r3, #5
 80086a4:	e7dd      	b.n	8008662 <USBH_Process+0xe6>
    if (phost->device.DevDesc.iManufacturer != 0)
 80086a6:	f890 132e 	ldrb.w	r1, [r0, #814]	; 0x32e
 80086aa:	b131      	cbz	r1, 80086ba <USBH_Process+0x13e>
      if ( USBH_Get_StringDesc(phost,
 80086ac:	23ff      	movs	r3, #255	; 0xff
 80086ae:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80086b2:	f000 fa87 	bl	8008bc4 <USBH_Get_StringDesc>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d181      	bne.n	80085be <USBH_Process+0x42>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086ba:	2306      	movs	r3, #6
 80086bc:	e7d1      	b.n	8008662 <USBH_Process+0xe6>
#endif       
    }
    break;
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
 80086be:	f890 132f 	ldrb.w	r1, [r0, #815]	; 0x32f
 80086c2:	b139      	cbz	r1, 80086d4 <USBH_Process+0x158>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80086c4:	23ff      	movs	r3, #255	; 0xff
 80086c6:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80086ca:	f000 fa7b 	bl	8008bc4 <USBH_Get_StringDesc>
 80086ce:	2800      	cmp	r0, #0
 80086d0:	f47f af75 	bne.w	80085be <USBH_Process+0x42>
                               phost->device.Data, 
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 80086d4:	2307      	movs	r3, #7
 80086d6:	e7c4      	b.n	8008662 <USBH_Process+0xe6>
#endif        
    } 
    break;
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 80086d8:	f890 1330 	ldrb.w	r1, [r0, #816]	; 0x330
 80086dc:	b941      	cbnz	r1, 80086f0 <USBH_Process+0x174>
      phost->device.current_interface = 0;
 80086de:	2300      	movs	r3, #0
 80086e0:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 80086e4:	f894 3331 	ldrb.w	r3, [r4, #817]	; 0x331
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d109      	bne.n	8008700 <USBH_Process+0x184>
        phost->gState = HOST_SET_CONFIGURATION;
 80086ec:	2308      	movs	r3, #8
 80086ee:	e008      	b.n	8008702 <USBH_Process+0x186>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 80086f0:	23ff      	movs	r3, #255	; 0xff
 80086f2:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80086f6:	f000 fa65 	bl	8008bc4 <USBH_Get_StringDesc>
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d0ef      	beq.n	80086de <USBH_Process+0x162>
 80086fe:	e75e      	b.n	80085be <USBH_Process+0x42>
        phost->gState  = HOST_INPUT; 
 8008700:	2307      	movs	r3, #7
        phost->gState = HOST_SET_CONFIGURATION;
 8008702:	7023      	strb	r3, [r4, #0]
 8008704:	e75b      	b.n	80085be <USBH_Process+0x42>
      if(phost->pUser != NULL)
 8008706:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 800870a:	2b00      	cmp	r3, #0
 800870c:	f43f af57 	beq.w	80085be <USBH_Process+0x42>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008710:	2101      	movs	r1, #1
 8008712:	4798      	blx	r3
 8008714:	e7ea      	b.n	80086ec <USBH_Process+0x170>
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008716:	f890 1337 	ldrb.w	r1, [r0, #823]	; 0x337
 800871a:	f000 fa87 	bl	8008c2c <USBH_SetCfg>
 800871e:	2800      	cmp	r0, #0
 8008720:	f47f af4d 	bne.w	80085be <USBH_Process+0x42>
      phost->gState  = HOST_CHECK_CLASS;
 8008724:	2309      	movs	r3, #9
 8008726:	e7ec      	b.n	8008702 <USBH_Process+0x186>
    if(phost->ClassNumber == 0)
 8008728:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800872c:	2b00      	cmp	r3, #0
 800872e:	f43f af46 	beq.w	80085be <USBH_Process+0x42>
      phost->pActiveClass = NULL;
 8008732:	2300      	movs	r3, #0
 8008734:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008738:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
 800873c:	f890 2341 	ldrb.w	r2, [r0, #833]	; 0x341
 8008740:	7919      	ldrb	r1, [r3, #4]
 8008742:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 8008744:	bf08      	it	eq
 8008746:	f8c0 3374 	streq.w	r3, [r0, #884]	; 0x374
      if(phost->pActiveClass != NULL)
 800874a:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 800874e:	b1c3      	cbz	r3, 8008782 <USBH_Process+0x206>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	4798      	blx	r3
 8008754:	b9a8      	cbnz	r0, 8008782 <USBH_Process+0x206>
          phost->gState  = HOST_CLASS_REQUEST; 
 8008756:	2306      	movs	r3, #6
 8008758:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 800875a:	2103      	movs	r1, #3
 800875c:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8008760:	4620      	mov	r0, r4
 8008762:	4798      	blx	r3
 8008764:	e72b      	b.n	80085be <USBH_Process+0x42>
    if(phost->pActiveClass != NULL)
 8008766:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 800876a:	b153      	cbz	r3, 8008782 <USBH_Process+0x206>
      status = phost->pActiveClass->Requests(phost);
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	4798      	blx	r3
 8008770:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8008774:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008778:	2b00      	cmp	r3, #0
 800877a:	f47f af20 	bne.w	80085be <USBH_Process+0x42>
        phost->gState  = HOST_CLASS;        
 800877e:	230a      	movs	r3, #10
 8008780:	e7bf      	b.n	8008702 <USBH_Process+0x186>
      phost->gState  = HOST_ABORT_STATE;
 8008782:	230c      	movs	r3, #12
 8008784:	e7bd      	b.n	8008702 <USBH_Process+0x186>
    if(phost->pActiveClass != NULL)
 8008786:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 800878a:	2b00      	cmp	r3, #0
 800878c:	f43f af17 	beq.w	80085be <USBH_Process+0x42>
      phost->pActiveClass->BgndProcess(phost);
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	4798      	blx	r3
 8008794:	e713      	b.n	80085be <USBH_Process+0x42>
    DeInitStateMachine(phost);  
 8008796:	f7ff fe7b 	bl	8008490 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 800879a:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f43f af0d 	beq.w	80085be <USBH_Process+0x42>
      phost->pActiveClass->DeInit(phost); 
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	4620      	mov	r0, r4
 80087a8:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80087aa:	2300      	movs	r3, #0
 80087ac:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
 80087b0:	e705      	b.n	80085be <USBH_Process+0x42>

080087b2 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 80087b2:	f8c0 13b8 	str.w	r1, [r0, #952]	; 0x3b8
}
 80087b6:	4770      	bx	lr

080087b8 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
  phost->Timer ++;
 80087b8:	f8d0 23b8 	ldr.w	r2, [r0, #952]	; 0x3b8
 80087bc:	3201      	adds	r2, #1
 80087be:	f8c0 23b8 	str.w	r2, [r0, #952]	; 0x3b8
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80087c2:	7802      	ldrb	r2, [r0, #0]
 80087c4:	2a0a      	cmp	r2, #10
 80087c6:	d104      	bne.n	80087d2 <USBH_LL_IncTimer+0x1a>
 80087c8:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 80087cc:	b10b      	cbz	r3, 80087d2 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	4718      	bx	r3
}
 80087d2:	4770      	bx	lr

080087d4 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 80087d4:	7802      	ldrb	r2, [r0, #0]
{
 80087d6:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 80087d8:	b94a      	cbnz	r2, 80087ee <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1;
    
    if(phost->pUser != NULL)
 80087da:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
    phost->device.is_connected = 1;
 80087de:	2201      	movs	r2, #1
 80087e0:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 80087e4:	b10b      	cbz	r3, 80087ea <USBH_LL_Connect+0x16>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 80087e6:	2104      	movs	r1, #4
 80087e8:	4798      	blx	r3
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 80087ea:	2000      	movs	r0, #0
 80087ec:	bd08      	pop	{r3, pc}
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 80087ee:	7802      	ldrb	r2, [r0, #0]
 80087f0:	2a01      	cmp	r2, #1
    phost->gState = HOST_DEV_ATTACHED ;
 80087f2:	bf04      	itt	eq
 80087f4:	2202      	moveq	r2, #2
 80087f6:	7002      	strbeq	r2, [r0, #0]
 80087f8:	e7f7      	b.n	80087ea <USBH_LL_Connect+0x16>

080087fa <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80087fa:	b510      	push	{r4, lr}
 80087fc:	4604      	mov	r4, r0
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 80087fe:	f002 fea3 	bl	800b548 <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8008802:	7921      	ldrb	r1, [r4, #4]
 8008804:	4620      	mov	r0, r4
 8008806:	f000 fab6 	bl	8008d76 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 800880a:	7961      	ldrb	r1, [r4, #5]
 800880c:	4620      	mov	r0, r4
 800880e:	f000 fab2 	bl	8008d76 <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 8008812:	2300      	movs	r3, #0
 8008814:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 8008818:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 800881c:	b113      	cbz	r3, 8008824 <USBH_LL_Disconnect+0x2a>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800881e:	2105      	movs	r1, #5
 8008820:	4620      	mov	r0, r4
 8008822:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008824:	4620      	mov	r0, r4
 8008826:	f002 fe81 	bl	800b52c <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 800882a:	2303      	movs	r3, #3
 800882c:	7023      	strb	r3, [r4, #0]
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 800882e:	2000      	movs	r0, #0
 8008830:	bd10      	pop	{r4, pc}

08008832 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8008832:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008834:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 8008836:	7880      	ldrb	r0, [r0, #2]
 8008838:	2801      	cmp	r0, #1
 800883a:	d003      	beq.n	8008844 <USBH_CtlReq+0x12>
 800883c:	2802      	cmp	r0, #2
 800883e:	d008      	beq.n	8008852 <USBH_CtlReq+0x20>
  status = USBH_BUSY;
 8008840:	2001      	movs	r0, #1
 8008842:	e004      	b.n	800884e <USBH_CtlReq+0x1c>
  case CMD_SEND:
    /* Start a SETUP transfer */
    phost->Control.buff = buff; 
    phost->Control.length = length;
    phost->Control.state = CTRL_SETUP;  
    phost->RequestState = CMD_WAIT;
 8008844:	2302      	movs	r3, #2
    phost->Control.buff = buff; 
 8008846:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 8008848:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;  
 800884a:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 800884c:	70a3      	strb	r3, [r4, #2]
    
  default:
    break; 
  }
  return status;
}
 800884e:	b003      	add	sp, #12
 8008850:	bd30      	pop	{r4, r5, pc}
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  
  switch (phost->Control.state)
 8008852:	7e23      	ldrb	r3, [r4, #24]
 8008854:	3b01      	subs	r3, #1
 8008856:	2b0a      	cmp	r3, #10
 8008858:	d8f2      	bhi.n	8008840 <USBH_CtlReq+0xe>
 800885a:	e8df f003 	tbb	[pc, r3]
 800885e:	0f06      	.short	0x0f06
 8008860:	483b3126 	.word	0x483b3126
 8008864:	8679685d 	.word	0x8679685d
 8008868:	93          	.byte	0x93
 8008869:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
 800886a:	7962      	ldrb	r2, [r4, #5]
 800886c:	f104 0110 	add.w	r1, r4, #16
 8008870:	4620      	mov	r0, r4
 8008872:	f000 f9f5 	bl	8008c60 <USBH_CtlSendSetup>
	                   (uint8_t *)phost->Control.setup.d8 , 
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 8008876:	2302      	movs	r3, #2
          phost->Control.state = CTRL_DATA_IN;
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8008878:	7623      	strb	r3, [r4, #24]
 800887a:	e7e1      	b.n	8008840 <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 800887c:	7961      	ldrb	r1, [r4, #5]
 800887e:	4620      	mov	r0, r4
 8008880:	f002 fed0 	bl	800b624 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8008884:	2801      	cmp	r0, #1
 8008886:	d178      	bne.n	800897a <USBH_CtlReq+0x148>
      if (phost->Control.setup.b.wLength.w != 0 )
 8008888:	8ae2      	ldrh	r2, [r4, #22]
 800888a:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800888e:	b132      	cbz	r2, 800889e <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 8008890:	2b00      	cmp	r3, #0
 8008892:	da02      	bge.n	800889a <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 8008894:	2303      	movs	r3, #3
 8008896:	7623      	strb	r3, [r4, #24]
 8008898:	e7d9      	b.n	800884e <USBH_CtlReq+0x1c>
          phost->Control.state = CTRL_DATA_OUT;
 800889a:	2305      	movs	r3, #5
 800889c:	e7ec      	b.n	8008878 <USBH_CtlReq+0x46>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800889e:	2b00      	cmp	r3, #0
 80088a0:	da01      	bge.n	80088a6 <USBH_CtlReq+0x74>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 80088a2:	2309      	movs	r3, #9
 80088a4:	e7e8      	b.n	8008878 <USBH_CtlReq+0x46>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 80088a6:	2307      	movs	r3, #7
 80088a8:	e7e6      	b.n	8008878 <USBH_CtlReq+0x46>
    }    
    break;
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
     phost->Control.timer = phost->Timer;
 80088aa:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 80088ae:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 80088b0:	89a2      	ldrh	r2, [r4, #12]
 80088b2:	7923      	ldrb	r3, [r4, #4]
 80088b4:	68a1      	ldr	r1, [r4, #8]
 80088b6:	4620      	mov	r0, r4
 80088b8:	f000 f9fa 	bl	8008cb0 <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.pipe_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80088bc:	2304      	movs	r3, #4
 80088be:	e7db      	b.n	8008878 <USBH_CtlReq+0x46>
    break;    
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 80088c0:	7921      	ldrb	r1, [r4, #4]
 80088c2:	4620      	mov	r0, r4
 80088c4:	f002 feae 	bl	800b624 <USBH_LL_GetURBState>
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 80088c8:	2801      	cmp	r0, #1
 80088ca:	d0ea      	beq.n	80088a2 <USBH_CtlReq+0x70>
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 80088cc:	2805      	cmp	r0, #5
 80088ce:	d154      	bne.n	800897a <USBH_CtlReq+0x148>
    /* handle error cases */
    else if  (URB_Status == USBH_URB_STALL) 
    { 
      /* In stall case, return to previous machine state*/
      phost->Control.state = CTRL_STALLED; 
      status = USBH_NOT_SUPPORTED;
 80088d0:	2003      	movs	r0, #3
 80088d2:	e7bc      	b.n	800884e <USBH_CtlReq+0x1c>
    USBH_CtlSendData (phost,
 80088d4:	2501      	movs	r5, #1
 80088d6:	7963      	ldrb	r3, [r4, #5]
 80088d8:	89a2      	ldrh	r2, [r4, #12]
 80088da:	9500      	str	r5, [sp, #0]
 80088dc:	68a1      	ldr	r1, [r4, #8]
 80088de:	4620      	mov	r0, r4
 80088e0:	f000 f9cf 	bl	8008c82 <USBH_CtlSendData>
     phost->Control.timer = phost->Timer;
 80088e4:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 80088e8:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80088ea:	2306      	movs	r3, #6
 80088ec:	e7c4      	b.n	8008878 <USBH_CtlReq+0x46>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 80088ee:	7961      	ldrb	r1, [r4, #5]
 80088f0:	4620      	mov	r0, r4
 80088f2:	f002 fe97 	bl	800b624 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80088f6:	2801      	cmp	r0, #1
 80088f8:	d0d5      	beq.n	80088a6 <USBH_CtlReq+0x74>
    else if  (URB_Status == USBH_URB_STALL) 
 80088fa:	2805      	cmp	r0, #5
 80088fc:	d102      	bne.n	8008904 <USBH_CtlReq+0xd2>
      phost->Control.state = CTRL_STALLED; 
 80088fe:	230c      	movs	r3, #12
 8008900:	7623      	strb	r3, [r4, #24]
 8008902:	e7e5      	b.n	80088d0 <USBH_CtlReq+0x9e>
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    } 
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008904:	2802      	cmp	r0, #2
 8008906:	d0c8      	beq.n	800889a <USBH_CtlReq+0x68>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }    
    else if (URB_Status == USBH_URB_ERROR)
 8008908:	2804      	cmp	r0, #4
 800890a:	d199      	bne.n	8008840 <USBH_CtlReq+0xe>
    {
      /* device error */
      phost->Control.state = CTRL_ERROR;  
 800890c:	230b      	movs	r3, #11
 800890e:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8008910:	2301      	movs	r3, #1
 8008912:	70a3      	strb	r3, [r4, #2]
      status = USBH_FAIL;
 8008914:	2002      	movs	r0, #2
  return status;
 8008916:	e79a      	b.n	800884e <USBH_CtlReq+0x1c>
    break;
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8008918:	2200      	movs	r2, #0
 800891a:	7923      	ldrb	r3, [r4, #4]
 800891c:	4611      	mov	r1, r2
 800891e:	4620      	mov	r0, r4
 8008920:	f000 f9c6 	bl	8008cb0 <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.pipe_in);
    phost->Control.timer = phost->Timer;
 8008924:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8008928:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800892a:	2308      	movs	r3, #8
 800892c:	e7a4      	b.n	8008878 <USBH_CtlReq+0x46>
    
    break;
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 800892e:	7921      	ldrb	r1, [r4, #4]
 8008930:	4620      	mov	r0, r4
 8008932:	f002 fe77 	bl	800b624 <USBH_LL_GetURBState>
    
    if  ( URB_Status == USBH_URB_DONE)
 8008936:	2801      	cmp	r0, #1
 8008938:	d104      	bne.n	8008944 <USBH_CtlReq+0x112>
      phost->RequestState = CMD_SEND;
 800893a:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;  
 800893c:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 800893e:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;  
 8008940:	7620      	strb	r0, [r4, #24]
 8008942:	e784      	b.n	800884e <USBH_CtlReq+0x1c>
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    
    else if (URB_Status == USBH_URB_ERROR)
 8008944:	2804      	cmp	r0, #4
 8008946:	d01b      	beq.n	8008980 <USBH_CtlReq+0x14e>
      phost->Control.state = CTRL_ERROR;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
     else if(URB_Status == USBH_URB_STALL)
 8008948:	2805      	cmp	r0, #5
 800894a:	f47f af79 	bne.w	8008840 <USBH_CtlReq+0xe>
 800894e:	e7bf      	b.n	80088d0 <USBH_CtlReq+0x9e>
#endif      
    }
    break;
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8008950:	2200      	movs	r2, #0
 8008952:	2501      	movs	r5, #1
 8008954:	7963      	ldrb	r3, [r4, #5]
 8008956:	9500      	str	r5, [sp, #0]
 8008958:	4611      	mov	r1, r2
 800895a:	4620      	mov	r0, r4
 800895c:	f000 f991 	bl	8008c82 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8008960:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8008964:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008966:	230a      	movs	r3, #10
 8008968:	e786      	b.n	8008878 <USBH_CtlReq+0x46>
    break;
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 800896a:	7961      	ldrb	r1, [r4, #5]
 800896c:	4620      	mov	r0, r4
 800896e:	f002 fe59 	bl	800b624 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8008972:	2801      	cmp	r0, #1
 8008974:	d0e1      	beq.n	800893a <USBH_CtlReq+0x108>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008976:	2802      	cmp	r0, #2
 8008978:	d093      	beq.n	80088a2 <USBH_CtlReq+0x70>
    else if(URB_Status == USBH_URB_ERROR)
 800897a:	2804      	cmp	r0, #4
 800897c:	f47f af60 	bne.w	8008840 <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;
 8008980:	230b      	movs	r3, #11
 8008982:	e779      	b.n	8008878 <USBH_CtlReq+0x46>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008984:	7e63      	ldrb	r3, [r4, #25]
 8008986:	3301      	adds	r3, #1
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b02      	cmp	r3, #2
 800898c:	7663      	strb	r3, [r4, #25]
 800898e:	d806      	bhi.n	800899e <USBH_CtlReq+0x16c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8008990:	4620      	mov	r0, r4
 8008992:	f002 fdd9 	bl	800b548 <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 8008996:	2001      	movs	r0, #1
 8008998:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 800899a:	70a0      	strb	r0, [r4, #2]
 800899c:	e757      	b.n	800884e <USBH_CtlReq+0x1c>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800899e:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80089a2:	2106      	movs	r1, #6
 80089a4:	4620      	mov	r0, r4
 80089a6:	4798      	blx	r3
      phost->Control.errorcount = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	7663      	strb	r3, [r4, #25]
 80089ac:	e7b0      	b.n	8008910 <USBH_CtlReq+0xde>

080089ae <USBH_GetDescriptor>:
{ 
 80089ae:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 80089b0:	7884      	ldrb	r4, [r0, #2]
{ 
 80089b2:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 80089b6:	2c01      	cmp	r4, #1
 80089b8:	d110      	bne.n	80089dc <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80089ba:	f061 047f 	orn	r4, r1, #127	; 0x7f
 80089be:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 80089c0:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 80089c4:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 80089c8:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80089ca:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409;
 80089ce:	bf0c      	ite	eq
 80089d0:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0;
 80089d4:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80089d6:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0;
 80089d8:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length; 
 80089da:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff , length );     
 80089dc:	462a      	mov	r2, r5
 80089de:	4619      	mov	r1, r3
}
 80089e0:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff , length );     
 80089e2:	f7ff bf26 	b.w	8008832 <USBH_CtlReq>

080089e6 <USBH_Get_DevDesc>:
{
 80089e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 80089e8:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 80089ec:	460d      	mov	r5, r1
 80089ee:	9100      	str	r1, [sp, #0]
 80089f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089f4:	2100      	movs	r1, #0
{
 80089f6:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 80089f8:	f7ff ffd9 	bl	80089ae <USBH_GetDescriptor>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d149      	bne.n	8008a94 <USBH_Get_DevDesc+0xae>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8008a00:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8008a04:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8008a08:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8008a0c:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8008a10:	f894 211f 	ldrb.w	r2, [r4, #287]	; 0x11f
 8008a14:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8008a18:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008a1c:	f8a4 3322 	strh.w	r3, [r4, #802]	; 0x322
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8008a20:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8008a24:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8008a28:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8008a2c:	f884 3325 	strb.w	r3, [r4, #805]	; 0x325
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8008a30:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8008a34:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  if (length > 8)
 8008a38:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8008a3a:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8008a3e:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  if (length > 8)
 8008a42:	d927      	bls.n	8008a94 <USBH_Get_DevDesc+0xae>
    dev_desc->idVendor           = LE16 (buf +  8);
 8008a44:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 8008a48:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 8008a4c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008a50:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
    dev_desc->idProduct          = LE16 (buf + 10);
 8008a54:	f894 2127 	ldrb.w	r2, [r4, #295]	; 0x127
 8008a58:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 8008a5c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008a60:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8008a64:	f894 2129 	ldrb.w	r2, [r4, #297]	; 0x129
 8008a68:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8008a6c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008a70:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8008a74:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8008a78:	f884 332e 	strb.w	r3, [r4, #814]	; 0x32e
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8008a7c:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8008a80:	f884 332f 	strb.w	r3, [r4, #815]	; 0x32f
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8008a84:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8008a88:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8008a8c:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8008a90:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
}
 8008a94:	b003      	add	sp, #12
 8008a96:	bd30      	pop	{r4, r5, pc}

08008a98 <USBH_Get_CfgDesc>:
{
 8008a98:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  pData = phost->device.CfgDesc_Raw;
 8008a9c:	f100 041c 	add.w	r4, r0, #28
{
 8008aa0:	460f      	mov	r7, r1
  if((status = USBH_GetDescriptor(phost,
 8008aa2:	9100      	str	r1, [sp, #0]
 8008aa4:	4623      	mov	r3, r4
 8008aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008aaa:	2100      	movs	r1, #0
{
 8008aac:	4605      	mov	r5, r0
  if((status = USBH_GetDescriptor(phost,
 8008aae:	f7ff ff7e 	bl	80089ae <USBH_GetDescriptor>
 8008ab2:	bb60      	cbnz	r0, 8008b0e <USBH_Get_CfgDesc+0x76>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8008ab4:	7f2b      	ldrb	r3, [r5, #28]
 8008ab6:	f885 3332 	strb.w	r3, [r5, #818]	; 0x332
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8008aba:	7f6b      	ldrb	r3, [r5, #29]
 8008abc:	f885 3333 	strb.w	r3, [r5, #819]	; 0x333
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8008ac0:	7fae      	ldrb	r6, [r5, #30]
 8008ac2:	7feb      	ldrb	r3, [r5, #31]
 8008ac4:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8008ac8:	f895 3020 	ldrb.w	r3, [r5, #32]
 8008acc:	f885 3336 	strb.w	r3, [r5, #822]	; 0x336
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8008ad0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8008ad4:	f885 3337 	strb.w	r3, [r5, #823]	; 0x337
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8008ad8:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8008adc:	f885 3338 	strb.w	r3, [r5, #824]	; 0x338
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8008ae0:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8008ae4:	f885 3339 	strb.w	r3, [r5, #825]	; 0x339
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8008ae8:	b2b6      	uxth	r6, r6
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 8008aea:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8008aee:	f8a5 6334 	strh.w	r6, [r5, #820]	; 0x334
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008af2:	2f09      	cmp	r7, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 8008af4:	f885 333a 	strb.w	r3, [r5, #826]	; 0x33a
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008af8:	d909      	bls.n	8008b0e <USBH_Get_CfgDesc+0x76>
 8008afa:	462b      	mov	r3, r5
 8008afc:	4684      	mov	ip, r0
    ptr = USB_LEN_CFG_DESC;
 8008afe:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8008b00:	f04f 081a 	mov.w	r8, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 8008b04:	f1bc 0f02 	cmp.w	ip, #2
 8008b08:	d001      	beq.n	8008b0e <USBH_Get_CfgDesc+0x76>
 8008b0a:	4296      	cmp	r6, r2
 8008b0c:	d802      	bhi.n	8008b14 <USBH_Get_CfgDesc+0x7c>
}
 8008b0e:	b002      	add	sp, #8
 8008b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8008b14:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8008b16:	440c      	add	r4, r1
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8008b18:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 8008b1a:	7861      	ldrb	r1, [r4, #1]
 8008b1c:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8008b1e:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 8008b20:	d1f0      	bne.n	8008b04 <USBH_Get_CfgDesc+0x6c>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8008b22:	7821      	ldrb	r1, [r4, #0]
 8008b24:	f883 133c 	strb.w	r1, [r3, #828]	; 0x33c
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8008b28:	7861      	ldrb	r1, [r4, #1]
 8008b2a:	f883 133d 	strb.w	r1, [r3, #829]	; 0x33d
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8008b2e:	78a1      	ldrb	r1, [r4, #2]
 8008b30:	f883 133e 	strb.w	r1, [r3, #830]	; 0x33e
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8008b34:	78e1      	ldrb	r1, [r4, #3]
 8008b36:	f883 133f 	strb.w	r1, [r3, #831]	; 0x33f
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8008b3a:	7921      	ldrb	r1, [r4, #4]
 8008b3c:	f883 1340 	strb.w	r1, [r3, #832]	; 0x340
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8008b40:	7961      	ldrb	r1, [r4, #5]
 8008b42:	f883 1341 	strb.w	r1, [r3, #833]	; 0x341
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8008b46:	79a1      	ldrb	r1, [r4, #6]
 8008b48:	f883 1342 	strb.w	r1, [r3, #834]	; 0x342
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8008b4c:	79e1      	ldrb	r1, [r4, #7]
 8008b4e:	f883 1343 	strb.w	r1, [r3, #835]	; 0x343
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8008b52:	7a21      	ldrb	r1, [r4, #8]
 8008b54:	f883 1344 	strb.w	r1, [r3, #836]	; 0x344
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8008b58:	fb08 f90c 	mul.w	r9, r8, ip
        ep_ix = 0;
 8008b5c:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b5e:	f893 7340 	ldrb.w	r7, [r3, #832]	; 0x340
 8008b62:	42b9      	cmp	r1, r7
 8008b64:	da01      	bge.n	8008b6a <USBH_Get_CfgDesc+0xd2>
 8008b66:	4296      	cmp	r6, r2
 8008b68:	d803      	bhi.n	8008b72 <USBH_Get_CfgDesc+0xda>
 8008b6a:	f10c 0c01 	add.w	ip, ip, #1
 8008b6e:	331a      	adds	r3, #26
 8008b70:	e7c8      	b.n	8008b04 <USBH_Get_CfgDesc+0x6c>
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8008b72:	7827      	ldrb	r7, [r4, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8008b74:	443c      	add	r4, r7
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8008b76:	443a      	add	r2, r7
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8008b78:	7867      	ldrb	r7, [r4, #1]
 8008b7a:	2f05      	cmp	r7, #5
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8008b7c:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8008b7e:	d1ee      	bne.n	8008b5e <USBH_Get_CfgDesc+0xc6>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8008b80:	1c4f      	adds	r7, r1, #1
 8008b82:	eb09 01c7 	add.w	r1, r9, r7, lsl #3
 8008b86:	4429      	add	r1, r5
 8008b88:	f894 e000 	ldrb.w	lr, [r4]
 8008b8c:	f881 e33e 	strb.w	lr, [r1, #830]	; 0x33e
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8008b90:	f894 e001 	ldrb.w	lr, [r4, #1]
 8008b94:	f881 e33f 	strb.w	lr, [r1, #831]	; 0x33f
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8008b98:	f894 e002 	ldrb.w	lr, [r4, #2]
 8008b9c:	f881 e340 	strb.w	lr, [r1, #832]	; 0x340
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8008ba0:	f894 e003 	ldrb.w	lr, [r4, #3]
 8008ba4:	f881 e341 	strb.w	lr, [r1, #833]	; 0x341
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8008ba8:	f894 a005 	ldrb.w	sl, [r4, #5]
 8008bac:	f894 e004 	ldrb.w	lr, [r4, #4]
 8008bb0:	eb0e 2e0a 	add.w	lr, lr, sl, lsl #8
 8008bb4:	f8a1 e342 	strh.w	lr, [r1, #834]	; 0x342
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8008bb8:	f894 e006 	ldrb.w	lr, [r4, #6]
 8008bbc:	f881 e344 	strb.w	lr, [r1, #836]	; 0x344
            ep_ix++;
 8008bc0:	b279      	sxtb	r1, r7
 8008bc2:	e7cc      	b.n	8008b5e <USBH_Get_CfgDesc+0xc6>

08008bc4 <USBH_Get_StringDesc>:
{
 8008bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 8008bc6:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8008bca:	4614      	mov	r4, r2
 8008bcc:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8008bd4:	462b      	mov	r3, r5
 8008bd6:	2100      	movs	r1, #0
{
 8008bd8:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8008bda:	f7ff fee8 	bl	80089ae <USBH_GetDescriptor>
 8008bde:	b978      	cbnz	r0, 8008c00 <USBH_Get_StringDesc+0x3c>
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 8008be0:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8008be4:	2b03      	cmp	r3, #3
 8008be6:	d10b      	bne.n	8008c00 <USBH_Get_StringDesc+0x3c>
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 8008be8:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8008bec:	3b02      	subs	r3, #2
 8008bee:	42bb      	cmp	r3, r7
 8008bf0:	bfa8      	it	ge
 8008bf2:	463b      	movge	r3, r7
 8008bf4:	b29b      	uxth	r3, r3
    for (idx = 0; idx < strlength; idx+=2 )
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d803      	bhi.n	8008c04 <USBH_Get_StringDesc+0x40>
    *pdest = 0; /* mark end of string */  
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	7023      	strb	r3, [r4, #0]
}
 8008c00:	b003      	add	sp, #12
 8008c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8008c04:	18a9      	adds	r1, r5, r2
    for (idx = 0; idx < strlength; idx+=2 )
 8008c06:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8008c08:	7889      	ldrb	r1, [r1, #2]
 8008c0a:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0; idx < strlength; idx+=2 )
 8008c0e:	b292      	uxth	r2, r2
 8008c10:	e7f2      	b.n	8008bf8 <USBH_Get_StringDesc+0x34>

08008c12 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 8008c12:	7883      	ldrb	r3, [r0, #2]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d105      	bne.n	8008c24 <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008c18:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8008c1c:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0;
 8008c1e:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008c20:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0;
 8008c22:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0 , 0 );
 8008c24:	2200      	movs	r2, #0
 8008c26:	4611      	mov	r1, r2
 8008c28:	f7ff be03 	b.w	8008832 <USBH_CtlReq>

08008c2c <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8008c2c:	7883      	ldrb	r3, [r0, #2]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d105      	bne.n	8008c3e <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 8008c32:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008c36:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0;
 8008c38:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008c3a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0;
 8008c3c:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0 , 0 );      
 8008c3e:	2200      	movs	r2, #0
 8008c40:	4611      	mov	r1, r2
 8008c42:	f7ff bdf6 	b.w	8008832 <USBH_CtlReq>

08008c46 <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8008c46:	7883      	ldrb	r3, [r0, #2]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d105      	bne.n	8008c58 <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 8008c4c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008c50:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0;           
 8008c52:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 8008c54:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;           
 8008c56:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );   
 8008c58:	2200      	movs	r2, #0
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	f7ff bde9 	b.w	8008832 <USBH_CtlReq>

08008c60 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 8008c60:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008c62:	2308      	movs	r3, #8
{
 8008c64:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008c66:	2400      	movs	r4, #0
{
 8008c68:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008c6a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008c6e:	e9cd 4100 	strd	r4, r1, [sp]
 8008c72:	4623      	mov	r3, r4
 8008c74:	4622      	mov	r2, r4
 8008c76:	4629      	mov	r1, r5
 8008c78:	f002 fcba 	bl	800b5f0 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
}
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	b005      	add	sp, #20
 8008c80:	bd30      	pop	{r4, r5, pc}

08008c82 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8008c82:	b530      	push	{r4, r5, lr}
 8008c84:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008c86:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008c8a:	9101      	str	r1, [sp, #4]
{
 8008c8c:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008c8e:	2d00      	cmp	r5, #0
{
 8008c90:	f89d 3020 	ldrb.w	r3, [sp, #32]
    do_ping = 0;
 8008c94:	bf18      	it	ne
 8008c96:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008c98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	f002 fca3 	bl	800b5f0 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
}
 8008caa:	2000      	movs	r0, #0
 8008cac:	b005      	add	sp, #20
 8008cae:	bd30      	pop	{r4, r5, pc}

08008cb0 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008cb0:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008cb2:	2400      	movs	r4, #0
{
 8008cb4:	b085      	sub	sp, #20
 8008cb6:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008cb8:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	9101      	str	r1, [sp, #4]
 8008cc0:	9200      	str	r2, [sp, #0]
 8008cc2:	4623      	mov	r3, r4
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	f002 fc93 	bl	800b5f0 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
  
}
 8008cca:	4620      	mov	r0, r4
 8008ccc:	b005      	add	sp, #20
 8008cce:	bd30      	pop	{r4, r5, pc}

08008cd0 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{ 
 8008cd0:	b530      	push	{r4, r5, lr}
 8008cd2:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008cd4:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008cd8:	9101      	str	r1, [sp, #4]
{ 
 8008cda:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008cdc:	2d00      	cmp	r5, #0
{ 
 8008cde:	f89d 3020 	ldrb.w	r3, [sp, #32]
    do_ping = 0;
 8008ce2:	bf18      	it	ne
 8008ce4:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008ce6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008cea:	2301      	movs	r3, #1
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	f002 fc7c 	bl	800b5f0 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	b005      	add	sp, #20
 8008cfc:	bd30      	pop	{r4, r5, pc}

08008cfe <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008cfe:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008d00:	2400      	movs	r4, #0
{
 8008d02:	b085      	sub	sp, #20
 8008d04:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008d06:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	9101      	str	r1, [sp, #4]
 8008d0e:	9200      	str	r2, [sp, #0]
 8008d10:	2302      	movs	r3, #2
 8008d12:	4629      	mov	r1, r5
 8008d14:	f002 fc6c 	bl	800b5f0 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);
  return USBH_OK;
}
 8008d18:	4620      	mov	r0, r4
 8008d1a:	b005      	add	sp, #20
 8008d1c:	bd30      	pop	{r4, r5, pc}

08008d1e <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8008d1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8008d20:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8008d24:	9402      	str	r4, [sp, #8]
 8008d26:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8008d2a:	9401      	str	r4, [sp, #4]
 8008d2c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8008d30:	9400      	str	r4, [sp, #0]
 8008d32:	f002 fc37 	bl	800b5a4 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);
  
  return USBH_OK; 

}
 8008d36:	2000      	movs	r0, #0
 8008d38:	b004      	add	sp, #16
 8008d3a:	bd10      	pop	{r4, pc}

08008d3c <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8008d3c:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8008d3e:	f002 fc49 	bl	800b5d4 <USBH_LL_ClosePipe>
  
  return USBH_OK; 

}
 8008d42:	2000      	movs	r0, #0
 8008d44:	bd08      	pop	{r3, pc}

08008d46 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008d46:	b530      	push	{r4, r5, lr}
 8008d48:	2300      	movs	r3, #0
 8008d4a:	f500 745f 	add.w	r4, r0, #892	; 0x37c
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < 11 ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 8008d4e:	f854 5b04 	ldr.w	r5, [r4], #4
 8008d52:	042d      	lsls	r5, r5, #16
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	d408      	bmi.n	8008d6a <USBH_AllocPipe+0x24>
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 8008d58:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008d5c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
	{
	   return idx;
 8008d60:	b292      	uxth	r2, r2
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 8008d62:	f8c0 137c 	str.w	r1, [r0, #892]	; 0x37c
}
 8008d66:	b2d0      	uxtb	r0, r2
 8008d68:	bd30      	pop	{r4, r5, pc}
 8008d6a:	3301      	adds	r3, #1
  for (idx = 0 ; idx < 11 ; idx++)
 8008d6c:	2b0b      	cmp	r3, #11
 8008d6e:	d1ee      	bne.n	8008d4e <USBH_AllocPipe+0x8>
	} 
  }
  return 0xFFFF;
 8008d70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d74:	e7f7      	b.n	8008d66 <USBH_AllocPipe+0x20>

08008d76 <USBH_FreePipe>:
   if(idx < 11)
 8008d76:	290a      	cmp	r1, #10
 8008d78:	bf9f      	itttt	ls
 8008d7a:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFF;
 8008d7e:	f8d0 337c 	ldrls.w	r3, [r0, #892]	; 0x37c
 8008d82:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8008d86:	f8c0 337c 	strls.w	r3, [r0, #892]	; 0x37c
}
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	4770      	bx	lr
	...

08008d90 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008d90:	4b03      	ldr	r3, [pc, #12]	; (8008da0 <disk_status+0x10>)
 8008d92:	181a      	adds	r2, r3, r0
 8008d94:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008d98:	7a10      	ldrb	r0, [r2, #8]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	4718      	bx	r3
 8008da0:	200001ec 	.word	0x200001ec

08008da4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8008da4:	4b06      	ldr	r3, [pc, #24]	; (8008dc0 <disk_initialize+0x1c>)
 8008da6:	5c1a      	ldrb	r2, [r3, r0]
 8008da8:	b942      	cbnz	r2, 8008dbc <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8008daa:	2201      	movs	r2, #1
 8008dac:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008dae:	181a      	adds	r2, r3, r0
 8008db0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008db4:	7a10      	ldrb	r0, [r2, #8]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4718      	bx	r3
  }
  return stat;
}
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	4770      	bx	lr
 8008dc0:	200001ec 	.word	0x200001ec

08008dc4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008dc4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008dc6:	4c05      	ldr	r4, [pc, #20]	; (8008ddc <disk_read+0x18>)
 8008dc8:	1825      	adds	r5, r4, r0
 8008dca:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008dce:	6860      	ldr	r0, [r4, #4]
 8008dd0:	6884      	ldr	r4, [r0, #8]
 8008dd2:	7a28      	ldrb	r0, [r5, #8]
 8008dd4:	46a4      	mov	ip, r4
  return res;
}
 8008dd6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008dd8:	4760      	bx	ip
 8008dda:	bf00      	nop
 8008ddc:	200001ec 	.word	0x200001ec

08008de0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008de0:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008de2:	4c05      	ldr	r4, [pc, #20]	; (8008df8 <disk_write+0x18>)
 8008de4:	1825      	adds	r5, r4, r0
 8008de6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008dea:	6860      	ldr	r0, [r4, #4]
 8008dec:	68c4      	ldr	r4, [r0, #12]
 8008dee:	7a28      	ldrb	r0, [r5, #8]
 8008df0:	46a4      	mov	ip, r4
  return res;
}
 8008df2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008df4:	4760      	bx	ip
 8008df6:	bf00      	nop
 8008df8:	200001ec 	.word	0x200001ec

08008dfc <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008dfc:	4b05      	ldr	r3, [pc, #20]	; (8008e14 <disk_ioctl+0x18>)
{
 8008dfe:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008e00:	181c      	adds	r4, r3, r0
 8008e02:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008e06:	7a20      	ldrb	r0, [r4, #8]
 8008e08:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8008e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	4718      	bx	r3
 8008e12:	bf00      	nop
 8008e14:	200001ec 	.word	0x200001ec

08008e18 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8008e18:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8008e1a:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8008e1c:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8008e1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8008e22:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8008e26:	4770      	bx	lr

08008e28 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8008e28:	0a0b      	lsrs	r3, r1, #8
 8008e2a:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e2c:	7043      	strb	r3, [r0, #1]
 8008e2e:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008e30:	0e09      	lsrs	r1, r1, #24
 8008e32:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8008e34:	70c1      	strb	r1, [r0, #3]
}
 8008e36:	4770      	bx	lr

08008e38 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008e38:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8008e3a:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8008e3e:	4290      	cmp	r0, r2
 8008e40:	d1fb      	bne.n	8008e3a <mem_set+0x2>
}
 8008e42:	4770      	bx	lr

08008e44 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8008e44:	4a1b      	ldr	r2, [pc, #108]	; (8008eb4 <chk_lock+0x70>)
 8008e46:	6813      	ldr	r3, [r2, #0]
{
 8008e48:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 8008e4a:	b163      	cbz	r3, 8008e66 <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008e4c:	6804      	ldr	r4, [r0, #0]
 8008e4e:	429c      	cmp	r4, r3
 8008e50:	d107      	bne.n	8008e62 <chk_lock+0x1e>
 8008e52:	6854      	ldr	r4, [r2, #4]
 8008e54:	6883      	ldr	r3, [r0, #8]
 8008e56:	429c      	cmp	r4, r3
 8008e58:	d103      	bne.n	8008e62 <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 8008e5a:	6894      	ldr	r4, [r2, #8]
 8008e5c:	6943      	ldr	r3, [r0, #20]
 8008e5e:	429c      	cmp	r4, r3
 8008e60:	d020      	beq.n	8008ea4 <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008e62:	2400      	movs	r4, #0
 8008e64:	e000      	b.n	8008e68 <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8008e66:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 8008e68:	6913      	ldr	r3, [r2, #16]
 8008e6a:	b1cb      	cbz	r3, 8008ea0 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008e6c:	6805      	ldr	r5, [r0, #0]
 8008e6e:	42ab      	cmp	r3, r5
 8008e70:	d107      	bne.n	8008e82 <chk_lock+0x3e>
 8008e72:	6955      	ldr	r5, [r2, #20]
 8008e74:	6883      	ldr	r3, [r0, #8]
 8008e76:	429d      	cmp	r5, r3
 8008e78:	d103      	bne.n	8008e82 <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 8008e7a:	6995      	ldr	r5, [r2, #24]
 8008e7c:	6943      	ldr	r3, [r0, #20]
 8008e7e:	429d      	cmp	r5, r3
 8008e80:	d015      	beq.n	8008eae <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008e82:	b96c      	cbnz	r4, 8008ea0 <chk_lock+0x5c>
 8008e84:	2902      	cmp	r1, #2
 8008e86:	bf0c      	ite	eq
 8008e88:	2000      	moveq	r0, #0
 8008e8a:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8008e8c:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008e8e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8008e92:	8993      	ldrh	r3, [r2, #12]
 8008e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e98:	bf14      	ite	ne
 8008e9a:	2000      	movne	r0, #0
 8008e9c:	2010      	moveq	r0, #16
 8008e9e:	e7f5      	b.n	8008e8c <chk_lock+0x48>
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	e7f3      	b.n	8008e8c <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008ea4:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008ea6:	2900      	cmp	r1, #0
 8008ea8:	d0f1      	beq.n	8008e8e <chk_lock+0x4a>
 8008eaa:	2010      	movs	r0, #16
 8008eac:	e7ee      	b.n	8008e8c <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e7f9      	b.n	8008ea6 <chk_lock+0x62>
 8008eb2:	bf00      	nop
 8008eb4:	200001c8 	.word	0x200001c8

08008eb8 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8008eb8:	4a1e      	ldr	r2, [pc, #120]	; (8008f34 <inc_lock+0x7c>)
{
 8008eba:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 8008ebc:	6813      	ldr	r3, [r2, #0]
 8008ebe:	6805      	ldr	r5, [r0, #0]
 8008ec0:	429d      	cmp	r5, r3
 8008ec2:	d107      	bne.n	8008ed4 <inc_lock+0x1c>
 8008ec4:	6856      	ldr	r6, [r2, #4]
 8008ec6:	6884      	ldr	r4, [r0, #8]
 8008ec8:	42a6      	cmp	r6, r4
 8008eca:	d103      	bne.n	8008ed4 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 8008ecc:	6946      	ldr	r6, [r0, #20]
 8008ece:	6894      	ldr	r4, [r2, #8]
 8008ed0:	42a6      	cmp	r6, r4
 8008ed2:	d021      	beq.n	8008f18 <inc_lock+0x60>
		if (Files[i].fs == dp->obj.fs &&
 8008ed4:	6914      	ldr	r4, [r2, #16]
 8008ed6:	42ac      	cmp	r4, r5
 8008ed8:	d107      	bne.n	8008eea <inc_lock+0x32>
 8008eda:	6957      	ldr	r7, [r2, #20]
 8008edc:	6886      	ldr	r6, [r0, #8]
 8008ede:	42b7      	cmp	r7, r6
 8008ee0:	d103      	bne.n	8008eea <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 8008ee2:	6997      	ldr	r7, [r2, #24]
 8008ee4:	6946      	ldr	r6, [r0, #20]
 8008ee6:	42b7      	cmp	r7, r6
 8008ee8:	d020      	beq.n	8008f2c <inc_lock+0x74>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008eea:	b10b      	cbz	r3, 8008ef0 <inc_lock+0x38>
 8008eec:	bb04      	cbnz	r4, 8008f30 <inc_lock+0x78>
 8008eee:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8008ef0:	011e      	lsls	r6, r3, #4
 8008ef2:	1994      	adds	r4, r2, r6
 8008ef4:	5195      	str	r5, [r2, r6]
		Files[i].clu = dp->obj.sclust;
 8008ef6:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 8008ef8:	6940      	ldr	r0, [r0, #20]
 8008efa:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 8008efc:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8008efe:	6065      	str	r5, [r4, #4]
		Files[i].ctr = 0;
 8008f00:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008f02:	b981      	cbnz	r1, 8008f26 <inc_lock+0x6e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008f04:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8008f08:	8989      	ldrh	r1, [r1, #12]
 8008f0a:	3101      	adds	r1, #1
 8008f0c:	b289      	uxth	r1, r1
 8008f0e:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 8008f12:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008f14:	8191      	strh	r1, [r2, #12]
}
 8008f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f18:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008f1a:	2900      	cmp	r1, #0
 8008f1c:	d0f2      	beq.n	8008f04 <inc_lock+0x4c>
 8008f1e:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8008f22:	8989      	ldrh	r1, [r1, #12]
 8008f24:	b921      	cbnz	r1, 8008f30 <inc_lock+0x78>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008f26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f2a:	e7f0      	b.n	8008f0e <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e7f4      	b.n	8008f1a <inc_lock+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008f30:	2000      	movs	r0, #0
 8008f32:	e7f0      	b.n	8008f16 <inc_lock+0x5e>
 8008f34:	200001c8 	.word	0x200001c8

08008f38 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008f38:	3801      	subs	r0, #1
 8008f3a:	2801      	cmp	r0, #1
 8008f3c:	d814      	bhi.n	8008f68 <dec_lock+0x30>
		n = Files[i].ctr;
 8008f3e:	490b      	ldr	r1, [pc, #44]	; (8008f6c <dec_lock+0x34>)
 8008f40:	0102      	lsls	r2, r0, #4
 8008f42:	1888      	adds	r0, r1, r2
 8008f44:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f4a:	d104      	bne.n	8008f56 <dec_lock+0x1e>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008f50:	2000      	movs	r0, #0
 8008f52:	5088      	str	r0, [r1, r2]
 8008f54:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0fa      	beq.n	8008f50 <dec_lock+0x18>
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8008f5e:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d0f5      	beq.n	8008f50 <dec_lock+0x18>
		res = FR_OK;
 8008f64:	2000      	movs	r0, #0
 8008f66:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008f68:	2002      	movs	r0, #2
	}
	return res;
}
 8008f6a:	4770      	bx	lr
 8008f6c:	200001c8 	.word	0x200001c8

08008f70 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008f70:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 8008f72:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008f74:	3b02      	subs	r3, #2
 8008f76:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8008f78:	bf83      	ittte	hi
 8008f7a:	8943      	ldrhhi	r3, [r0, #10]
 8008f7c:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
 8008f7e:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008f82:	2000      	movls	r0, #0
}
 8008f84:	4770      	bx	lr

08008f86 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008f86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008f88:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008f8a:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008f8c:	0a49      	lsrs	r1, r1, #9
 8008f8e:	8952      	ldrh	r2, [r2, #10]
 8008f90:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008f94:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008f96:	b130      	cbz	r0, 8008fa6 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8008f98:	4281      	cmp	r1, r0
 8008f9a:	d302      	bcc.n	8008fa2 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8008f9c:	1a09      	subs	r1, r1, r0
 8008f9e:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008fa0:	e7f8      	b.n	8008f94 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8008fa2:	6858      	ldr	r0, [r3, #4]
 8008fa4:	4408      	add	r0, r1
}
 8008fa6:	4770      	bx	lr

08008fa8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008fa8:	4602      	mov	r2, r0
 8008faa:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8008fae:	2000      	movs	r0, #0
	UINT n = 11;

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008fb0:	01c3      	lsls	r3, r0, #7
 8008fb2:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8008fb6:	f812 0b01 	ldrb.w	r0, [r2], #1
 8008fba:	fa50 f383 	uxtab	r3, r0, r3
	} while (--n);
 8008fbe:	428a      	cmp	r2, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008fc0:	b2d8      	uxtb	r0, r3
	} while (--n);
 8008fc2:	d1f5      	bne.n	8008fb0 <sum_sfn+0x8>
	return sum;
}
 8008fc4:	4770      	bx	lr

08008fc6 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008fc6:	6802      	ldr	r2, [r0, #0]
{
 8008fc8:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8008fca:	b152      	cbz	r2, 8008fe2 <get_ldnumber+0x1c>
 8008fcc:	4611      	mov	r1, r2
 8008fce:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008fd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fd4:	2c1f      	cmp	r4, #31
 8008fd6:	d90c      	bls.n	8008ff2 <get_ldnumber+0x2c>
 8008fd8:	2c3a      	cmp	r4, #58	; 0x3a
 8008fda:	d1f8      	bne.n	8008fce <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8008fdc:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008fde:	428b      	cmp	r3, r1
 8008fe0:	d002      	beq.n	8008fe8 <get_ldnumber+0x22>
	int vol = -1;
 8008fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe6:	e005      	b.n	8008ff4 <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008fe8:	7812      	ldrb	r2, [r2, #0]
 8008fea:	2a30      	cmp	r2, #48	; 0x30
 8008fec:	d1f9      	bne.n	8008fe2 <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 8008fee:	3301      	adds	r3, #1
 8008ff0:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008ff2:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8008ff4:	bd10      	pop	{r4, pc}

08008ff6 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008ff6:	b538      	push	{r3, r4, r5, lr}
 8008ff8:	460d      	mov	r5, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	b918      	cbnz	r0, 8009006 <validate+0x10>
		*fs = 0;
 8008ffe:	2300      	movs	r3, #0
 8009000:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8009002:	2009      	movs	r0, #9
		*fs = obj->fs;			/* Owner file sytem object */
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
	}
	return res;
}
 8009004:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8009006:	6803      	ldr	r3, [r0, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d0f8      	beq.n	8008ffe <validate+0x8>
 800900c:	781a      	ldrb	r2, [r3, #0]
 800900e:	2a00      	cmp	r2, #0
 8009010:	d0f5      	beq.n	8008ffe <validate+0x8>
 8009012:	88d9      	ldrh	r1, [r3, #6]
 8009014:	8882      	ldrh	r2, [r0, #4]
 8009016:	4291      	cmp	r1, r2
 8009018:	d1f1      	bne.n	8008ffe <validate+0x8>
 800901a:	7858      	ldrb	r0, [r3, #1]
 800901c:	f7ff feb8 	bl	8008d90 <disk_status>
 8009020:	f010 0001 	ands.w	r0, r0, #1
 8009024:	d1eb      	bne.n	8008ffe <validate+0x8>
		*fs = obj->fs;			/* Owner file sytem object */
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	602b      	str	r3, [r5, #0]
 800902a:	e7eb      	b.n	8009004 <validate+0xe>

0800902c <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800902c:	3801      	subs	r0, #1
 800902e:	440a      	add	r2, r1
			*d++ = *s++;
 8009030:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009034:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8009038:	4291      	cmp	r1, r2
 800903a:	d1f9      	bne.n	8009030 <mem_cpy.part.0+0x4>
}
 800903c:	4770      	bx	lr

0800903e <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 800903e:	7eca      	ldrb	r2, [r1, #27]
 8009040:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8009042:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8009044:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8009048:	bf01      	itttt	eq
 800904a:	7d48      	ldrbeq	r0, [r1, #21]
 800904c:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800904e:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8009052:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8009056:	4618      	mov	r0, r3
 8009058:	4770      	bx	lr

0800905a <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 800905a:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800905e:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8009060:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8009062:	7803      	ldrb	r3, [r0, #0]
 8009064:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009066:	bf01      	itttt	eq
 8009068:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800906a:	750a      	strbeq	r2, [r1, #20]
 800906c:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800906e:	754a      	strbeq	r2, [r1, #21]
}
 8009070:	4770      	bx	lr

08009072 <sync_window.part.3>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8009072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8009074:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009076:	f100 0734 	add.w	r7, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800907a:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800907c:	2301      	movs	r3, #1
 800907e:	462a      	mov	r2, r5
 8009080:	4639      	mov	r1, r7
 8009082:	7840      	ldrb	r0, [r0, #1]
 8009084:	f7ff feac 	bl	8008de0 <disk_write>
 8009088:	b9a0      	cbnz	r0, 80090b4 <sync_window.part.3+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800908a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800908c:	69e2      	ldr	r2, [r4, #28]
			fs->wflag = 0;
 800908e:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009090:	1aeb      	subs	r3, r5, r3
 8009092:	4293      	cmp	r3, r2
 8009094:	d301      	bcc.n	800909a <sync_window.part.3+0x28>
	FRESULT res = FR_OK;
 8009096:	2000      	movs	r0, #0
}
 8009098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800909a:	78a6      	ldrb	r6, [r4, #2]
 800909c:	2e01      	cmp	r6, #1
 800909e:	d9fa      	bls.n	8009096 <sync_window.part.3+0x24>
					wsect += fs->fsize;
 80090a0:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 80090a2:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80090a4:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80090a6:	462a      	mov	r2, r5
 80090a8:	2301      	movs	r3, #1
 80090aa:	4639      	mov	r1, r7
 80090ac:	f7ff fe98 	bl	8008de0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80090b0:	3e01      	subs	r6, #1
 80090b2:	e7f3      	b.n	800909c <sync_window.part.3+0x2a>
			res = FR_DISK_ERR;
 80090b4:	2001      	movs	r0, #1
 80090b6:	e7ef      	b.n	8009098 <sync_window.part.3+0x26>

080090b8 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80090b8:	78c3      	ldrb	r3, [r0, #3]
 80090ba:	b10b      	cbz	r3, 80090c0 <sync_window+0x8>
 80090bc:	f7ff bfd9 	b.w	8009072 <sync_window.part.3>
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	4770      	bx	lr

080090c4 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 80090c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80090c6:	428b      	cmp	r3, r1
{
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	4606      	mov	r6, r0
 80090cc:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80090ce:	d012      	beq.n	80090f6 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 80090d0:	f7ff fff2 	bl	80090b8 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80090d4:	4604      	mov	r4, r0
 80090d6:	b960      	cbnz	r0, 80090f2 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80090d8:	462a      	mov	r2, r5
 80090da:	2301      	movs	r3, #1
 80090dc:	f106 0134 	add.w	r1, r6, #52	; 0x34
 80090e0:	7870      	ldrb	r0, [r6, #1]
 80090e2:	f7ff fe6f 	bl	8008dc4 <disk_read>
 80090e6:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 80090e8:	bf1c      	itt	ne
 80090ea:	f04f 35ff 	movne.w	r5, #4294967295
 80090ee:	2401      	movne	r4, #1
			fs->winsect = sector;
 80090f0:	6335      	str	r5, [r6, #48]	; 0x30
}
 80090f2:	4620      	mov	r0, r4
 80090f4:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 80090f6:	2400      	movs	r4, #0
 80090f8:	e7fb      	b.n	80090f2 <move_window+0x2e>
	...

080090fc <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80090fc:	2300      	movs	r3, #0
{
 80090fe:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009100:	70c3      	strb	r3, [r0, #3]
 8009102:	f04f 33ff 	mov.w	r3, #4294967295
 8009106:	6303      	str	r3, [r0, #48]	; 0x30
{
 8009108:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800910a:	f7ff ffdb 	bl	80090c4 <move_window>
 800910e:	bb30      	cbnz	r0, 800915e <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 8009110:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8009114:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 8009118:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800911c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8009120:	4293      	cmp	r3, r2
 8009122:	d11e      	bne.n	8009162 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009124:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009128:	2be9      	cmp	r3, #233	; 0xe9
 800912a:	d005      	beq.n	8009138 <check_fs+0x3c>
 800912c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800912e:	4a10      	ldr	r2, [pc, #64]	; (8009170 <check_fs+0x74>)
 8009130:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8009134:	4293      	cmp	r3, r2
 8009136:	d116      	bne.n	8009166 <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009138:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 800913c:	f7ff fe6c 	bl	8008e18 <ld_dword>
 8009140:	4b0c      	ldr	r3, [pc, #48]	; (8009174 <check_fs+0x78>)
 8009142:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8009146:	4298      	cmp	r0, r3
 8009148:	d00f      	beq.n	800916a <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800914a:	f104 0086 	add.w	r0, r4, #134	; 0x86
 800914e:	f7ff fe63 	bl	8008e18 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009152:	4b09      	ldr	r3, [pc, #36]	; (8009178 <check_fs+0x7c>)
 8009154:	4298      	cmp	r0, r3
 8009156:	bf14      	ite	ne
 8009158:	2002      	movne	r0, #2
 800915a:	2000      	moveq	r0, #0
}
 800915c:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800915e:	2004      	movs	r0, #4
 8009160:	e7fc      	b.n	800915c <check_fs+0x60>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009162:	2003      	movs	r0, #3
 8009164:	e7fa      	b.n	800915c <check_fs+0x60>
	return 2;
 8009166:	2002      	movs	r0, #2
 8009168:	e7f8      	b.n	800915c <check_fs+0x60>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800916a:	2000      	movs	r0, #0
 800916c:	e7f6      	b.n	800915c <check_fs+0x60>
 800916e:	bf00      	nop
 8009170:	009000eb 	.word	0x009000eb
 8009174:	00544146 	.word	0x00544146
 8009178:	33544146 	.word	0x33544146

0800917c <find_volume>:
{
 800917c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 8009180:	2300      	movs	r3, #0
{
 8009182:	b085      	sub	sp, #20
	*rfs = 0;
 8009184:	600b      	str	r3, [r1, #0]
{
 8009186:	460f      	mov	r7, r1
 8009188:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800918a:	f7ff ff1c 	bl	8008fc6 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800918e:	1e06      	subs	r6, r0, #0
 8009190:	f2c0 813c 	blt.w	800940c <find_volume+0x290>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009194:	4ba1      	ldr	r3, [pc, #644]	; (800941c <find_volume+0x2a0>)
 8009196:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800919a:	2c00      	cmp	r4, #0
 800919c:	f000 8138 	beq.w	8009410 <find_volume+0x294>
	*rfs = fs;							/* Return pointer to the file system object */
 80091a0:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80091a2:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80091a4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80091a8:	b173      	cbz	r3, 80091c8 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 80091aa:	7860      	ldrb	r0, [r4, #1]
 80091ac:	f7ff fdf0 	bl	8008d90 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80091b0:	07c1      	lsls	r1, r0, #31
 80091b2:	d409      	bmi.n	80091c8 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80091b4:	2d00      	cmp	r5, #0
 80091b6:	f000 812d 	beq.w	8009414 <find_volume+0x298>
 80091ba:	f010 0004 	ands.w	r0, r0, #4
 80091be:	d000      	beq.n	80091c2 <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 80091c0:	200a      	movs	r0, #10
}
 80091c2:	b005      	add	sp, #20
 80091c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80091c8:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80091ca:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80091cc:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80091ce:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80091d0:	f7ff fde8 	bl	8008da4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80091d4:	07c2      	lsls	r2, r0, #31
 80091d6:	f100 811f 	bmi.w	8009418 <find_volume+0x29c>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80091da:	b10d      	cbz	r5, 80091e0 <find_volume+0x64>
 80091dc:	0743      	lsls	r3, r0, #29
 80091de:	d4ef      	bmi.n	80091c0 <find_volume+0x44>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80091e0:	2100      	movs	r1, #0
 80091e2:	4620      	mov	r0, r4
 80091e4:	f7ff ff8a 	bl	80090fc <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80091e8:	2802      	cmp	r0, #2
 80091ea:	f040 80f5 	bne.w	80093d8 <find_volume+0x25c>
 80091ee:	f504 75fd 	add.w	r5, r4, #506	; 0x1fa
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80091f2:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80091f4:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 80091f8:	b110      	cbz	r0, 8009200 <find_volume+0x84>
 80091fa:	4628      	mov	r0, r5
 80091fc:	f7ff fe0c 	bl	8008e18 <ld_dword>
 8009200:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009204:	3101      	adds	r1, #1
 8009206:	2904      	cmp	r1, #4
 8009208:	f105 0510 	add.w	r5, r5, #16
 800920c:	d1f2      	bne.n	80091f4 <find_volume+0x78>
 800920e:	2600      	movs	r6, #0
			bsect = br[i];
 8009210:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009214:	2d00      	cmp	r5, #0
 8009216:	f000 80d6 	beq.w	80093c6 <find_volume+0x24a>
 800921a:	4629      	mov	r1, r5
 800921c:	4620      	mov	r0, r4
 800921e:	f7ff ff6d 	bl	80090fc <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009222:	2801      	cmp	r0, #1
 8009224:	f200 80d0 	bhi.w	80093c8 <find_volume+0x24c>
	rv = rv << 8 | ptr[0];
 8009228:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800922c:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8009230:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009238:	f040 80d2 	bne.w	80093e0 <find_volume+0x264>
	rv = rv << 8 | ptr[0];
 800923c:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8009240:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009244:	ea56 2603 	orrs.w	r6, r6, r3, lsl #8
 8009248:	d104      	bne.n	8009254 <find_volume+0xd8>
 800924a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800924e:	f7ff fde3 	bl	8008e18 <ld_dword>
 8009252:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009254:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
		fs->fsize = fasize;
 8009258:	61e6      	str	r6, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800925a:	f109 33ff 	add.w	r3, r9, #4294967295
 800925e:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009260:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009264:	f200 80bc 	bhi.w	80093e0 <find_volume+0x264>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009268:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
 800926c:	b2bb      	uxth	r3, r7
 800926e:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 80b5 	beq.w	80093e0 <find_volume+0x264>
 8009276:	1e7b      	subs	r3, r7, #1
 8009278:	423b      	tst	r3, r7
 800927a:	f040 80b1 	bne.w	80093e0 <find_volume+0x264>
	rv = rv << 8 | ptr[0];
 800927e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009282:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 8009286:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800928a:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800928e:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009292:	f040 80a5 	bne.w	80093e0 <find_volume+0x264>
	rv = rv << 8 | ptr[0];
 8009296:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800929a:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800929e:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 80092a2:	d103      	bne.n	80092ac <find_volume+0x130>
 80092a4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80092a8:	f7ff fdb6 	bl	8008e18 <ld_dword>
	rv = rv << 8 | ptr[0];
 80092ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092b0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80092b4:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80092b8:	f000 8092 	beq.w	80093e0 <find_volume+0x264>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80092bc:	fb06 fc09 	mul.w	ip, r6, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80092c0:	eb03 1218 	add.w	r2, r3, r8, lsr #4
 80092c4:	4462      	add	r2, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80092c6:	4290      	cmp	r0, r2
 80092c8:	f0c0 808a 	bcc.w	80093e0 <find_volume+0x264>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80092cc:	1a81      	subs	r1, r0, r2
 80092ce:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80092d2:	2900      	cmp	r1, #0
 80092d4:	f000 8084 	beq.w	80093e0 <find_volume+0x264>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80092d8:	f64f 77f5 	movw	r7, #65525	; 0xfff5
 80092dc:	42b9      	cmp	r1, r7
 80092de:	bf8c      	ite	hi
 80092e0:	2703      	movhi	r7, #3
 80092e2:	2702      	movls	r7, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80092e4:	f640 70f5 	movw	r0, #4085	; 0xff5
 80092e8:	4281      	cmp	r1, r0
 80092ea:	bf98      	it	ls
 80092ec:	2701      	movls	r7, #1
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80092ee:	442b      	add	r3, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80092f0:	3102      	adds	r1, #2
		fs->database = bsect + sysect;					/* Data start sector */
 80092f2:	442a      	add	r2, r5
		if (fmt == FS_FAT32) {
 80092f4:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80092f6:	61a1      	str	r1, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80092f8:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80092fa:	6263      	str	r3, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80092fc:	62e2      	str	r2, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80092fe:	d173      	bne.n	80093e8 <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 8009300:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 8009304:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009308:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800930c:	d168      	bne.n	80093e0 <find_volume+0x264>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800930e:	f1b8 0f00 	cmp.w	r8, #0
 8009312:	d165      	bne.n	80093e0 <find_volume+0x264>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009314:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8009318:	f7ff fd7e 	bl	8008e18 <ld_dword>
 800931c:	62a0      	str	r0, [r4, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800931e:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009320:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8009324:	ebb6 2f51 	cmp.w	r6, r1, lsr #9
 8009328:	d35a      	bcc.n	80093e0 <find_volume+0x264>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800932a:	f04f 33ff 	mov.w	r3, #4294967295
 800932e:	e9c4 3304 	strd	r3, r3, [r4, #16]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009332:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
 8009334:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009338:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800933a:	d12f      	bne.n	800939c <find_volume+0x220>
	rv = rv << 8 | ptr[0];
 800933c:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 8009340:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8009344:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009348:	2b01      	cmp	r3, #1
 800934a:	d127      	bne.n	800939c <find_volume+0x220>
			&& move_window(fs, bsect + 1) == FR_OK)
 800934c:	1c69      	adds	r1, r5, #1
 800934e:	4620      	mov	r0, r4
 8009350:	f7ff feb8 	bl	80090c4 <move_window>
 8009354:	bb10      	cbnz	r0, 800939c <find_volume+0x220>
	rv = rv << 8 | ptr[0];
 8009356:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 800935a:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 800935e:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8009360:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009364:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8009368:	4293      	cmp	r3, r2
 800936a:	d117      	bne.n	800939c <find_volume+0x220>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800936c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8009370:	f7ff fd52 	bl	8008e18 <ld_dword>
 8009374:	4b2a      	ldr	r3, [pc, #168]	; (8009420 <find_volume+0x2a4>)
 8009376:	4298      	cmp	r0, r3
 8009378:	d110      	bne.n	800939c <find_volume+0x220>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800937a:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800937e:	f7ff fd4b 	bl	8008e18 <ld_dword>
 8009382:	4b28      	ldr	r3, [pc, #160]	; (8009424 <find_volume+0x2a8>)
 8009384:	4298      	cmp	r0, r3
 8009386:	d109      	bne.n	800939c <find_volume+0x220>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009388:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800938c:	f7ff fd44 	bl	8008e18 <ld_dword>
 8009390:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009392:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8009396:	f7ff fd3f 	bl	8008e18 <ld_dword>
 800939a:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 800939c:	4a22      	ldr	r2, [pc, #136]	; (8009428 <find_volume+0x2ac>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800939e:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80093a0:	8813      	ldrh	r3, [r2, #0]
 80093a2:	3301      	adds	r3, #1
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	8013      	strh	r3, [r2, #0]
 80093a8:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80093aa:	4b20      	ldr	r3, [pc, #128]	; (800942c <find_volume+0x2b0>)
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	4294      	cmp	r4, r2
 80093b0:	bf04      	itt	eq
 80093b2:	2200      	moveq	r2, #0
 80093b4:	601a      	streq	r2, [r3, #0]
 80093b6:	691a      	ldr	r2, [r3, #16]
 80093b8:	4294      	cmp	r4, r2
 80093ba:	f04f 0000 	mov.w	r0, #0
 80093be:	f47f af00 	bne.w	80091c2 <find_volume+0x46>
 80093c2:	6118      	str	r0, [r3, #16]
 80093c4:	e6fd      	b.n	80091c2 <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80093c6:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80093c8:	3601      	adds	r6, #1
 80093ca:	2e04      	cmp	r6, #4
 80093cc:	f47f af20 	bne.w	8009210 <find_volume+0x94>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80093d0:	2804      	cmp	r0, #4
 80093d2:	d105      	bne.n	80093e0 <find_volume+0x264>
 80093d4:	2001      	movs	r0, #1
 80093d6:	e6f4      	b.n	80091c2 <find_volume+0x46>
 80093d8:	2804      	cmp	r0, #4
 80093da:	d0fb      	beq.n	80093d4 <find_volume+0x258>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80093dc:	2801      	cmp	r0, #1
 80093de:	d901      	bls.n	80093e4 <find_volume+0x268>
 80093e0:	200d      	movs	r0, #13
 80093e2:	e6ee      	b.n	80091c2 <find_volume+0x46>
	bsect = 0;
 80093e4:	2500      	movs	r5, #0
 80093e6:	e71f      	b.n	8009228 <find_volume+0xac>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80093e8:	f1b8 0f00 	cmp.w	r8, #0
 80093ec:	d0f8      	beq.n	80093e0 <find_volume+0x264>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80093ee:	2f02      	cmp	r7, #2
 80093f0:	ea4f 0041 	mov.w	r0, r1, lsl #1
 80093f4:	bf18      	it	ne
 80093f6:	1840      	addne	r0, r0, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80093f8:	4463      	add	r3, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80093fa:	bf18      	it	ne
 80093fc:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009400:	62a3      	str	r3, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009402:	bf0c      	ite	eq
 8009404:	4601      	moveq	r1, r0
 8009406:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 800940a:	e789      	b.n	8009320 <find_volume+0x1a4>
	if (vol < 0) return FR_INVALID_DRIVE;
 800940c:	200b      	movs	r0, #11
 800940e:	e6d8      	b.n	80091c2 <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009410:	200c      	movs	r0, #12
 8009412:	e6d6      	b.n	80091c2 <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8009414:	4628      	mov	r0, r5
 8009416:	e6d4      	b.n	80091c2 <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009418:	2003      	movs	r0, #3
 800941a:	e6d2      	b.n	80091c2 <find_volume+0x46>
 800941c:	200001c4 	.word	0x200001c4
 8009420:	41615252 	.word	0x41615252
 8009424:	61417272 	.word	0x61417272
 8009428:	200001e8 	.word	0x200001e8
 800942c:	200001c8 	.word	0x200001c8

08009430 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009430:	2901      	cmp	r1, #1
{
 8009432:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009436:	4605      	mov	r5, r0
 8009438:	460c      	mov	r4, r1
 800943a:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800943c:	d972      	bls.n	8009524 <put_fat+0xf4>
 800943e:	6983      	ldr	r3, [r0, #24]
 8009440:	428b      	cmp	r3, r1
 8009442:	d96f      	bls.n	8009524 <put_fat+0xf4>
		switch (fs->fs_type) {
 8009444:	7803      	ldrb	r3, [r0, #0]
 8009446:	2b02      	cmp	r3, #2
 8009448:	d03f      	beq.n	80094ca <put_fat+0x9a>
 800944a:	2b03      	cmp	r3, #3
 800944c:	d050      	beq.n	80094f0 <put_fat+0xc0>
 800944e:	2b01      	cmp	r3, #1
 8009450:	d168      	bne.n	8009524 <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;
 8009452:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009456:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8009458:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800945c:	f7ff fe32 	bl	80090c4 <move_window>
 8009460:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 8009462:	bb38      	cbnz	r0, 80094b4 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 8009464:	f105 0934 	add.w	r9, r5, #52	; 0x34
 8009468:	f108 0a01 	add.w	sl, r8, #1
 800946c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009470:	f014 0401 	ands.w	r4, r4, #1
 8009474:	bf1f      	itttt	ne
 8009476:	f819 3008 	ldrbne.w	r3, [r9, r8]
 800947a:	f003 020f 	andne.w	r2, r3, #15
 800947e:	013b      	lslne	r3, r7, #4
 8009480:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8009484:	bf14      	ite	ne
 8009486:	4313      	orrne	r3, r2
 8009488:	b2fb      	uxtbeq	r3, r7
 800948a:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800948e:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 8009490:	2301      	movs	r3, #1
 8009492:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009494:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8009498:	4628      	mov	r0, r5
 800949a:	f7ff fe13 	bl	80090c4 <move_window>
			if (res != FR_OK) break;
 800949e:	4606      	mov	r6, r0
 80094a0:	b940      	cbnz	r0, 80094b4 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 80094a2:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80094a6:	b144      	cbz	r4, 80094ba <put_fat+0x8a>
 80094a8:	f3c7 1707 	ubfx	r7, r7, #4, #8
 80094ac:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 80094b0:	2301      	movs	r3, #1
 80094b2:	70eb      	strb	r3, [r5, #3]
}
 80094b4:	4630      	mov	r0, r6
 80094b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80094ba:	f819 300a 	ldrb.w	r3, [r9, sl]
 80094be:	f3c7 2703 	ubfx	r7, r7, #8, #4
 80094c2:	f023 030f 	bic.w	r3, r3, #15
 80094c6:	431f      	orrs	r7, r3
 80094c8:	e7f0      	b.n	80094ac <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80094ca:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80094cc:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80094d0:	f7ff fdf8 	bl	80090c4 <move_window>
			if (res != FR_OK) break;
 80094d4:	4606      	mov	r6, r0
 80094d6:	2800      	cmp	r0, #0
 80094d8:	d1ec      	bne.n	80094b4 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80094da:	0064      	lsls	r4, r4, #1
 80094dc:	f105 0334 	add.w	r3, r5, #52	; 0x34
 80094e0:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80094e4:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80094e6:	551f      	strb	r7, [r3, r4]
 80094e8:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 80094ec:	7057      	strb	r7, [r2, #1]
 80094ee:	e7df      	b.n	80094b0 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80094f0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80094f2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80094f6:	f7ff fde5 	bl	80090c4 <move_window>
			if (res != FR_OK) break;
 80094fa:	4606      	mov	r6, r0
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d1d9      	bne.n	80094b4 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009500:	00a4      	lsls	r4, r4, #2
 8009502:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8009506:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800950a:	441c      	add	r4, r3
 800950c:	4620      	mov	r0, r4
 800950e:	f7ff fc83 	bl	8008e18 <ld_dword>
 8009512:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8009516:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800951a:	4339      	orrs	r1, r7
 800951c:	4620      	mov	r0, r4
 800951e:	f7ff fc83 	bl	8008e28 <st_dword>
 8009522:	e7c5      	b.n	80094b0 <put_fat+0x80>
	FRESULT res = FR_INT_ERR;
 8009524:	2602      	movs	r6, #2
 8009526:	e7c5      	b.n	80094b4 <put_fat+0x84>

08009528 <get_fat.isra.7>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009528:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800952a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952c:	4605      	mov	r5, r0
 800952e:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009530:	d952      	bls.n	80095d8 <get_fat.isra.7+0xb0>
 8009532:	6983      	ldr	r3, [r0, #24]
 8009534:	4299      	cmp	r1, r3
 8009536:	d24f      	bcs.n	80095d8 <get_fat.isra.7+0xb0>
		switch (fs->fs_type) {
 8009538:	7803      	ldrb	r3, [r0, #0]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d029      	beq.n	8009592 <get_fat.isra.7+0x6a>
 800953e:	2b03      	cmp	r3, #3
 8009540:	d038      	beq.n	80095b4 <get_fat.isra.7+0x8c>
 8009542:	2b01      	cmp	r3, #1
 8009544:	d148      	bne.n	80095d8 <get_fat.isra.7+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 8009546:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800954a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800954c:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8009550:	f7ff fdb8 	bl	80090c4 <move_window>
 8009554:	b110      	cbz	r0, 800955c <get_fat.isra.7+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009556:	f04f 30ff 	mov.w	r0, #4294967295
}
 800955a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800955c:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800955e:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 8009560:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8009564:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009566:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800956a:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800956c:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009570:	f7ff fda8 	bl	80090c4 <move_window>
 8009574:	2800      	cmp	r0, #0
 8009576:	d1ee      	bne.n	8009556 <get_fat.isra.7+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009578:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800957c:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800957e:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8009580:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8009584:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009588:	bf4c      	ite	mi
 800958a:	0900      	lsrmi	r0, r0, #4
 800958c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8009590:	e7e3      	b.n	800955a <get_fat.isra.7+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009592:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8009594:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8009598:	f7ff fd94 	bl	80090c4 <move_window>
 800959c:	2800      	cmp	r0, #0
 800959e:	d1da      	bne.n	8009556 <get_fat.isra.7+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80095a0:	0064      	lsls	r4, r4, #1
 80095a2:	3534      	adds	r5, #52	; 0x34
 80095a4:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80095a8:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 80095aa:	5d28      	ldrb	r0, [r5, r4]
 80095ac:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80095ae:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80095b2:	e7d2      	b.n	800955a <get_fat.isra.7+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80095b4:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80095b6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80095ba:	f7ff fd83 	bl	80090c4 <move_window>
 80095be:	2800      	cmp	r0, #0
 80095c0:	d1c9      	bne.n	8009556 <get_fat.isra.7+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80095c2:	00a4      	lsls	r4, r4, #2
 80095c4:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80095c8:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80095cc:	4420      	add	r0, r4
 80095ce:	f7ff fc23 	bl	8008e18 <ld_dword>
 80095d2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80095d6:	e7c0      	b.n	800955a <get_fat.isra.7+0x32>
			val = 1;	/* Internal error */
 80095d8:	2001      	movs	r0, #1
 80095da:	e7be      	b.n	800955a <get_fat.isra.7+0x32>

080095dc <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80095dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	4606      	mov	r6, r0
 80095e4:	460d      	mov	r5, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80095e6:	d301      	bcc.n	80095ec <dir_sdi+0x10>
		return FR_INT_ERR;
 80095e8:	2002      	movs	r0, #2
}
 80095ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80095ec:	06ca      	lsls	r2, r1, #27
 80095ee:	d1fb      	bne.n	80095e8 <dir_sdi+0xc>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80095f0:	6882      	ldr	r2, [r0, #8]
	FATFS *fs = dp->obj.fs;
 80095f2:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 80095f4:	6171      	str	r1, [r6, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80095f6:	b9c2      	cbnz	r2, 800962a <dir_sdi+0x4e>
 80095f8:	7823      	ldrb	r3, [r4, #0]
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d901      	bls.n	8009602 <dir_sdi+0x26>
		clst = fs->dirbase;
 80095fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009600:	b9a3      	cbnz	r3, 800962c <dir_sdi+0x50>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009602:	8923      	ldrh	r3, [r4, #8]
 8009604:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8009608:	d9ee      	bls.n	80095e8 <dir_sdi+0xc>
		dp->sect = fs->dirbase;
 800960a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800960c:	61f3      	str	r3, [r6, #28]
	if (!dp->sect) return FR_INT_ERR;
 800960e:	69f3      	ldr	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8009610:	61b2      	str	r2, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009612:	2b00      	cmp	r3, #0
 8009614:	d0e8      	beq.n	80095e8 <dir_sdi+0xc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009616:	eb03 2355 	add.w	r3, r3, r5, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800961a:	3434      	adds	r4, #52	; 0x34
 800961c:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8009620:	442c      	add	r4, r5
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009622:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009624:	6234      	str	r4, [r6, #32]
	return FR_OK;
 8009626:	2000      	movs	r0, #0
 8009628:	e7df      	b.n	80095ea <dir_sdi+0xe>
 800962a:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800962c:	8967      	ldrh	r7, [r4, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800962e:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009630:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8009632:	42bd      	cmp	r5, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009634:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 8009636:	d204      	bcs.n	8009642 <dir_sdi+0x66>
		dp->sect = clust2sect(fs, clst);
 8009638:	4620      	mov	r0, r4
 800963a:	f7ff fc99 	bl	8008f70 <clust2sect>
 800963e:	61f0      	str	r0, [r6, #28]
 8009640:	e7e5      	b.n	800960e <dir_sdi+0x32>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009642:	6830      	ldr	r0, [r6, #0]
 8009644:	f7ff ff70 	bl	8009528 <get_fat.isra.7>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009648:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800964a:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800964c:	d006      	beq.n	800965c <dir_sdi+0x80>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800964e:	2801      	cmp	r0, #1
 8009650:	d9ca      	bls.n	80095e8 <dir_sdi+0xc>
 8009652:	69a3      	ldr	r3, [r4, #24]
 8009654:	4283      	cmp	r3, r0
 8009656:	d9c7      	bls.n	80095e8 <dir_sdi+0xc>
			ofs -= csz;
 8009658:	1bed      	subs	r5, r5, r7
 800965a:	e7ea      	b.n	8009632 <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800965c:	2001      	movs	r0, #1
 800965e:	e7c4      	b.n	80095ea <dir_sdi+0xe>

08009660 <create_chain>:
{
 8009660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009664:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 8009666:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8009668:	460f      	mov	r7, r1
 800966a:	b971      	cbnz	r1, 800968a <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800966c:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800966e:	b1f6      	cbz	r6, 80096ae <create_chain+0x4e>
 8009670:	69ab      	ldr	r3, [r5, #24]
 8009672:	42b3      	cmp	r3, r6
 8009674:	bf98      	it	ls
 8009676:	2601      	movls	r6, #1
 8009678:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800967a:	69ab      	ldr	r3, [r5, #24]
			ncl++;							/* Next cluster */
 800967c:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800967e:	42a3      	cmp	r3, r4
 8009680:	d818      	bhi.n	80096b4 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8009682:	2e01      	cmp	r6, #1
 8009684:	d815      	bhi.n	80096b2 <create_chain+0x52>
 8009686:	2400      	movs	r4, #0
 8009688:	e009      	b.n	800969e <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800968a:	4628      	mov	r0, r5
 800968c:	f7ff ff4c 	bl	8009528 <get_fat.isra.7>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009690:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009692:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009694:	d937      	bls.n	8009706 <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009696:	1c43      	adds	r3, r0, #1
 8009698:	d104      	bne.n	80096a4 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800969a:	f04f 34ff 	mov.w	r4, #4294967295
}
 800969e:	4620      	mov	r0, r4
 80096a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80096a4:	69ab      	ldr	r3, [r5, #24]
 80096a6:	4283      	cmp	r3, r0
 80096a8:	d8f9      	bhi.n	800969e <create_chain+0x3e>
 80096aa:	463e      	mov	r6, r7
 80096ac:	e7e4      	b.n	8009678 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80096ae:	2601      	movs	r6, #1
 80096b0:	e7e2      	b.n	8009678 <create_chain+0x18>
				ncl = 2;
 80096b2:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80096b4:	4621      	mov	r1, r4
 80096b6:	f8d8 0000 	ldr.w	r0, [r8]
 80096ba:	f7ff ff35 	bl	8009528 <get_fat.isra.7>
			if (cs == 0) break;				/* Found a free cluster */
 80096be:	b130      	cbz	r0, 80096ce <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80096c0:	2801      	cmp	r0, #1
 80096c2:	d020      	beq.n	8009706 <create_chain+0xa6>
 80096c4:	3001      	adds	r0, #1
 80096c6:	d0e8      	beq.n	800969a <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 80096c8:	42b4      	cmp	r4, r6
 80096ca:	d1d6      	bne.n	800967a <create_chain+0x1a>
 80096cc:	e7db      	b.n	8009686 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80096ce:	f04f 32ff 	mov.w	r2, #4294967295
 80096d2:	4621      	mov	r1, r4
 80096d4:	4628      	mov	r0, r5
 80096d6:	f7ff feab 	bl	8009430 <put_fat>
		if (res == FR_OK && clst != 0) {
 80096da:	b990      	cbnz	r0, 8009702 <create_chain+0xa2>
 80096dc:	b957      	cbnz	r7, 80096f4 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80096de:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 80096e2:	3a02      	subs	r2, #2
 80096e4:	4293      	cmp	r3, r2
		fs->last_clst = ncl;
 80096e6:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80096e8:	d90f      	bls.n	800970a <create_chain+0xaa>
		fs->fsi_flag |= 1;
 80096ea:	792b      	ldrb	r3, [r5, #4]
 80096ec:	f043 0301 	orr.w	r3, r3, #1
 80096f0:	712b      	strb	r3, [r5, #4]
 80096f2:	e7d4      	b.n	800969e <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80096f4:	4622      	mov	r2, r4
 80096f6:	4639      	mov	r1, r7
 80096f8:	4628      	mov	r0, r5
 80096fa:	f7ff fe99 	bl	8009430 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80096fe:	2800      	cmp	r0, #0
 8009700:	d0ed      	beq.n	80096de <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009702:	2801      	cmp	r0, #1
 8009704:	d0c9      	beq.n	800969a <create_chain+0x3a>
 8009706:	2401      	movs	r4, #1
 8009708:	e7c9      	b.n	800969e <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800970a:	3b01      	subs	r3, #1
 800970c:	616b      	str	r3, [r5, #20]
 800970e:	e7ec      	b.n	80096ea <create_chain+0x8a>

08009710 <remove_chain>:
{
 8009710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009712:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009714:	2d01      	cmp	r5, #1
{
 8009716:	4607      	mov	r7, r0
 8009718:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800971a:	d92c      	bls.n	8009776 <remove_chain+0x66>
	FATFS *fs = obj->fs;
 800971c:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800971e:	69a3      	ldr	r3, [r4, #24]
 8009720:	42ab      	cmp	r3, r5
 8009722:	d928      	bls.n	8009776 <remove_chain+0x66>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009724:	b12a      	cbz	r2, 8009732 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009726:	f04f 32ff 	mov.w	r2, #4294967295
 800972a:	4620      	mov	r0, r4
 800972c:	f7ff fe80 	bl	8009430 <put_fat>
		if (res != FR_OK) return res;
 8009730:	b930      	cbnz	r0, 8009740 <remove_chain+0x30>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009732:	4629      	mov	r1, r5
 8009734:	6838      	ldr	r0, [r7, #0]
 8009736:	f7ff fef7 	bl	8009528 <get_fat.isra.7>
		if (nxt == 0) break;				/* Empty cluster? */
 800973a:	4606      	mov	r6, r0
 800973c:	b908      	cbnz	r0, 8009742 <remove_chain+0x32>
	return FR_OK;
 800973e:	2000      	movs	r0, #0
}
 8009740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009742:	2801      	cmp	r0, #1
 8009744:	d017      	beq.n	8009776 <remove_chain+0x66>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009746:	1c43      	adds	r3, r0, #1
 8009748:	d017      	beq.n	800977a <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800974a:	2200      	movs	r2, #0
 800974c:	4629      	mov	r1, r5
 800974e:	4620      	mov	r0, r4
 8009750:	f7ff fe6e 	bl	8009430 <put_fat>
			if (res != FR_OK) return res;
 8009754:	2800      	cmp	r0, #0
 8009756:	d1f3      	bne.n	8009740 <remove_chain+0x30>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009758:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800975c:	1e91      	subs	r1, r2, #2
 800975e:	428b      	cmp	r3, r1
 8009760:	d205      	bcs.n	800976e <remove_chain+0x5e>
			fs->free_clst++;
 8009762:	3301      	adds	r3, #1
 8009764:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 8009766:	7923      	ldrb	r3, [r4, #4]
 8009768:	f043 0301 	orr.w	r3, r3, #1
 800976c:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800976e:	42b2      	cmp	r2, r6
 8009770:	4635      	mov	r5, r6
 8009772:	d8de      	bhi.n	8009732 <remove_chain+0x22>
 8009774:	e7e3      	b.n	800973e <remove_chain+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009776:	2002      	movs	r0, #2
 8009778:	e7e2      	b.n	8009740 <remove_chain+0x30>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800977a:	2001      	movs	r0, #1
 800977c:	e7e0      	b.n	8009740 <remove_chain+0x30>

0800977e <get_fileinfo>:
{
 800977e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	fno->fname[0] = 0;		/* Invaidate file info */
 8009782:	2500      	movs	r5, #0
	FATFS *fs = dp->obj.fs;
 8009784:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 8009788:	758d      	strb	r5, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800978a:	69c3      	ldr	r3, [r0, #28]
{
 800978c:	4606      	mov	r6, r0
 800978e:	460c      	mov	r4, r1
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009790:	2b00      	cmp	r3, #0
 8009792:	d057      	beq.n	8009844 <get_fileinfo+0xc6>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8009794:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009796:	3301      	adds	r3, #1
 8009798:	d00a      	beq.n	80097b0 <get_fileinfo+0x32>
 800979a:	f101 0716 	add.w	r7, r1, #22
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800979e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097a2:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d14e      	bne.n	8009848 <get_fileinfo+0xca>
			fno->fname[i] = 0;	/* Terminate the LFN */
 80097aa:	4425      	add	r5, r4
 80097ac:	2300      	movs	r3, #0
 80097ae:	75ab      	strb	r3, [r5, #22]
		c = (TCHAR)dp->dir[i++];
 80097b0:	6a31      	ldr	r1, [r6, #32]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80097b2:	7da0      	ldrb	r0, [r4, #22]
 80097b4:	f101 0e0b 	add.w	lr, r1, #11
		c = (TCHAR)dp->dir[i++];
 80097b8:	460d      	mov	r5, r1
	i = j = 0;
 80097ba:	2300      	movs	r3, #0
			fno->altname[j++] = '.';
 80097bc:	262e      	movs	r6, #46	; 0x2e
		c = (TCHAR)dp->dir[i++];
 80097be:	f815 2b01 	ldrb.w	r2, [r5], #1
		if (c == ' ') continue;				/* Skip padding spaces */
 80097c2:	2a20      	cmp	r2, #32
 80097c4:	d024      	beq.n	8009810 <get_fileinfo+0x92>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80097c6:	2a05      	cmp	r2, #5
 80097c8:	eba5 0c01 	sub.w	ip, r5, r1
 80097cc:	bf08      	it	eq
 80097ce:	22e5      	moveq	r2, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 80097d0:	f1bc 0f09 	cmp.w	ip, #9
 80097d4:	d104      	bne.n	80097e0 <get_fileinfo+0x62>
 80097d6:	18e7      	adds	r7, r4, r3
			if (!lfv) fno->fname[j] = '.';
 80097d8:	b900      	cbnz	r0, 80097dc <get_fileinfo+0x5e>
 80097da:	75be      	strb	r6, [r7, #22]
			fno->altname[j++] = '.';
 80097dc:	727e      	strb	r6, [r7, #9]
 80097de:	3301      	adds	r3, #1
		fno->altname[j] = c;
 80097e0:	18e7      	adds	r7, r4, r3
 80097e2:	727a      	strb	r2, [r7, #9]
		if (!lfv) {
 80097e4:	b998      	cbnz	r0, 800980e <get_fileinfo+0x90>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80097e6:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
 80097ea:	f1b8 0f19 	cmp.w	r8, #25
 80097ee:	d80d      	bhi.n	800980c <get_fileinfo+0x8e>
 80097f0:	f1bc 0f09 	cmp.w	ip, #9
 80097f4:	f891 800c 	ldrb.w	r8, [r1, #12]
 80097f8:	bf34      	ite	cc
 80097fa:	f04f 0c08 	movcc.w	ip, #8
 80097fe:	f04f 0c10 	movcs.w	ip, #16
 8009802:	ea18 0f0c 	tst.w	r8, ip
				c += 0x20;			/* To lower */
 8009806:	bf1c      	itt	ne
 8009808:	3220      	addne	r2, #32
 800980a:	b2d2      	uxtbne	r2, r2
			fno->fname[j] = c;
 800980c:	75ba      	strb	r2, [r7, #22]
		j++;
 800980e:	3301      	adds	r3, #1
	while (i < 11) {		/* Copy name body and extension */
 8009810:	4575      	cmp	r5, lr
 8009812:	d1d4      	bne.n	80097be <get_fileinfo+0x40>
	if (!lfv) {
 8009814:	b928      	cbnz	r0, 8009822 <get_fileinfo+0xa4>
		fno->fname[j] = 0;
 8009816:	18e2      	adds	r2, r4, r3
 8009818:	7590      	strb	r0, [r2, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800981a:	7b0a      	ldrb	r2, [r1, #12]
 800981c:	2a00      	cmp	r2, #0
 800981e:	bf08      	it	eq
 8009820:	2300      	moveq	r3, #0
	fno->altname[j] = 0;	/* Terminate the SFN */
 8009822:	4423      	add	r3, r4
 8009824:	2200      	movs	r2, #0
 8009826:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009828:	7acb      	ldrb	r3, [r1, #11]
 800982a:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800982c:	f101 001c 	add.w	r0, r1, #28
 8009830:	f7ff faf2 	bl	8008e18 <ld_dword>
 8009834:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009836:	f101 0016 	add.w	r0, r1, #22
 800983a:	f7ff faed 	bl	8008e18 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800983e:	80e0      	strh	r0, [r4, #6]
 8009840:	0c00      	lsrs	r0, r0, #16
 8009842:	80a0      	strh	r0, [r4, #4]
}
 8009844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8009848:	2100      	movs	r1, #0
 800984a:	f000 ff53 	bl	800a6f4 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800984e:	b130      	cbz	r0, 800985e <get_fileinfo+0xe0>
 8009850:	3501      	adds	r5, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8009852:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8009856:	d002      	beq.n	800985e <get_fileinfo+0xe0>
				fno->fname[i++] = (TCHAR)w;
 8009858:	f807 0b01 	strb.w	r0, [r7], #1
 800985c:	e79f      	b.n	800979e <get_fileinfo+0x20>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800985e:	2500      	movs	r5, #0
 8009860:	e7a3      	b.n	80097aa <get_fileinfo+0x2c>

08009862 <sync_fs>:
{
 8009862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009864:	4604      	mov	r4, r0
	res = sync_window(fs);
 8009866:	f7ff fc27 	bl	80090b8 <sync_window>
 800986a:	4605      	mov	r5, r0
	if (res == FR_OK) {
 800986c:	2800      	cmp	r0, #0
 800986e:	d142      	bne.n	80098f6 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009870:	7823      	ldrb	r3, [r4, #0]
 8009872:	2b03      	cmp	r3, #3
 8009874:	d137      	bne.n	80098e6 <sync_fs+0x84>
 8009876:	7927      	ldrb	r7, [r4, #4]
 8009878:	2f01      	cmp	r7, #1
 800987a:	d134      	bne.n	80098e6 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 800987c:	f104 0634 	add.w	r6, r4, #52	; 0x34
 8009880:	4601      	mov	r1, r0
 8009882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009886:	4630      	mov	r0, r6
 8009888:	f7ff fad6 	bl	8008e38 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 800988c:	2355      	movs	r3, #85	; 0x55
 800988e:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 8009892:	23aa      	movs	r3, #170	; 0xaa
 8009894:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 8009898:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 800989a:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 800989c:	2172      	movs	r1, #114	; 0x72
 800989e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 80098a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 80098a6:	2361      	movs	r3, #97	; 0x61
 80098a8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 80098ac:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 80098b0:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val;
 80098b4:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 80098b8:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 80098bc:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80098c0:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80098c4:	6961      	ldr	r1, [r4, #20]
 80098c6:	f7ff faaf 	bl	8008e28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80098ca:	6921      	ldr	r1, [r4, #16]
 80098cc:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80098d0:	f7ff faaa 	bl	8008e28 <st_dword>
			fs->winsect = fs->volbase + 1;
 80098d4:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80098d6:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 80098d8:	3201      	adds	r2, #1
 80098da:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80098dc:	463b      	mov	r3, r7
 80098de:	4631      	mov	r1, r6
 80098e0:	f7ff fa7e 	bl	8008de0 <disk_write>
			fs->fsi_flag = 0;
 80098e4:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80098e6:	2200      	movs	r2, #0
 80098e8:	4611      	mov	r1, r2
 80098ea:	7860      	ldrb	r0, [r4, #1]
 80098ec:	f7ff fa86 	bl	8008dfc <disk_ioctl>
 80098f0:	3000      	adds	r0, #0
 80098f2:	bf18      	it	ne
 80098f4:	2001      	movne	r0, #1
}
 80098f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080098f8 <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80098f8:	69c3      	ldr	r3, [r0, #28]
{
 80098fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098fe:	4605      	mov	r5, r0
 8009900:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009902:	b1ab      	cbz	r3, 8009930 <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009904:	6942      	ldr	r2, [r0, #20]
 8009906:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800990a:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 800990e:	d20f      	bcs.n	8009930 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009910:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8009914:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009916:	f1b9 0f00 	cmp.w	r9, #0
 800991a:	d14d      	bne.n	80099b8 <dir_next+0xc0>
		if (!dp->clust) {		/* Static table */
 800991c:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800991e:	3301      	adds	r3, #1
 8009920:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8009922:	b939      	cbnz	r1, 8009934 <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009924:	8923      	ldrh	r3, [r4, #8]
 8009926:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 800992a:	d845      	bhi.n	80099b8 <dir_next+0xc0>
				dp->sect = 0; return FR_NO_FILE;
 800992c:	2300      	movs	r3, #0
 800992e:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009930:	2004      	movs	r0, #4
 8009932:	e00b      	b.n	800994c <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009934:	8963      	ldrh	r3, [r4, #10]
 8009936:	3b01      	subs	r3, #1
 8009938:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 800993c:	d13c      	bne.n	80099b8 <dir_next+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800993e:	4620      	mov	r0, r4
 8009940:	f7ff fdf2 	bl	8009528 <get_fat.isra.7>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009944:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009946:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009948:	d802      	bhi.n	8009950 <dir_next+0x58>
 800994a:	2002      	movs	r0, #2
}
 800994c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009950:	1c42      	adds	r2, r0, #1
 8009952:	d101      	bne.n	8009958 <dir_next+0x60>
 8009954:	2001      	movs	r0, #1
 8009956:	e7f9      	b.n	800994c <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009958:	69a3      	ldr	r3, [r4, #24]
 800995a:	4283      	cmp	r3, r0
 800995c:	d826      	bhi.n	80099ac <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 800995e:	2f00      	cmp	r7, #0
 8009960:	d0e4      	beq.n	800992c <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009962:	69a9      	ldr	r1, [r5, #24]
 8009964:	4628      	mov	r0, r5
 8009966:	f7ff fe7b 	bl	8009660 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800996a:	4606      	mov	r6, r0
 800996c:	2800      	cmp	r0, #0
 800996e:	d036      	beq.n	80099de <dir_next+0xe6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009970:	2801      	cmp	r0, #1
 8009972:	d0ea      	beq.n	800994a <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	d0ed      	beq.n	8009954 <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009978:	4620      	mov	r0, r4
 800997a:	f7ff fb9d 	bl	80090b8 <sync_window>
 800997e:	4607      	mov	r7, r0
 8009980:	2800      	cmp	r0, #0
 8009982:	d1e7      	bne.n	8009954 <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009984:	4601      	mov	r1, r0
 8009986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800998a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800998e:	f7ff fa53 	bl	8008e38 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009992:	4631      	mov	r1, r6
 8009994:	4620      	mov	r0, r4
 8009996:	f7ff faeb 	bl	8008f70 <clust2sect>
						fs->wflag = 1;
 800999a:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800999e:	6320      	str	r0, [r4, #48]	; 0x30
 80099a0:	8963      	ldrh	r3, [r4, #10]
 80099a2:	429f      	cmp	r7, r3
 80099a4:	d30f      	bcc.n	80099c6 <dir_next+0xce>
					fs->winsect -= n;							/* Restore window offset */
 80099a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80099a8:	1bdf      	subs	r7, r3, r7
 80099aa:	6327      	str	r7, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 80099ac:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 80099ae:	4631      	mov	r1, r6
 80099b0:	4620      	mov	r0, r4
 80099b2:	f7ff fadd 	bl	8008f70 <clust2sect>
 80099b6:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80099b8:	3434      	adds	r4, #52	; 0x34
 80099ba:	444c      	add	r4, r9
	dp->dptr = ofs;						/* Current entry */
 80099bc:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80099c0:	622c      	str	r4, [r5, #32]
	return FR_OK;
 80099c2:	2000      	movs	r0, #0
 80099c4:	e7c2      	b.n	800994c <dir_next+0x54>
						fs->wflag = 1;
 80099c6:	f884 a003 	strb.w	sl, [r4, #3]
 80099ca:	4620      	mov	r0, r4
 80099cc:	f7ff fb51 	bl	8009072 <sync_window.part.3>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80099d0:	2800      	cmp	r0, #0
 80099d2:	d1bf      	bne.n	8009954 <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80099d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80099d6:	3301      	adds	r3, #1
 80099d8:	3701      	adds	r7, #1
 80099da:	6323      	str	r3, [r4, #48]	; 0x30
 80099dc:	e7e0      	b.n	80099a0 <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80099de:	2007      	movs	r0, #7
 80099e0:	e7b4      	b.n	800994c <dir_next+0x54>
	...

080099e4 <dir_find>:
{
 80099e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80099e8:	2100      	movs	r1, #0
{
 80099ea:	b085      	sub	sp, #20
 80099ec:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 80099ee:	f8d0 a000 	ldr.w	sl, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80099f2:	f7ff fdf3 	bl	80095dc <dir_sdi>
	if (res != FR_OK) return res;
 80099f6:	4680      	mov	r8, r0
 80099f8:	2800      	cmp	r0, #0
 80099fa:	f040 809c 	bne.w	8009b36 <dir_find+0x152>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80099fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009a02:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8009a06:	632b      	str	r3, [r5, #48]	; 0x30
 8009a08:	464e      	mov	r6, r9
		res = move_window(fs, dp->sect);
 8009a0a:	69e9      	ldr	r1, [r5, #28]
 8009a0c:	4650      	mov	r0, sl
 8009a0e:	f7ff fb59 	bl	80090c4 <move_window>
		if (res != FR_OK) break;
 8009a12:	4680      	mov	r8, r0
 8009a14:	2800      	cmp	r0, #0
 8009a16:	f040 808e 	bne.w	8009b36 <dir_find+0x152>
		c = dp->dir[DIR_Name];
 8009a1a:	6a2c      	ldr	r4, [r5, #32]
 8009a1c:	7827      	ldrb	r7, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009a1e:	2f00      	cmp	r7, #0
 8009a20:	f000 808d 	beq.w	8009b3e <dir_find+0x15a>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009a24:	7ae2      	ldrb	r2, [r4, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009a26:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009a28:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8009a2c:	71ab      	strb	r3, [r5, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009a2e:	d003      	beq.n	8009a38 <dir_find+0x54>
 8009a30:	0712      	lsls	r2, r2, #28
 8009a32:	d505      	bpl.n	8009a40 <dir_find+0x5c>
 8009a34:	2b0f      	cmp	r3, #15
 8009a36:	d005      	beq.n	8009a44 <dir_find+0x60>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009a38:	f04f 33ff 	mov.w	r3, #4294967295
 8009a3c:	632b      	str	r3, [r5, #48]	; 0x30
 8009a3e:	e058      	b.n	8009af2 <dir_find+0x10e>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009a40:	2b0f      	cmp	r3, #15
 8009a42:	d15d      	bne.n	8009b00 <dir_find+0x11c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009a44:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8009a48:	0658      	lsls	r0, r3, #25
 8009a4a:	d448      	bmi.n	8009ade <dir_find+0xfa>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009a4c:	0679      	lsls	r1, r7, #25
 8009a4e:	d54e      	bpl.n	8009aee <dir_find+0x10a>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009a50:	696b      	ldr	r3, [r5, #20]
						sum = dp->dir[LDIR_Chksum];
 8009a52:	f894 900d 	ldrb.w	r9, [r4, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009a56:	632b      	str	r3, [r5, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009a58:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009a5c:	7b63      	ldrb	r3, [r4, #13]
 8009a5e:	454b      	cmp	r3, r9
 8009a60:	d147      	bne.n	8009af2 <dir_find+0x10e>
	rv = rv << 8 | ptr[0];
 8009a62:	7ee3      	ldrb	r3, [r4, #27]
 8009a64:	7ea6      	ldrb	r6, [r4, #26]
 8009a66:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009a6a:	b236      	sxth	r6, r6
 8009a6c:	2e00      	cmp	r6, #0
 8009a6e:	d140      	bne.n	8009af2 <dir_find+0x10e>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009a70:	f894 8000 	ldrb.w	r8, [r4]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009a74:	f8da b00c 	ldr.w	fp, [sl, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009a78:	f008 083f 	and.w	r8, r8, #63	; 0x3f
 8009a7c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009a80:	f04f 080d 	mov.w	r8, #13
 8009a84:	fb08 f803 	mul.w	r8, r8, r3
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009a88:	2101      	movs	r1, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009a8a:	4b2e      	ldr	r3, [pc, #184]	; (8009b44 <dir_find+0x160>)
 8009a8c:	5cf2      	ldrb	r2, [r6, r3]
 8009a8e:	18a3      	adds	r3, r4, r2
	rv = rv << 8 | ptr[0];
 8009a90:	7858      	ldrb	r0, [r3, #1]
 8009a92:	5ca3      	ldrb	r3, [r4, r2]
 8009a94:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		if (wc) {
 8009a98:	b369      	cbz	r1, 8009af6 <dir_find+0x112>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009a9a:	f1b8 0ffe 	cmp.w	r8, #254	; 0xfe
 8009a9e:	d828      	bhi.n	8009af2 <dir_find+0x10e>
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	9303      	str	r3, [sp, #12]
 8009aa4:	f000 fe44 	bl	800a730 <ff_wtoupper>
 8009aa8:	f108 0201 	add.w	r2, r8, #1
 8009aac:	9002      	str	r0, [sp, #8]
 8009aae:	f83b 0018 	ldrh.w	r0, [fp, r8, lsl #1]
 8009ab2:	9201      	str	r2, [sp, #4]
 8009ab4:	f000 fe3c 	bl	800a730 <ff_wtoupper>
 8009ab8:	9902      	ldr	r1, [sp, #8]
 8009aba:	4281      	cmp	r1, r0
 8009abc:	d119      	bne.n	8009af2 <dir_find+0x10e>
	rv = rv << 8 | ptr[0];
 8009abe:	9b03      	ldr	r3, [sp, #12]
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009ac0:	9a01      	ldr	r2, [sp, #4]
	rv = rv << 8 | ptr[0];
 8009ac2:	4619      	mov	r1, r3
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009ac4:	4690      	mov	r8, r2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009ac6:	3601      	adds	r6, #1
 8009ac8:	2e0d      	cmp	r6, #13
 8009aca:	d1de      	bne.n	8009a8a <dir_find+0xa6>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009acc:	7823      	ldrb	r3, [r4, #0]
 8009ace:	065a      	lsls	r2, r3, #25
 8009ad0:	d503      	bpl.n	8009ada <dir_find+0xf6>
 8009ad2:	b111      	cbz	r1, 8009ada <dir_find+0xf6>
 8009ad4:	f83b 3018 	ldrh.w	r3, [fp, r8, lsl #1]
 8009ad8:	b95b      	cbnz	r3, 8009af2 <dir_find+0x10e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009ada:	3f01      	subs	r7, #1
 8009adc:	b2fe      	uxtb	r6, r7
		res = dir_next(dp, 0);	/* Next entry */
 8009ade:	2100      	movs	r1, #0
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	f7ff ff09 	bl	80098f8 <dir_next>
	} while (res == FR_OK);
 8009ae6:	4680      	mov	r8, r0
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	d08e      	beq.n	8009a0a <dir_find+0x26>
 8009aec:	e023      	b.n	8009b36 <dir_find+0x152>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009aee:	42be      	cmp	r6, r7
 8009af0:	d0b4      	beq.n	8009a5c <dir_find+0x78>
 8009af2:	26ff      	movs	r6, #255	; 0xff
 8009af4:	e7f3      	b.n	8009ade <dir_find+0xfa>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d0e3      	beq.n	8009ac6 <dir_find+0xe2>
 8009afe:	e7f8      	b.n	8009af2 <dir_find+0x10e>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009b00:	b926      	cbnz	r6, 8009b0c <dir_find+0x128>
 8009b02:	4620      	mov	r0, r4
 8009b04:	f7ff fa50 	bl	8008fa8 <sum_sfn>
 8009b08:	4548      	cmp	r0, r9
 8009b0a:	d014      	beq.n	8009b36 <dir_find+0x152>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009b0c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8009b10:	07db      	lsls	r3, r3, #31
 8009b12:	d491      	bmi.n	8009a38 <dir_find+0x54>
 8009b14:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8009b18:	f104 010b 	add.w	r1, r4, #11
		r = *d++ - *s++;
 8009b1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b20:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
 8009b24:	428c      	cmp	r4, r1
		r = *d++ - *s++;
 8009b26:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 8009b2a:	d002      	beq.n	8009b32 <dir_find+0x14e>
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d0f5      	beq.n	8009b1c <dir_find+0x138>
 8009b30:	e782      	b.n	8009a38 <dir_find+0x54>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d180      	bne.n	8009a38 <dir_find+0x54>
}
 8009b36:	4640      	mov	r0, r8
 8009b38:	b005      	add	sp, #20
 8009b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009b3e:	f04f 0804 	mov.w	r8, #4
 8009b42:	e7f8      	b.n	8009b36 <dir_find+0x152>
 8009b44:	0800ca7c 	.word	0x0800ca7c

08009b48 <dir_register>:
{
 8009b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009b4c:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
 8009b50:	f014 04a0 	ands.w	r4, r4, #160	; 0xa0
{
 8009b54:	b089      	sub	sp, #36	; 0x24
 8009b56:	4605      	mov	r5, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009b58:	f040 8084 	bne.w	8009c64 <dir_register+0x11c>
	FATFS *fs = dp->obj.fs;
 8009b5c:	6807      	ldr	r7, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d15d      	bne.n	8009c24 <dir_register+0xdc>
	mem_cpy(sn, dp->fn, 12);
 8009b68:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8009b6c:	220c      	movs	r2, #12
 8009b6e:	4631      	mov	r1, r6
 8009b70:	a805      	add	r0, sp, #20
 8009b72:	f7ff fa5b 	bl	800902c <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009b76:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8009b7a:	07db      	lsls	r3, r3, #31
 8009b7c:	d57b      	bpl.n	8009c76 <dir_register+0x12e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009b7e:	2340      	movs	r3, #64	; 0x40
				if (sr & 0x10000) sr ^= 0x11021;
 8009b80:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8009db0 <dir_register+0x268>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009b84:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009b88:	f04f 0901 	mov.w	r9, #1
 8009b8c:	220b      	movs	r2, #11
 8009b8e:	a905      	add	r1, sp, #20
 8009b90:	4630      	mov	r0, r6
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009b92:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8009b96:	f7ff fa49 	bl	800902c <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009b9a:	f1b9 0f05 	cmp.w	r9, #5
 8009b9e:	d952      	bls.n	8009c46 <dir_register+0xfe>
 8009ba0:	f1aa 0102 	sub.w	r1, sl, #2
 8009ba4:	464b      	mov	r3, r9
		while (*lfn) {	/* Create a CRC */
 8009ba6:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8009baa:	2a00      	cmp	r2, #0
 8009bac:	d13c      	bne.n	8009c28 <dir_register+0xe0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009bae:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 8009bb0:	f003 000f 	and.w	r0, r3, #15
 8009bb4:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 8009bb8:	2939      	cmp	r1, #57	; 0x39
 8009bba:	bf88      	it	hi
 8009bbc:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
 8009bc0:	3a01      	subs	r2, #1
 8009bc2:	a803      	add	r0, sp, #12
 8009bc4:	4410      	add	r0, r2
	} while (seq);
 8009bc6:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 8009bc8:	7041      	strb	r1, [r0, #1]
	} while (seq);
 8009bca:	d1f1      	bne.n	8009bb0 <dir_register+0x68>
	ns[i] = '~';
 8009bcc:	a908      	add	r1, sp, #32
 8009bce:	4411      	add	r1, r2
 8009bd0:	207e      	movs	r0, #126	; 0x7e
 8009bd2:	f801 0c14 	strb.w	r0, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d004      	beq.n	8009be4 <dir_register+0x9c>
 8009bda:	5cf1      	ldrb	r1, [r6, r3]
 8009bdc:	2920      	cmp	r1, #32
 8009bde:	f103 0001 	add.w	r0, r3, #1
 8009be2:	d132      	bne.n	8009c4a <dir_register+0x102>
 8009be4:	4433      	add	r3, r6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009be6:	2a07      	cmp	r2, #7
 8009be8:	bf9b      	ittet	ls
 8009bea:	a908      	addls	r1, sp, #32
 8009bec:	1889      	addls	r1, r1, r2
 8009bee:	2120      	movhi	r1, #32
 8009bf0:	f811 1c14 	ldrbls.w	r1, [r1, #-20]
 8009bf4:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
 8009bf8:	eba3 0106 	sub.w	r1, r3, r6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009bfc:	bf98      	it	ls
 8009bfe:	3201      	addls	r2, #1
	} while (j < 8);
 8009c00:	2907      	cmp	r1, #7
 8009c02:	d9f0      	bls.n	8009be6 <dir_register+0x9e>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009c04:	4628      	mov	r0, r5
 8009c06:	f7ff feed 	bl	80099e4 <dir_find>
 8009c0a:	4682      	mov	sl, r0
			if (res != FR_OK) break;
 8009c0c:	bb68      	cbnz	r0, 8009c6a <dir_register+0x122>
		for (n = 1; n < 100; n++) {
 8009c0e:	f109 0901 	add.w	r9, r9, #1
 8009c12:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8009c16:	d1b9      	bne.n	8009b8c <dir_register+0x44>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009c18:	f04f 0a07 	mov.w	sl, #7
}
 8009c1c:	4650      	mov	r0, sl
 8009c1e:	b009      	add	sp, #36	; 0x24
 8009c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009c24:	3401      	adds	r4, #1
 8009c26:	e79b      	b.n	8009b60 <dir_register+0x18>
		while (*lfn) {	/* Create a CRC */
 8009c28:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
 8009c2a:	f002 0c01 	and.w	ip, r2, #1
 8009c2e:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8009c32:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009c36:	bf18      	it	ne
 8009c38:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 8009c3c:	3801      	subs	r0, #1
				wc >>= 1;
 8009c3e:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 8009c42:	d1f2      	bne.n	8009c2a <dir_register+0xe2>
 8009c44:	e7af      	b.n	8009ba6 <dir_register+0x5e>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009c46:	464b      	mov	r3, r9
 8009c48:	e7b1      	b.n	8009bae <dir_register+0x66>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	e7c3      	b.n	8009bd6 <dir_register+0x8e>
				n = 0;					/* Not a blank entry. Restart to search */
 8009c4e:	4680      	mov	r8, r0
			res = dir_next(dp, 1);
 8009c50:	2101      	movs	r1, #1
 8009c52:	4628      	mov	r0, r5
 8009c54:	f7ff fe50 	bl	80098f8 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009c58:	4682      	mov	sl, r0
 8009c5a:	b310      	cbz	r0, 8009ca2 <dir_register+0x15a>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009c5c:	f1ba 0f04 	cmp.w	sl, #4
 8009c60:	d0da      	beq.n	8009c18 <dir_register+0xd0>
 8009c62:	e7db      	b.n	8009c1c <dir_register+0xd4>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009c64:	f04f 0a06 	mov.w	sl, #6
 8009c68:	e7d8      	b.n	8009c1c <dir_register+0xd4>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009c6a:	2804      	cmp	r0, #4
 8009c6c:	d1d6      	bne.n	8009c1c <dir_register+0xd4>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009c6e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8009c72:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009c76:	f89d 301f 	ldrb.w	r3, [sp, #31]
	FATFS *fs = dp->obj.fs;
 8009c7a:	f8d5 9000 	ldr.w	r9, [r5]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009c7e:	079b      	lsls	r3, r3, #30
 8009c80:	bf48      	it	mi
 8009c82:	340c      	addmi	r4, #12
	res = dir_sdi(dp, 0);
 8009c84:	f04f 0100 	mov.w	r1, #0
 8009c88:	4628      	mov	r0, r5
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009c8a:	bf49      	itett	mi
 8009c8c:	230d      	movmi	r3, #13
 8009c8e:	2401      	movpl	r4, #1
 8009c90:	fbb4 f4f3 	udivmi	r4, r4, r3
 8009c94:	3401      	addmi	r4, #1
	res = dir_sdi(dp, 0);
 8009c96:	f7ff fca1 	bl	80095dc <dir_sdi>
	if (res == FR_OK) {
 8009c9a:	4682      	mov	sl, r0
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	d1dd      	bne.n	8009c5c <dir_register+0x114>
		n = 0;
 8009ca0:	4680      	mov	r8, r0
			res = move_window(fs, dp->sect);
 8009ca2:	69e9      	ldr	r1, [r5, #28]
 8009ca4:	4648      	mov	r0, r9
 8009ca6:	f7ff fa0d 	bl	80090c4 <move_window>
			if (res != FR_OK) break;
 8009caa:	4682      	mov	sl, r0
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d1d5      	bne.n	8009c5c <dir_register+0x114>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009cb0:	6a2b      	ldr	r3, [r5, #32]
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	2be5      	cmp	r3, #229	; 0xe5
 8009cb6:	d001      	beq.n	8009cbc <dir_register+0x174>
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1c8      	bne.n	8009c4e <dir_register+0x106>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009cbc:	f108 0801 	add.w	r8, r8, #1
 8009cc0:	4544      	cmp	r4, r8
 8009cc2:	d1c5      	bne.n	8009c50 <dir_register+0x108>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009cc4:	3c01      	subs	r4, #1
 8009cc6:	d056      	beq.n	8009d76 <dir_register+0x22e>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009cc8:	6969      	ldr	r1, [r5, #20]
 8009cca:	4628      	mov	r0, r5
 8009ccc:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8009cd0:	f7ff fc84 	bl	80095dc <dir_sdi>
		if (res == FR_OK) {
 8009cd4:	4682      	mov	sl, r0
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	d1a0      	bne.n	8009c1c <dir_register+0xd4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009cda:	4630      	mov	r0, r6
 8009cdc:	f7ff f964 	bl	8008fa8 <sum_sfn>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009ce0:	f64f 79ff 	movw	r9, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009ce4:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
 8009ce6:	69e9      	ldr	r1, [r5, #28]
 8009ce8:	4638      	mov	r0, r7
 8009cea:	f7ff f9eb 	bl	80090c4 <move_window>
 8009cee:	4682      	mov	sl, r0
				if (res != FR_OK) break;
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d193      	bne.n	8009c1c <dir_register+0xd4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009cf4:	6a2b      	ldr	r3, [r5, #32]
 8009cf6:	f8d7 e00c 	ldr.w	lr, [r7, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009cfa:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009cfe:	220f      	movs	r2, #15
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009d00:	b2e1      	uxtb	r1, r4
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009d02:	f04f 0c0d 	mov.w	ip, #13
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009d06:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009d08:	1e4a      	subs	r2, r1, #1
 8009d0a:	fb0c f202 	mul.w	r2, ip, r2
	dir[LDIR_Type] = 0;
 8009d0e:	7318      	strb	r0, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d10:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 8009d12:	76d8      	strb	r0, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009d14:	9201      	str	r2, [sp, #4]
	s = wc = 0;
 8009d16:	4684      	mov	ip, r0
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009d18:	4548      	cmp	r0, r9
 8009d1a:	bf1f      	itttt	ne
 8009d1c:	9a01      	ldrne	r2, [sp, #4]
 8009d1e:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
 8009d22:	3201      	addne	r2, #1
 8009d24:	9201      	strne	r2, [sp, #4]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009d26:	4a21      	ldr	r2, [pc, #132]	; (8009dac <dir_register+0x264>)
 8009d28:	f81c a002 	ldrb.w	sl, [ip, r2]
	} while (++s < 13);
 8009d2c:	f10c 0c01 	add.w	ip, ip, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009d30:	eb03 0b0a 	add.w	fp, r3, sl
	*ptr++ = (BYTE)val; val >>= 8;
 8009d34:	f803 000a 	strb.w	r0, [r3, sl]
 8009d38:	ea4f 2a10 	mov.w	sl, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	bf08      	it	eq
 8009d40:	4648      	moveq	r0, r9
	} while (++s < 13);
 8009d42:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 8009d46:	f88b a001 	strb.w	sl, [fp, #1]
	} while (++s < 13);
 8009d4a:	d1e5      	bne.n	8009d18 <dir_register+0x1d0>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009d4c:	4548      	cmp	r0, r9
 8009d4e:	d003      	beq.n	8009d58 <dir_register+0x210>
 8009d50:	9a01      	ldr	r2, [sp, #4]
 8009d52:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8009d56:	b90a      	cbnz	r2, 8009d5c <dir_register+0x214>
 8009d58:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009d5c:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	70fb      	strb	r3, [r7, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009d62:	2100      	movs	r1, #0
 8009d64:	4628      	mov	r0, r5
 8009d66:	f7ff fdc7 	bl	80098f8 <dir_next>
			} while (res == FR_OK && --nent);
 8009d6a:	4682      	mov	sl, r0
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	f47f af55 	bne.w	8009c1c <dir_register+0xd4>
 8009d72:	3c01      	subs	r4, #1
 8009d74:	d1b7      	bne.n	8009ce6 <dir_register+0x19e>
		res = move_window(fs, dp->sect);
 8009d76:	69e9      	ldr	r1, [r5, #28]
 8009d78:	4638      	mov	r0, r7
 8009d7a:	f7ff f9a3 	bl	80090c4 <move_window>
		if (res == FR_OK) {
 8009d7e:	4682      	mov	sl, r0
 8009d80:	2800      	cmp	r0, #0
 8009d82:	f47f af4b 	bne.w	8009c1c <dir_register+0xd4>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009d86:	4601      	mov	r1, r0
 8009d88:	2220      	movs	r2, #32
 8009d8a:	6a28      	ldr	r0, [r5, #32]
 8009d8c:	f7ff f854 	bl	8008e38 <mem_set>
 8009d90:	220b      	movs	r2, #11
 8009d92:	4631      	mov	r1, r6
 8009d94:	6a28      	ldr	r0, [r5, #32]
 8009d96:	f7ff f949 	bl	800902c <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009d9a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8009d9e:	6a2a      	ldr	r2, [r5, #32]
 8009da0:	f003 0318 	and.w	r3, r3, #24
 8009da4:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8009da6:	2301      	movs	r3, #1
 8009da8:	70fb      	strb	r3, [r7, #3]
 8009daa:	e737      	b.n	8009c1c <dir_register+0xd4>
 8009dac:	0800ca7c 	.word	0x0800ca7c
 8009db0:	00011021 	.word	0x00011021

08009db4 <dir_read.constprop.10>:
FRESULT dir_read (
 8009db4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 8009db8:	25ff      	movs	r5, #255	; 0xff
	FATFS *fs = dp->obj.fs;
 8009dba:	6806      	ldr	r6, [r0, #0]
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009dbc:	4f46      	ldr	r7, [pc, #280]	; (8009ed8 <dir_read.constprop.10+0x124>)
FRESULT dir_read (
 8009dbe:	4681      	mov	r9, r0
	BYTE ord = 0xFF, sum = 0xFF;
 8009dc0:	462c      	mov	r4, r5
	FRESULT res = FR_NO_FILE;
 8009dc2:	f04f 0a04 	mov.w	sl, #4
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009dc6:	f64f 78ff 	movw	r8, #65535	; 0xffff
	while (dp->sect) {
 8009dca:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8009dce:	b919      	cbnz	r1, 8009dd8 <dir_read.constprop.10+0x24>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009dd0:	f1ba 0f00 	cmp.w	sl, #0
 8009dd4:	d072      	beq.n	8009ebc <dir_read.constprop.10+0x108>
 8009dd6:	e061      	b.n	8009e9c <dir_read.constprop.10+0xe8>
		res = move_window(fs, dp->sect);
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f7ff f973 	bl	80090c4 <move_window>
		if (res != FR_OK) break;
 8009dde:	4682      	mov	sl, r0
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d15b      	bne.n	8009e9c <dir_read.constprop.10+0xe8>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009de4:	f8d9 0020 	ldr.w	r0, [r9, #32]
 8009de8:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) {
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d070      	beq.n	8009ed0 <dir_read.constprop.10+0x11c>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009dee:	7ac2      	ldrb	r2, [r0, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8009df0:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009df2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8009df6:	f889 2006 	strb.w	r2, [r9, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8009dfa:	d055      	beq.n	8009ea8 <dir_read.constprop.10+0xf4>
 8009dfc:	2b2e      	cmp	r3, #46	; 0x2e
 8009dfe:	d053      	beq.n	8009ea8 <dir_read.constprop.10+0xf4>
 8009e00:	f022 0120 	bic.w	r1, r2, #32
 8009e04:	2908      	cmp	r1, #8
 8009e06:	d04f      	beq.n	8009ea8 <dir_read.constprop.10+0xf4>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8009e08:	2a0f      	cmp	r2, #15
 8009e0a:	d152      	bne.n	8009eb2 <dir_read.constprop.10+0xfe>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8009e0c:	065a      	lsls	r2, r3, #25
 8009e0e:	d549      	bpl.n	8009ea4 <dir_read.constprop.10+0xf0>
						c &= (BYTE)~LLEF; ord = c;
 8009e10:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8009e14:	f8d9 3014 	ldr.w	r3, [r9, #20]
						sum = dp->dir[LDIR_Chksum];
 8009e18:	7b45      	ldrb	r5, [r0, #13]
						dp->blk_ofs = dp->dptr;
 8009e1a:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009e1e:	7b43      	ldrb	r3, [r0, #13]
 8009e20:	42ab      	cmp	r3, r5
 8009e22:	d141      	bne.n	8009ea8 <dir_read.constprop.10+0xf4>
	rv = rv << 8 | ptr[0];
 8009e24:	7ec2      	ldrb	r2, [r0, #27]
 8009e26:	7e83      	ldrb	r3, [r0, #26]
 8009e28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8009e2c:	b21b      	sxth	r3, r3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d13a      	bne.n	8009ea8 <dir_read.constprop.10+0xf4>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8009e32:	7802      	ldrb	r2, [r0, #0]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009e34:	68f1      	ldr	r1, [r6, #12]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8009e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e3a:	3a01      	subs	r2, #1
 8009e3c:	f04f 0c0d 	mov.w	ip, #13
 8009e40:	fb0c fc02 	mul.w	ip, ip, r2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009e44:	f04f 0e01 	mov.w	lr, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009e48:	f813 a007 	ldrb.w	sl, [r3, r7]
 8009e4c:	eb00 020a 	add.w	r2, r0, sl
	rv = rv << 8 | ptr[0];
 8009e50:	f892 b001 	ldrb.w	fp, [r2, #1]
 8009e54:	f810 200a 	ldrb.w	r2, [r0, sl]
 8009e58:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
		if (wc) {
 8009e5c:	f1be 0f00 	cmp.w	lr, #0
 8009e60:	d024      	beq.n	8009eac <dir_read.constprop.10+0xf8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8009e62:	f1bc 0ffe 	cmp.w	ip, #254	; 0xfe
 8009e66:	d81f      	bhi.n	8009ea8 <dir_read.constprop.10+0xf4>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8009e68:	f821 201c 	strh.w	r2, [r1, ip, lsl #1]
	rv = rv << 8 | ptr[0];
 8009e6c:	4696      	mov	lr, r2
			lfnbuf[i++] = wc = uc;			/* Store it */
 8009e6e:	f10c 0c01 	add.w	ip, ip, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009e72:	3301      	adds	r3, #1
 8009e74:	2b0d      	cmp	r3, #13
 8009e76:	d1e7      	bne.n	8009e48 <dir_read.constprop.10+0x94>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8009e78:	7803      	ldrb	r3, [r0, #0]
 8009e7a:	065b      	lsls	r3, r3, #25
 8009e7c:	d505      	bpl.n	8009e8a <dir_read.constprop.10+0xd6>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8009e7e:	f1bc 0ffe 	cmp.w	ip, #254	; 0xfe
 8009e82:	d811      	bhi.n	8009ea8 <dir_read.constprop.10+0xf4>
		lfnbuf[i] = 0;
 8009e84:	2300      	movs	r3, #0
 8009e86:	f821 301c 	strh.w	r3, [r1, ip, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009e8a:	3c01      	subs	r4, #1
 8009e8c:	b2e4      	uxtb	r4, r4
		res = dir_next(dp, 0);		/* Next entry */
 8009e8e:	2100      	movs	r1, #0
 8009e90:	4648      	mov	r0, r9
 8009e92:	f7ff fd31 	bl	80098f8 <dir_next>
		if (res != FR_OK) break;
 8009e96:	4682      	mov	sl, r0
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d096      	beq.n	8009dca <dir_read.constprop.10+0x16>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f8c9 301c 	str.w	r3, [r9, #28]
 8009ea2:	e00d      	b.n	8009ec0 <dir_read.constprop.10+0x10c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009ea4:	42a3      	cmp	r3, r4
 8009ea6:	d0ba      	beq.n	8009e1e <dir_read.constprop.10+0x6a>
 8009ea8:	24ff      	movs	r4, #255	; 0xff
 8009eaa:	e7f0      	b.n	8009e8e <dir_read.constprop.10+0xda>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009eac:	4542      	cmp	r2, r8
 8009eae:	d0e0      	beq.n	8009e72 <dir_read.constprop.10+0xbe>
 8009eb0:	e7fa      	b.n	8009ea8 <dir_read.constprop.10+0xf4>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8009eb2:	b944      	cbnz	r4, 8009ec6 <dir_read.constprop.10+0x112>
 8009eb4:	f7ff f878 	bl	8008fa8 <sum_sfn>
 8009eb8:	42a8      	cmp	r0, r5
 8009eba:	d104      	bne.n	8009ec6 <dir_read.constprop.10+0x112>
		res = move_window(fs, dp->sect);
 8009ebc:	f04f 0a00 	mov.w	sl, #0
}
 8009ec0:	4650      	mov	r0, sl
 8009ec2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8009ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eca:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8009ece:	e7f7      	b.n	8009ec0 <dir_read.constprop.10+0x10c>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009ed0:	f04f 0a04 	mov.w	sl, #4
 8009ed4:	e7e2      	b.n	8009e9c <dir_read.constprop.10+0xe8>
 8009ed6:	bf00      	nop
 8009ed8:	0800ca7c 	.word	0x0800ca7c

08009edc <follow_path>:
{
 8009edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8009ee0:	6803      	ldr	r3, [r0, #0]
 8009ee2:	9300      	str	r3, [sp, #0]
{
 8009ee4:	4607      	mov	r7, r0
 8009ee6:	468a      	mov	sl, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009ee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eec:	2b2f      	cmp	r3, #47	; 0x2f
 8009eee:	d0fa      	beq.n	8009ee6 <follow_path+0xa>
 8009ef0:	2b5c      	cmp	r3, #92	; 0x5c
 8009ef2:	d0f8      	beq.n	8009ee6 <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8009efc:	2b1f      	cmp	r3, #31
 8009efe:	f200 80ae 	bhi.w	800a05e <follow_path+0x182>
		dp->fn[NSFLAG] = NS_NONAME;
 8009f02:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8009f04:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 8009f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 8009f0a:	b003      	add	sp, #12
 8009f0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8009f10:	f7ff bb64 	b.w	80095dc <dir_sdi>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009f14:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8009f18:	d00b      	beq.n	8009f32 <follow_path+0x56>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009f1a:	2101      	movs	r1, #1
 8009f1c:	f000 fbea 	bl	800a6f4 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009f20:	b138      	cbz	r0, 8009f32 <follow_path+0x56>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009f22:	287f      	cmp	r0, #127	; 0x7f
 8009f24:	d807      	bhi.n	8009f36 <follow_path+0x5a>
 8009f26:	4985      	ldr	r1, [pc, #532]	; (800a13c <follow_path+0x260>)
	while (*str && *str != chr) str++;
 8009f28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009f2c:	b11a      	cbz	r2, 8009f36 <follow_path+0x5a>
 8009f2e:	4290      	cmp	r0, r2
 8009f30:	d1fa      	bne.n	8009f28 <follow_path+0x4c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009f32:	2006      	movs	r0, #6
 8009f34:	e04e      	b.n	8009fd4 <follow_path+0xf8>
		lfn[di++] = w;					/* Store the Unicode character */
 8009f36:	f825 0f02 	strh.w	r0, [r5, #2]!
 8009f3a:	4626      	mov	r6, r4
 8009f3c:	e097      	b.n	800a06e <follow_path+0x192>
		w = lfn[di - 1];
 8009f3e:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8009f42:	2920      	cmp	r1, #32
 8009f44:	d002      	beq.n	8009f4c <follow_path+0x70>
 8009f46:	292e      	cmp	r1, #46	; 0x2e
 8009f48:	f040 80b0 	bne.w	800a0ac <follow_path+0x1d0>
		di--;
 8009f4c:	3e01      	subs	r6, #1
 8009f4e:	e0aa      	b.n	800a0a6 <follow_path+0x1ca>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009f50:	3101      	adds	r1, #1
 8009f52:	e0bb      	b.n	800a0cc <follow_path+0x1f0>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009f54:	45c1      	cmp	r9, r8
 8009f56:	d205      	bcs.n	8009f64 <follow_path+0x88>
 8009f58:	42b2      	cmp	r2, r6
 8009f5a:	d14b      	bne.n	8009ff4 <follow_path+0x118>
			if (ni == 11) {				/* Long extension */
 8009f5c:	f1b8 0f0b 	cmp.w	r8, #11
 8009f60:	d140      	bne.n	8009fe4 <follow_path+0x108>
 8009f62:	e002      	b.n	8009f6a <follow_path+0x8e>
 8009f64:	f1b8 0f0b 	cmp.w	r8, #11
 8009f68:	d137      	bne.n	8009fda <follow_path+0xfe>
				cf |= NS_LOSS | NS_LFN; break;
 8009f6a:	f044 0403 	orr.w	r4, r4, #3
 8009f6e:	f04f 080b 	mov.w	r8, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009f72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009f76:	2be5      	cmp	r3, #229	; 0xe5
 8009f78:	bf04      	itt	eq
 8009f7a:	2305      	moveq	r3, #5
 8009f7c:	f887 3024 	strbeq.w	r3, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8009f80:	f1b8 0f08 	cmp.w	r8, #8
 8009f84:	bf04      	itt	eq
 8009f86:	00ad      	lsleq	r5, r5, #2
 8009f88:	b2ed      	uxtbeq	r5, r5
 8009f8a:	f005 030c 	and.w	r3, r5, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009f8e:	2b0c      	cmp	r3, #12
 8009f90:	d003      	beq.n	8009f9a <follow_path+0xbe>
 8009f92:	f005 0203 	and.w	r2, r5, #3
 8009f96:	2a03      	cmp	r2, #3
 8009f98:	d101      	bne.n	8009f9e <follow_path+0xc2>
 8009f9a:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009f9e:	07a1      	lsls	r1, r4, #30
 8009fa0:	d409      	bmi.n	8009fb6 <follow_path+0xda>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009fa2:	f005 0503 	and.w	r5, r5, #3
 8009fa6:	2d01      	cmp	r5, #1
 8009fa8:	bf08      	it	eq
 8009faa:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	bf08      	it	eq
 8009fb2:	f044 0408 	orreq.w	r4, r4, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009fb6:	f887 402f 	strb.w	r4, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8009fba:	4638      	mov	r0, r7
 8009fbc:	f7ff fd12 	bl	80099e4 <dir_find>
			ns = dp->fn[NSFLAG];
 8009fc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d039      	beq.n	800a03c <follow_path+0x160>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009fc8:	2804      	cmp	r0, #4
 8009fca:	d103      	bne.n	8009fd4 <follow_path+0xf8>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009fcc:	f013 0f04 	tst.w	r3, #4
 8009fd0:	bf08      	it	eq
 8009fd2:	2005      	moveq	r0, #5
}
 8009fd4:	b003      	add	sp, #12
 8009fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009fda:	42b2      	cmp	r2, r6
 8009fdc:	d002      	beq.n	8009fe4 <follow_path+0x108>
 8009fde:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 8009fe2:	d8c6      	bhi.n	8009f72 <follow_path+0x96>
			b <<= 2; continue;
 8009fe4:	00ad      	lsls	r5, r5, #2
 8009fe6:	b2ed      	uxtb	r5, r5
 8009fe8:	4632      	mov	r2, r6
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009fea:	f04f 080b 	mov.w	r8, #11
 8009fee:	f04f 0908 	mov.w	r9, #8
 8009ff2:	e091      	b.n	800a118 <follow_path+0x23c>
		if (w >= 0x80) {				/* Non ASCII character */
 8009ff4:	287f      	cmp	r0, #127	; 0x7f
 8009ff6:	d90c      	bls.n	800a012 <follow_path+0x136>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	9201      	str	r2, [sp, #4]
 8009ffc:	f000 fb7a 	bl	800a6f4 <ff_convert>
 800a000:	f044 0402 	orr.w	r4, r4, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a004:	9a01      	ldr	r2, [sp, #4]
 800a006:	b160      	cbz	r0, 800a022 <follow_path+0x146>
 800a008:	4b4d      	ldr	r3, [pc, #308]	; (800a140 <follow_path+0x264>)
 800a00a:	4418      	add	r0, r3
 800a00c:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a010:	b138      	cbz	r0, 800a022 <follow_path+0x146>
 800a012:	4b4c      	ldr	r3, [pc, #304]	; (800a144 <follow_path+0x268>)
	while (*str && *str != chr) str++;
 800a014:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800a018:	2900      	cmp	r1, #0
 800a01a:	f000 8081 	beq.w	800a120 <follow_path+0x244>
 800a01e:	4281      	cmp	r1, r0
 800a020:	d1f8      	bne.n	800a014 <follow_path+0x138>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a022:	f044 0403 	orr.w	r4, r4, #3
 800a026:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800a028:	eb07 0109 	add.w	r1, r7, r9
 800a02c:	f109 0901 	add.w	r9, r9, #1
 800a030:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 800a034:	e070      	b.n	800a118 <follow_path+0x23c>
					b |= 2;
 800a036:	f045 0502 	orr.w	r5, r5, #2
 800a03a:	e7f5      	b.n	800a028 <follow_path+0x14c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a03c:	075a      	lsls	r2, r3, #29
 800a03e:	d4c9      	bmi.n	8009fd4 <follow_path+0xf8>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a040:	79bb      	ldrb	r3, [r7, #6]
 800a042:	06db      	lsls	r3, r3, #27
 800a044:	d56a      	bpl.n	800a11c <follow_path+0x240>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a046:	9b00      	ldr	r3, [sp, #0]
 800a048:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a052:	4419      	add	r1, r3
 800a054:	9b00      	ldr	r3, [sp, #0]
 800a056:	7818      	ldrb	r0, [r3, #0]
 800a058:	f7fe fff1 	bl	800903e <ld_clust.isra.1>
 800a05c:	60b8      	str	r0, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 800a064:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a068:	f1ab 0502 	sub.w	r5, fp, #2
 800a06c:	2600      	movs	r6, #0
		w = p[si++];					/* Get a character */
 800a06e:	f818 0f01 	ldrb.w	r0, [r8, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 800a072:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 800a074:	f106 0401 	add.w	r4, r6, #1
		if (w < ' ') break;				/* Break if end of the path name */
 800a078:	d90e      	bls.n	800a098 <follow_path+0x1bc>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a07a:	282f      	cmp	r0, #47	; 0x2f
 800a07c:	d002      	beq.n	800a084 <follow_path+0x1a8>
 800a07e:	285c      	cmp	r0, #92	; 0x5c
 800a080:	f47f af48 	bne.w	8009f14 <follow_path+0x38>
 800a084:	eb0a 0204 	add.w	r2, sl, r4
 800a088:	eba2 040a 	sub.w	r4, r2, sl
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a08c:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a090:	292f      	cmp	r1, #47	; 0x2f
 800a092:	d0f9      	beq.n	800a088 <follow_path+0x1ac>
 800a094:	295c      	cmp	r1, #92	; 0x5c
 800a096:	d0f7      	beq.n	800a088 <follow_path+0x1ac>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a098:	281f      	cmp	r0, #31
	*path = &p[si];						/* Return pointer to the next segment */
 800a09a:	44a2      	add	sl, r4
 800a09c:	eb0b 0246 	add.w	r2, fp, r6, lsl #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a0a0:	bf8c      	ite	hi
 800a0a2:	2400      	movhi	r4, #0
 800a0a4:	2404      	movls	r4, #4
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a0a6:	2e00      	cmp	r6, #0
 800a0a8:	f47f af49 	bne.w	8009f3e <follow_path+0x62>
	lfn[di] = 0;						/* LFN is created */
 800a0ac:	f04f 0800 	mov.w	r8, #0
 800a0b0:	eb0b 0546 	add.w	r5, fp, r6, lsl #1
 800a0b4:	f82b 8016 	strh.w	r8, [fp, r6, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a0b8:	2e00      	cmp	r6, #0
 800a0ba:	f43f af3a 	beq.w	8009f32 <follow_path+0x56>
	mem_set(dp->fn, ' ', 11);
 800a0be:	2120      	movs	r1, #32
 800a0c0:	220b      	movs	r2, #11
 800a0c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a0c6:	f7fe feb7 	bl	8008e38 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a0ca:	4641      	mov	r1, r8
 800a0cc:	f83b 2011 	ldrh.w	r2, [fp, r1, lsl #1]
 800a0d0:	2a20      	cmp	r2, #32
 800a0d2:	f43f af3d 	beq.w	8009f50 <follow_path+0x74>
 800a0d6:	2a2e      	cmp	r2, #46	; 0x2e
 800a0d8:	f43f af3a 	beq.w	8009f50 <follow_path+0x74>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a0dc:	b109      	cbz	r1, 800a0e2 <follow_path+0x206>
 800a0de:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a0e2:	f835 2d02 	ldrh.w	r2, [r5, #-2]!
 800a0e6:	2a2e      	cmp	r2, #46	; 0x2e
 800a0e8:	d001      	beq.n	800a0ee <follow_path+0x212>
 800a0ea:	3e01      	subs	r6, #1
 800a0ec:	d1f9      	bne.n	800a0e2 <follow_path+0x206>
		dp->fn[i++] = (BYTE)w;
 800a0ee:	f04f 0900 	mov.w	r9, #0
 800a0f2:	f04f 0808 	mov.w	r8, #8
 800a0f6:	464d      	mov	r5, r9
		w = lfn[si++];					/* Get an LFN character */
 800a0f8:	f83b 0011 	ldrh.w	r0, [fp, r1, lsl #1]
 800a0fc:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 800a0fe:	2800      	cmp	r0, #0
 800a100:	f43f af37 	beq.w	8009f72 <follow_path+0x96>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a104:	2820      	cmp	r0, #32
 800a106:	d005      	beq.n	800a114 <follow_path+0x238>
 800a108:	282e      	cmp	r0, #46	; 0x2e
 800a10a:	f47f af23 	bne.w	8009f54 <follow_path+0x78>
 800a10e:	42b2      	cmp	r2, r6
 800a110:	f43f af24 	beq.w	8009f5c <follow_path+0x80>
			cf |= NS_LOSS | NS_LFN; continue;
 800a114:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 800a118:	4611      	mov	r1, r2
 800a11a:	e7ed      	b.n	800a0f8 <follow_path+0x21c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a11c:	2005      	movs	r0, #5
	return res;
 800a11e:	e759      	b.n	8009fd4 <follow_path+0xf8>
				if (IsUpper(w)) {		/* ASCII large capital */
 800a120:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800a124:	2919      	cmp	r1, #25
 800a126:	d986      	bls.n	800a036 <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
 800a128:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 800a12c:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 800a12e:	bf9e      	ittt	ls
 800a130:	3820      	subls	r0, #32
 800a132:	f045 0501 	orrls.w	r5, r5, #1
 800a136:	b280      	uxthls	r0, r0
 800a138:	e776      	b.n	800a028 <follow_path+0x14c>
 800a13a:	bf00      	nop
 800a13c:	0800ca88 	.word	0x0800ca88
 800a140:	0800c9fc 	.word	0x0800c9fc
 800a144:	0800ca91 	.word	0x0800ca91

0800a148 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a148:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a14a:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a14e:	a804      	add	r0, sp, #16
{
 800a150:	4616      	mov	r6, r2
	const TCHAR *rp = path;
 800a152:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a156:	f7fe ff36 	bl	8008fc6 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800a15a:	1e05      	subs	r5, r0, #0
 800a15c:	db1f      	blt.n	800a19e <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a15e:	4912      	ldr	r1, [pc, #72]	; (800a1a8 <f_mount+0x60>)
 800a160:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 800a164:	b15c      	cbz	r4, 800a17e <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a166:	4b11      	ldr	r3, [pc, #68]	; (800a1ac <f_mount+0x64>)
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	4294      	cmp	r4, r2
 800a16c:	bf04      	itt	eq
 800a16e:	2200      	moveq	r2, #0
 800a170:	601a      	streq	r2, [r3, #0]
 800a172:	691a      	ldr	r2, [r3, #16]
 800a174:	2000      	movs	r0, #0
 800a176:	4294      	cmp	r4, r2
 800a178:	bf08      	it	eq
 800a17a:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a17c:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 800a17e:	9801      	ldr	r0, [sp, #4]
 800a180:	b108      	cbz	r0, 800a186 <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a182:	2300      	movs	r3, #0
 800a184:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a186:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a18a:	b130      	cbz	r0, 800a19a <f_mount+0x52>
 800a18c:	2e01      	cmp	r6, #1
 800a18e:	d108      	bne.n	800a1a2 <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a190:	2200      	movs	r2, #0
 800a192:	a901      	add	r1, sp, #4
 800a194:	4668      	mov	r0, sp
 800a196:	f7fe fff1 	bl	800917c <find_volume>
	LEAVE_FF(fs, res);
}
 800a19a:	b004      	add	sp, #16
 800a19c:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800a19e:	200b      	movs	r0, #11
 800a1a0:	e7fb      	b.n	800a19a <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a1a2:	2000      	movs	r0, #0
 800a1a4:	e7f9      	b.n	800a19a <f_mount+0x52>
 800a1a6:	bf00      	nop
 800a1a8:	200001c4 	.word	0x200001c4
 800a1ac:	200001c8 	.word	0x200001c8

0800a1b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a1b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1b4:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800a1b8:	4617      	mov	r7, r2
 800a1ba:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a1bc:	4604      	mov	r4, r0
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	f000 80b2 	beq.w	800a328 <f_open+0x178>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a1c4:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800a1c8:	462a      	mov	r2, r5
 800a1ca:	a902      	add	r1, sp, #8
 800a1cc:	a801      	add	r0, sp, #4
 800a1ce:	f7fe ffd5 	bl	800917c <find_volume>
	if (res == FR_OK) {
 800a1d2:	4606      	mov	r6, r0
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	d161      	bne.n	800a29c <f_open+0xec>
		dj.obj.fs = fs;
 800a1d8:	9b02      	ldr	r3, [sp, #8]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a1da:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800a1dc:	9303      	str	r3, [sp, #12]
		INIT_NAMBUF(fs);
 800a1de:	aa10      	add	r2, sp, #64	; 0x40
 800a1e0:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800a1e2:	a803      	add	r0, sp, #12
 800a1e4:	f7ff fe7a 	bl	8009edc <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a1e8:	b958      	cbnz	r0, 800a202 <f_open+0x52>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a1ea:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	db5c      	blt.n	800a2ac <f_open+0xfc>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a1f2:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 800a1f6:	bf14      	ite	ne
 800a1f8:	2101      	movne	r1, #1
 800a1fa:	2100      	moveq	r1, #0
 800a1fc:	a803      	add	r0, sp, #12
 800a1fe:	f7fe fe21 	bl	8008e44 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a202:	f017 0f1c 	tst.w	r7, #28
 800a206:	d05c      	beq.n	800a2c2 <f_open+0x112>
			if (res != FR_OK) {					/* No file, create new */
 800a208:	2800      	cmp	r0, #0
 800a20a:	d051      	beq.n	800a2b0 <f_open+0x100>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a20c:	2804      	cmp	r0, #4
 800a20e:	d145      	bne.n	800a29c <f_open+0xec>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a210:	4b6a      	ldr	r3, [pc, #424]	; (800a3bc <f_open+0x20c>)
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	b112      	cbz	r2, 800a21c <f_open+0x6c>
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d17f      	bne.n	800a31c <f_open+0x16c>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a21c:	a803      	add	r0, sp, #12
 800a21e:	f7ff fc93 	bl	8009b48 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a222:	2800      	cmp	r0, #0
 800a224:	d13a      	bne.n	800a29c <f_open+0xec>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a226:	f045 0508 	orr.w	r5, r5, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a22a:	072f      	lsls	r7, r5, #28
 800a22c:	d553      	bpl.n	800a2d6 <f_open+0x126>
				dw = GET_FATTIME();
 800a22e:	f000 facf 	bl	800a7d0 <get_fattime>
 800a232:	4602      	mov	r2, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a234:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a236:	4611      	mov	r1, r2
 800a238:	300e      	adds	r0, #14
 800a23a:	f7fe fdf5 	bl	8008e28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a23e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a240:	4611      	mov	r1, r2
 800a242:	3016      	adds	r0, #22
 800a244:	f7fe fdf0 	bl	8008e28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a24a:	f8dd 8008 	ldr.w	r8, [sp, #8]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a24e:	2220      	movs	r2, #32
 800a250:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a252:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a256:	f898 0000 	ldrb.w	r0, [r8]
 800a25a:	4649      	mov	r1, r9
 800a25c:	f7fe feef 	bl	800903e <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a260:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a262:	4607      	mov	r7, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a264:	4640      	mov	r0, r8
 800a266:	f7fe fef8 	bl	800905a <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a26a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800a26c:	2200      	movs	r2, #0
 800a26e:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800a270:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 800a272:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 800a274:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 800a276:	9b02      	ldr	r3, [sp, #8]
 800a278:	2101      	movs	r1, #1
 800a27a:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a27c:	b35f      	cbz	r7, 800a2d6 <f_open+0x126>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 800a27e:	4639      	mov	r1, r7
 800a280:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 800a282:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800a286:	f7ff fa43 	bl	8009710 <remove_chain>
						if (res == FR_OK) {
 800a28a:	b938      	cbnz	r0, 800a29c <f_open+0xec>
							res = move_window(fs, dw);
 800a28c:	4641      	mov	r1, r8
 800a28e:	9802      	ldr	r0, [sp, #8]
 800a290:	f7fe ff18 	bl	80090c4 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a294:	9b02      	ldr	r3, [sp, #8]
 800a296:	3f01      	subs	r7, #1
 800a298:	611f      	str	r7, [r3, #16]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 800a29a:	b1e0      	cbz	r0, 800a2d6 <f_open+0x126>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a29c:	2300      	movs	r3, #0
 800a29e:	6023      	str	r3, [r4, #0]
 800a2a0:	4606      	mov	r6, r0

	LEAVE_FF(fs, res);
}
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800a2a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				res = FR_INVALID_NAME;
 800a2ac:	2006      	movs	r0, #6
 800a2ae:	e7a8      	b.n	800a202 <f_open+0x52>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a2b0:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800a2b4:	f013 0f11 	tst.w	r3, #17
 800a2b8:	d134      	bne.n	800a324 <f_open+0x174>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a2ba:	077b      	lsls	r3, r7, #29
 800a2bc:	d5b5      	bpl.n	800a22a <f_open+0x7a>
 800a2be:	2008      	movs	r0, #8
 800a2c0:	e7ec      	b.n	800a29c <f_open+0xec>
			if (res == FR_OK) {					/* Following succeeded */
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	d1ea      	bne.n	800a29c <f_open+0xec>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a2c6:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800a2ca:	06d8      	lsls	r0, r3, #27
 800a2cc:	d428      	bmi.n	800a320 <f_open+0x170>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a2ce:	07ba      	lsls	r2, r7, #30
 800a2d0:	d501      	bpl.n	800a2d6 <f_open+0x126>
 800a2d2:	07df      	lsls	r7, r3, #31
 800a2d4:	d426      	bmi.n	800a324 <f_open+0x174>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a2d6:	9b02      	ldr	r3, [sp, #8]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a2d8:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2dc:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 800a2de:	bf48      	it	mi
 800a2e0:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a2e4:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 800a2e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2ea:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a2ec:	bf14      	ite	ne
 800a2ee:	2101      	movne	r1, #1
 800a2f0:	2100      	moveq	r1, #0
 800a2f2:	a803      	add	r0, sp, #12
 800a2f4:	f7fe fde0 	bl	8008eb8 <inc_lock>
 800a2f8:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a2fa:	b9b8      	cbnz	r0, 800a32c <f_open+0x17c>
 800a2fc:	2002      	movs	r0, #2
 800a2fe:	e7cd      	b.n	800a29c <f_open+0xec>
					clst = get_fat(&fp->obj, clst);
 800a300:	6820      	ldr	r0, [r4, #0]
 800a302:	f7ff f911 	bl	8009528 <get_fat.isra.7>
					if (clst <= 1) res = FR_INT_ERR;
 800a306:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800a308:	4601      	mov	r1, r0
 800a30a:	eba5 0508 	sub.w	r5, r5, r8
					if (clst <= 1) res = FR_INT_ERR;
 800a30e:	d903      	bls.n	800a318 <f_open+0x168>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a310:	1c42      	adds	r2, r0, #1
 800a312:	d134      	bne.n	800a37e <f_open+0x1ce>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a314:	2001      	movs	r0, #1
 800a316:	e035      	b.n	800a384 <f_open+0x1d4>
					if (clst <= 1) res = FR_INT_ERR;
 800a318:	2002      	movs	r0, #2
 800a31a:	e033      	b.n	800a384 <f_open+0x1d4>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a31c:	2012      	movs	r0, #18
 800a31e:	e7bd      	b.n	800a29c <f_open+0xec>
					res = FR_NO_FILE;
 800a320:	2004      	movs	r0, #4
 800a322:	e7bb      	b.n	800a29c <f_open+0xec>
					res = FR_DENIED;
 800a324:	2007      	movs	r0, #7
 800a326:	e7b9      	b.n	800a29c <f_open+0xec>
	if (!fp) return FR_INVALID_OBJECT;
 800a328:	2609      	movs	r6, #9
 800a32a:	e7ba      	b.n	800a2a2 <f_open+0xf2>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a32c:	9f02      	ldr	r7, [sp, #8]
 800a32e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a332:	7838      	ldrb	r0, [r7, #0]
 800a334:	4641      	mov	r1, r8
 800a336:	f7fe fe82 	bl	800903e <ld_clust.isra.1>
 800a33a:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a33c:	f108 001c 	add.w	r0, r8, #28
 800a340:	f7fe fd6a 	bl	8008e18 <ld_dword>
			fp->obj.id = fs->id;
 800a344:	88fb      	ldrh	r3, [r7, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a346:	6027      	str	r7, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a348:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a34a:	f104 0730 	add.w	r7, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a34e:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 800a350:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a352:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 800a354:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 800a356:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a358:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a35a:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a35c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a360:	4638      	mov	r0, r7
 800a362:	f7fe fd69 	bl	8008e38 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a366:	06ab      	lsls	r3, r5, #26
 800a368:	d59b      	bpl.n	800a2a2 <f_open+0xf2>
 800a36a:	68e5      	ldr	r5, [r4, #12]
 800a36c:	2d00      	cmp	r5, #0
 800a36e:	d098      	beq.n	800a2a2 <f_open+0xf2>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a370:	9b02      	ldr	r3, [sp, #8]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a372:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a374:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a378:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a37a:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a37e:	45a8      	cmp	r8, r5
 800a380:	d3be      	bcc.n	800a300 <f_open+0x150>
 800a382:	2000      	movs	r0, #0
				fp->clust = clst;
 800a384:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a386:	2800      	cmp	r0, #0
 800a388:	d188      	bne.n	800a29c <f_open+0xec>
 800a38a:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d087      	beq.n	800a2a2 <f_open+0xf2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a392:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a396:	4640      	mov	r0, r8
 800a398:	f7fe fdea 	bl	8008f70 <clust2sect>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d0ad      	beq.n	800a2fc <f_open+0x14c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a3a0:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 800a3a4:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	4639      	mov	r1, r7
 800a3aa:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a3ae:	f7fe fd09 	bl	8008dc4 <disk_read>
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	f43f af75 	beq.w	800a2a2 <f_open+0xf2>
 800a3b8:	2001      	movs	r0, #1
 800a3ba:	e76f      	b.n	800a29c <f_open+0xec>
 800a3bc:	200001c8 	.word	0x200001c8

0800a3c0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c4:	469b      	mov	fp, r3
 800a3c6:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800a3c8:	2300      	movs	r3, #0
{
 800a3ca:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 800a3cc:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a3d0:	a903      	add	r1, sp, #12
{
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	4615      	mov	r5, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a3d6:	f7fe fe0e 	bl	8008ff6 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a3da:	4606      	mov	r6, r0
 800a3dc:	bb00      	cbnz	r0, 800a420 <f_read+0x60>
 800a3de:	7d66      	ldrb	r6, [r4, #21]
 800a3e0:	b9f6      	cbnz	r6, 800a420 <f_read+0x60>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a3e2:	7d23      	ldrb	r3, [r4, #20]
 800a3e4:	07da      	lsls	r2, r3, #31
 800a3e6:	f140 8096 	bpl.w	800a516 <f_read+0x156>
	remain = fp->obj.objsize - fp->fptr;
 800a3ea:	68e3      	ldr	r3, [r4, #12]
 800a3ec:	69a7      	ldr	r7, [r4, #24]
 800a3ee:	1bdf      	subs	r7, r3, r7
 800a3f0:	42af      	cmp	r7, r5
 800a3f2:	bf28      	it	cs
 800a3f4:	462f      	movcs	r7, r5
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a3f6:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btr;								/* Repeat until all data read */
 800a3fa:	b18f      	cbz	r7, 800a420 <f_read+0x60>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a3fc:	69a1      	ldr	r1, [r4, #24]
 800a3fe:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800a402:	2b00      	cmp	r3, #0
 800a404:	d179      	bne.n	800a4fa <f_read+0x13a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a406:	9b03      	ldr	r3, [sp, #12]
 800a408:	895b      	ldrh	r3, [r3, #10]
 800a40a:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800a40c:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 800a410:	9301      	str	r3, [sp, #4]
 800a412:	d119      	bne.n	800a448 <f_read+0x88>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a414:	b941      	cbnz	r1, 800a428 <f_read+0x68>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a416:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a418:	2801      	cmp	r0, #1
 800a41a:	d810      	bhi.n	800a43e <f_read+0x7e>
 800a41c:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a41e:	7566      	strb	r6, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800a420:	4630      	mov	r0, r6
 800a422:	b005      	add	sp, #20
 800a424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 800a428:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a42a:	b11b      	cbz	r3, 800a434 <f_read+0x74>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a42c:	4620      	mov	r0, r4
 800a42e:	f7fe fdaa 	bl	8008f86 <clmt_clust>
 800a432:	e7f1      	b.n	800a418 <f_read+0x58>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a434:	69e1      	ldr	r1, [r4, #28]
 800a436:	6820      	ldr	r0, [r4, #0]
 800a438:	f7ff f876 	bl	8009528 <get_fat.isra.7>
 800a43c:	e7ec      	b.n	800a418 <f_read+0x58>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a43e:	1c43      	adds	r3, r0, #1
 800a440:	d101      	bne.n	800a446 <f_read+0x86>
 800a442:	2601      	movs	r6, #1
 800a444:	e7eb      	b.n	800a41e <f_read+0x5e>
				fp->clust = clst;				/* Update current cluster */
 800a446:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a448:	9b03      	ldr	r3, [sp, #12]
 800a44a:	69e1      	ldr	r1, [r4, #28]
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fe fd8e 	bl	8008f70 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a454:	2800      	cmp	r0, #0
 800a456:	d0e1      	beq.n	800a41c <f_read+0x5c>
			sect += csect;
 800a458:	9b01      	ldr	r3, [sp, #4]
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a45a:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 800a45c:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a460:	d02d      	beq.n	800a4be <f_read+0xfe>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a462:	9b00      	ldr	r3, [sp, #0]
 800a464:	9a01      	ldr	r2, [sp, #4]
 800a466:	895b      	ldrh	r3, [r3, #10]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a468:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a46a:	442a      	add	r2, r5
 800a46c:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800a46e:	bf88      	it	hi
 800a470:	9a01      	ldrhi	r2, [sp, #4]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a472:	7840      	ldrb	r0, [r0, #1]
					cc = fs->csize - csect;
 800a474:	bf88      	it	hi
 800a476:	1a9d      	subhi	r5, r3, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a478:	462b      	mov	r3, r5
 800a47a:	4642      	mov	r2, r8
 800a47c:	4649      	mov	r1, r9
 800a47e:	f7fe fca1 	bl	8008dc4 <disk_read>
 800a482:	2800      	cmp	r0, #0
 800a484:	d1dd      	bne.n	800a442 <f_read+0x82>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a486:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	da0b      	bge.n	800a4a6 <f_read+0xe6>
 800a48e:	6a20      	ldr	r0, [r4, #32]
 800a490:	eba0 0008 	sub.w	r0, r0, r8
 800a494:	42a8      	cmp	r0, r5
 800a496:	d206      	bcs.n	800a4a6 <f_read+0xe6>
 800a498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a49c:	4651      	mov	r1, sl
 800a49e:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 800a4a2:	f7fe fdc3 	bl	800902c <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a4a6:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a4a8:	69a3      	ldr	r3, [r4, #24]
 800a4aa:	442b      	add	r3, r5
 800a4ac:	61a3      	str	r3, [r4, #24]
 800a4ae:	f8db 3000 	ldr.w	r3, [fp]
 800a4b2:	442b      	add	r3, r5
 800a4b4:	44a9      	add	r9, r5
 800a4b6:	f8cb 3000 	str.w	r3, [fp]
 800a4ba:	1b7f      	subs	r7, r7, r5
 800a4bc:	e79d      	b.n	800a3fa <f_read+0x3a>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a4be:	6a22      	ldr	r2, [r4, #32]
 800a4c0:	4542      	cmp	r2, r8
 800a4c2:	d018      	beq.n	800a4f6 <f_read+0x136>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a4c4:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	da0b      	bge.n	800a4e4 <f_read+0x124>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a4cc:	9800      	ldr	r0, [sp, #0]
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	4651      	mov	r1, sl
 800a4d2:	7840      	ldrb	r0, [r0, #1]
 800a4d4:	f7fe fc84 	bl	8008de0 <disk_write>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d1b2      	bne.n	800a442 <f_read+0x82>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a4dc:	7d23      	ldrb	r3, [r4, #20]
 800a4de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4e2:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a4e4:	9803      	ldr	r0, [sp, #12]
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	4642      	mov	r2, r8
 800a4ea:	4651      	mov	r1, sl
 800a4ec:	7840      	ldrb	r0, [r0, #1]
 800a4ee:	f7fe fc69 	bl	8008dc4 <disk_read>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	d1a5      	bne.n	800a442 <f_read+0x82>
			fp->sect = sect;
 800a4f6:	f8c4 8020 	str.w	r8, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a4fa:	69a1      	ldr	r1, [r4, #24]
 800a4fc:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800a500:	f5c1 7500 	rsb	r5, r1, #512	; 0x200
 800a504:	42bd      	cmp	r5, r7
 800a506:	bf28      	it	cs
 800a508:	463d      	movcs	r5, r7
 800a50a:	462a      	mov	r2, r5
 800a50c:	4451      	add	r1, sl
 800a50e:	4648      	mov	r0, r9
 800a510:	f7fe fd8c 	bl	800902c <mem_cpy.part.0>
 800a514:	e7c8      	b.n	800a4a8 <f_read+0xe8>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a516:	2607      	movs	r6, #7
 800a518:	e782      	b.n	800a420 <f_read+0x60>

0800a51a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a51a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a51c:	a901      	add	r1, sp, #4
{
 800a51e:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a520:	f7fe fd69 	bl	8008ff6 <validate>
	if (res == FR_OK) {
 800a524:	4605      	mov	r5, r0
 800a526:	2800      	cmp	r0, #0
 800a528:	d13a      	bne.n	800a5a0 <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a52a:	7d23      	ldrb	r3, [r4, #20]
 800a52c:	065a      	lsls	r2, r3, #25
 800a52e:	d537      	bpl.n	800a5a0 <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a530:	061b      	lsls	r3, r3, #24
 800a532:	d50c      	bpl.n	800a54e <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a534:	9801      	ldr	r0, [sp, #4]
 800a536:	6a22      	ldr	r2, [r4, #32]
 800a538:	7840      	ldrb	r0, [r0, #1]
 800a53a:	2301      	movs	r3, #1
 800a53c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800a540:	f7fe fc4e 	bl	8008de0 <disk_write>
 800a544:	bb78      	cbnz	r0, 800a5a6 <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a546:	7d23      	ldrb	r3, [r4, #20]
 800a548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a54c:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a54e:	f000 f93f 	bl	800a7d0 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a552:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 800a554:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 800a556:	9801      	ldr	r0, [sp, #4]
 800a558:	f7fe fdb4 	bl	80090c4 <move_window>
				if (res == FR_OK) {
 800a55c:	4605      	mov	r5, r0
 800a55e:	b9f8      	cbnz	r0, 800a5a0 <f_sync+0x86>
					dir = fp->dir_ptr;
 800a560:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a562:	7af3      	ldrb	r3, [r6, #11]
 800a564:	f043 0320 	orr.w	r3, r3, #32
 800a568:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a56a:	68a2      	ldr	r2, [r4, #8]
 800a56c:	6820      	ldr	r0, [r4, #0]
 800a56e:	4631      	mov	r1, r6
 800a570:	f7fe fd73 	bl	800905a <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a574:	68e1      	ldr	r1, [r4, #12]
 800a576:	f106 001c 	add.w	r0, r6, #28
 800a57a:	f7fe fc55 	bl	8008e28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a57e:	4639      	mov	r1, r7
 800a580:	f106 0016 	add.w	r0, r6, #22
 800a584:	f7fe fc50 	bl	8008e28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 800a588:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800a58a:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 800a58c:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 800a58e:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 800a590:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a592:	f7ff f966 	bl	8009862 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a596:	7d23      	ldrb	r3, [r4, #20]
 800a598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 800a59c:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a59e:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	b003      	add	sp, #12
 800a5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a5a6:	2501      	movs	r5, #1
 800a5a8:	e7fa      	b.n	800a5a0 <f_sync+0x86>

0800a5aa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a5aa:	b513      	push	{r0, r1, r4, lr}
 800a5ac:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a5ae:	f7ff ffb4 	bl	800a51a <f_sync>
	if (res == FR_OK)
 800a5b2:	b948      	cbnz	r0, 800a5c8 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a5b4:	a901      	add	r1, sp, #4
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	f7fe fd1d 	bl	8008ff6 <validate>
		if (res == FR_OK) {
 800a5bc:	b920      	cbnz	r0, 800a5c8 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a5be:	6920      	ldr	r0, [r4, #16]
 800a5c0:	f7fe fcba 	bl	8008f38 <dec_lock>
			if (res == FR_OK)
 800a5c4:	b900      	cbnz	r0, 800a5c8 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a5c6:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800a5c8:	b002      	add	sp, #8
 800a5ca:	bd10      	pop	{r4, pc}

0800a5cc <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800a5cc:	b530      	push	{r4, r5, lr}
 800a5ce:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800a5d2:	4604      	mov	r4, r0
{
 800a5d4:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	d03d      	beq.n	800a656 <f_opendir+0x8a>

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 800a5da:	2200      	movs	r2, #0
 800a5dc:	a903      	add	r1, sp, #12
 800a5de:	a801      	add	r0, sp, #4
 800a5e0:	f7fe fdcc 	bl	800917c <find_volume>
	if (res == FR_OK) {
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	b988      	cbnz	r0, 800a60c <f_opendir+0x40>
		obj->fs = fs;
 800a5e8:	9b03      	ldr	r3, [sp, #12]
 800a5ea:	6023      	str	r3, [r4, #0]
		INIT_NAMBUF(fs);
 800a5ec:	aa04      	add	r2, sp, #16
 800a5ee:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800a5f0:	9901      	ldr	r1, [sp, #4]
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f7ff fc72 	bl	8009edc <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800a5f8:	4605      	mov	r5, r0
 800a5fa:	bb38      	cbnz	r0, 800a64c <f_opendir+0x80>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800a5fc:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 800a600:	2b00      	cmp	r3, #0
 800a602:	db0c      	blt.n	800a61e <f_opendir+0x52>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800a604:	79a3      	ldrb	r3, [r4, #6]
 800a606:	06db      	lsls	r3, r3, #27
 800a608:	d403      	bmi.n	800a612 <f_opendir+0x46>
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800a60a:	2505      	movs	r5, #5
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800a60c:	2300      	movs	r3, #0
 800a60e:	6023      	str	r3, [r4, #0]
 800a610:	e016      	b.n	800a640 <f_opendir+0x74>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800a612:	9b03      	ldr	r3, [sp, #12]
 800a614:	6a21      	ldr	r1, [r4, #32]
 800a616:	7818      	ldrb	r0, [r3, #0]
 800a618:	f7fe fd11 	bl	800903e <ld_clust.isra.1>
 800a61c:	60a0      	str	r0, [r4, #8]
				obj->id = fs->id;
 800a61e:	9b03      	ldr	r3, [sp, #12]
 800a620:	88db      	ldrh	r3, [r3, #6]
 800a622:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800a624:	2100      	movs	r1, #0
 800a626:	4620      	mov	r0, r4
 800a628:	f7fe ffd8 	bl	80095dc <dir_sdi>
				if (res == FR_OK) {
 800a62c:	4605      	mov	r5, r0
 800a62e:	b968      	cbnz	r0, 800a64c <f_opendir+0x80>
					if (obj->sclust) {
 800a630:	68a3      	ldr	r3, [r4, #8]
 800a632:	b14b      	cbz	r3, 800a648 <f_opendir+0x7c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a634:	4601      	mov	r1, r0
 800a636:	4620      	mov	r0, r4
 800a638:	f7fe fc3e 	bl	8008eb8 <inc_lock>
 800a63c:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800a63e:	b140      	cbz	r0, 800a652 <f_opendir+0x86>

	LEAVE_FF(fs, res);
}
 800a640:	4628      	mov	r0, r5
 800a642:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 800a646:	bd30      	pop	{r4, r5, pc}
						obj->lockid = 0;	/* Root directory need not to be locked */
 800a648:	6120      	str	r0, [r4, #16]
 800a64a:	e7f9      	b.n	800a640 <f_opendir+0x74>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a64c:	2d04      	cmp	r5, #4
 800a64e:	d0dc      	beq.n	800a60a <f_opendir+0x3e>
 800a650:	e7dc      	b.n	800a60c <f_opendir+0x40>
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800a652:	2512      	movs	r5, #18
 800a654:	e7da      	b.n	800a60c <f_opendir+0x40>
	if (!dp) return FR_INVALID_OBJECT;
 800a656:	2509      	movs	r5, #9
 800a658:	e7f2      	b.n	800a640 <f_opendir+0x74>

0800a65a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a65a:	b570      	push	{r4, r5, r6, lr}
 800a65c:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800a660:	460d      	mov	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800a662:	a901      	add	r1, sp, #4
{
 800a664:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800a666:	f7fe fcc6 	bl	8008ff6 <validate>
	if (res == FR_OK) {
 800a66a:	b920      	cbnz	r0, 800a676 <f_readdir+0x1c>
		if (!fno) {
 800a66c:	b935      	cbnz	r5, 800a67c <f_readdir+0x22>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a66e:	4601      	mov	r1, r0
 800a670:	4620      	mov	r0, r4
 800a672:	f7fe ffb3 	bl	80095dc <dir_sdi>
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 800a676:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 800a67a:	bd70      	pop	{r4, r5, r6, pc}
			INIT_NAMBUF(fs);
 800a67c:	9b01      	ldr	r3, [sp, #4]
 800a67e:	aa02      	add	r2, sp, #8
 800a680:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800a682:	4620      	mov	r0, r4
 800a684:	f7ff fb96 	bl	8009db4 <dir_read.constprop.10>
			if (res == FR_OK) {				/* A valid entry is found */
 800a688:	f010 06fb 	ands.w	r6, r0, #251	; 0xfb
 800a68c:	d1f3      	bne.n	800a676 <f_readdir+0x1c>
				get_fileinfo(dp, fno);		/* Get the object information */
 800a68e:	4629      	mov	r1, r5
 800a690:	4620      	mov	r0, r4
 800a692:	f7ff f874 	bl	800977e <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a696:	4631      	mov	r1, r6
 800a698:	4620      	mov	r0, r4
 800a69a:	f7ff f92d 	bl	80098f8 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800a69e:	2804      	cmp	r0, #4
 800a6a0:	bf08      	it	eq
 800a6a2:	2000      	moveq	r0, #0
 800a6a4:	e7e7      	b.n	800a676 <f_readdir+0x1c>
	...

0800a6a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a6a8:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800a6aa:	4b0f      	ldr	r3, [pc, #60]	; (800a6e8 <FATFS_LinkDriverEx+0x40>)
 800a6ac:	7a5d      	ldrb	r5, [r3, #9]
 800a6ae:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 800a6b2:	b9b5      	cbnz	r5, 800a6e2 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a6b4:	7a5d      	ldrb	r5, [r3, #9]
 800a6b6:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800a6b8:	7a5d      	ldrb	r5, [r3, #9]
 800a6ba:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a6be:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800a6c0:	7a58      	ldrb	r0, [r3, #9]
 800a6c2:	4418      	add	r0, r3
 800a6c4:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800a6c6:	7a5a      	ldrb	r2, [r3, #9]
 800a6c8:	b2d2      	uxtb	r2, r2
 800a6ca:	1c50      	adds	r0, r2, #1
 800a6cc:	b2c0      	uxtb	r0, r0
 800a6ce:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 800a6d0:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800a6d2:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 800a6d4:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800a6d6:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800a6d8:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800a6da:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800a6dc:	70cc      	strb	r4, [r1, #3]
 800a6de:	4620      	mov	r0, r4
    ret = 0;
  }

  return ret;
}
 800a6e0:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800a6e2:	2001      	movs	r0, #1
 800a6e4:	e7fc      	b.n	800a6e0 <FATFS_LinkDriverEx+0x38>
 800a6e6:	bf00      	nop
 800a6e8:	200001ec 	.word	0x200001ec

0800a6ec <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f7ff bfdb 	b.w	800a6a8 <FATFS_LinkDriverEx>
	...

0800a6f4 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a6f4:	287f      	cmp	r0, #127	; 0x7f
{
 800a6f6:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
 800a6f8:	d906      	bls.n	800a708 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a6fa:	b131      	cbz	r1, 800a70a <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a6fc:	28ff      	cmp	r0, #255	; 0xff
 800a6fe:	d812      	bhi.n	800a726 <ff_convert+0x32>
 800a700:	3880      	subs	r0, #128	; 0x80
 800a702:	4b0a      	ldr	r3, [pc, #40]	; (800a72c <ff_convert+0x38>)
 800a704:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 800a708:	bd10      	pop	{r4, pc}
				if (chr == Tbl[c]) break;
 800a70a:	4a08      	ldr	r2, [pc, #32]	; (800a72c <ff_convert+0x38>)
 800a70c:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
 800a710:	4284      	cmp	r4, r0
 800a712:	b28b      	uxth	r3, r1
 800a714:	d003      	beq.n	800a71e <ff_convert+0x2a>
 800a716:	3101      	adds	r1, #1
			for (c = 0; c < 0x80; c++) {
 800a718:	2980      	cmp	r1, #128	; 0x80
 800a71a:	d1f7      	bne.n	800a70c <ff_convert+0x18>
 800a71c:	460b      	mov	r3, r1
			c = (c + 0x80) & 0xFF;
 800a71e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800a722:	b2c0      	uxtb	r0, r0
 800a724:	e7f0      	b.n	800a708 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a726:	2000      	movs	r0, #0
 800a728:	e7ee      	b.n	800a708 <ff_convert+0x14>
 800a72a:	bf00      	nop
 800a72c:	0800ca9a 	.word	0x0800ca9a

0800a730 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a730:	b570      	push	{r4, r5, r6, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a732:	4b1e      	ldr	r3, [pc, #120]	; (800a7ac <ff_wtoupper+0x7c>)
 800a734:	4a1e      	ldr	r2, [pc, #120]	; (800a7b0 <ff_wtoupper+0x80>)
 800a736:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800a73a:	bf28      	it	cs
 800a73c:	4613      	movcs	r3, r2
 800a73e:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
 800a740:	f831 3c04 	ldrh.w	r3, [r1, #-4]
 800a744:	460a      	mov	r2, r1
		if (!bc || chr < bc) break;
 800a746:	b1a3      	cbz	r3, 800a772 <ff_wtoupper+0x42>
 800a748:	4298      	cmp	r0, r3
 800a74a:	d312      	bcc.n	800a772 <ff_wtoupper+0x42>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a74c:	f831 4c02 	ldrh.w	r4, [r1, #-2]
 800a750:	0a25      	lsrs	r5, r4, #8
 800a752:	b2e4      	uxtb	r4, r4
		if (chr < bc + nc) {	/* In the block? */
 800a754:	18e6      	adds	r6, r4, r3
 800a756:	42b0      	cmp	r0, r6
 800a758:	da21      	bge.n	800a79e <ff_wtoupper+0x6e>
			switch (cmd) {
 800a75a:	2d08      	cmp	r5, #8
 800a75c:	d809      	bhi.n	800a772 <ff_wtoupper+0x42>
 800a75e:	e8df f005 	tbb	[pc, r5]
 800a762:	0905      	.short	0x0905
 800a764:	1513110f 	.word	0x1513110f
 800a768:	1917      	.short	0x1917
 800a76a:	1b          	.byte	0x1b
 800a76b:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a76c:	1ac0      	subs	r0, r0, r3
 800a76e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
		}
		if (!cmd) p += nc;
	}

	return chr;
}
 800a772:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a774:	1ac3      	subs	r3, r0, r3
 800a776:	f003 0301 	and.w	r3, r3, #1
 800a77a:	1ac0      	subs	r0, r0, r3
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a77c:	b280      	uxth	r0, r0
 800a77e:	e7f8      	b.n	800a772 <ff_wtoupper+0x42>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a780:	3810      	subs	r0, #16
 800a782:	e7fb      	b.n	800a77c <ff_wtoupper+0x4c>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a784:	3820      	subs	r0, #32
 800a786:	e7f9      	b.n	800a77c <ff_wtoupper+0x4c>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a788:	3830      	subs	r0, #48	; 0x30
 800a78a:	e7f7      	b.n	800a77c <ff_wtoupper+0x4c>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a78c:	381a      	subs	r0, #26
 800a78e:	e7f5      	b.n	800a77c <ff_wtoupper+0x4c>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a790:	3008      	adds	r0, #8
 800a792:	e7f3      	b.n	800a77c <ff_wtoupper+0x4c>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a794:	3850      	subs	r0, #80	; 0x50
 800a796:	e7f1      	b.n	800a77c <ff_wtoupper+0x4c>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a798:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800a79c:	e7ee      	b.n	800a77c <ff_wtoupper+0x4c>
 800a79e:	3104      	adds	r1, #4
		if (!cmd) p += nc;
 800a7a0:	2d00      	cmp	r5, #0
 800a7a2:	d1cd      	bne.n	800a740 <ff_wtoupper+0x10>
 800a7a4:	eb02 0344 	add.w	r3, r2, r4, lsl #1
 800a7a8:	e7c9      	b.n	800a73e <ff_wtoupper+0xe>
 800a7aa:	bf00      	nop
 800a7ac:	0800cb9a 	.word	0x0800cb9a
 800a7b0:	0800cd8c 	.word	0x0800cd8c

0800a7b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800a7b4:	b508      	push	{r3, lr}
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800a7b6:	4903      	ldr	r1, [pc, #12]	; (800a7c4 <MX_FATFS_Init+0x10>)
 800a7b8:	4803      	ldr	r0, [pc, #12]	; (800a7c8 <MX_FATFS_Init+0x14>)
 800a7ba:	f7ff ff97 	bl	800a6ec <FATFS_LinkDriver>
 800a7be:	4b03      	ldr	r3, [pc, #12]	; (800a7cc <MX_FATFS_Init+0x18>)
 800a7c0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800a7c2:	bd08      	pop	{r3, pc}
 800a7c4:	20000388 	.word	0x20000388
 800a7c8:	0800cfe8 	.word	0x0800cfe8
 800a7cc:	200007f0 	.word	0x200007f0

0800a7d0 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	4770      	bx	lr

0800a7d4 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 800a7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d8:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a7da:	2400      	movs	r4, #0
 800a7dc:	4b70      	ldr	r3, [pc, #448]	; (800a9a0 <MX_GPIO_Init+0x1cc>)
 800a7de:	9403      	str	r4, [sp, #12]
 800a7e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800a7e2:	4e70      	ldr	r6, [pc, #448]	; (800a9a4 <MX_GPIO_Init+0x1d0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800a7e4:	4f70      	ldr	r7, [pc, #448]	; (800a9a8 <MX_GPIO_Init+0x1d4>)
  /*Configure GPIO pin Output Level */
 /* HAL_GPIO_WritePin(GPIOD, LD5_Pin|LD6_Pin
                          , GPIO_PIN_RESET);*/
  
   /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 800a7e6:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 800a9ac <MX_GPIO_Init+0x1d8>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PE4 PE5 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a7ea:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 800a9b0 <MX_GPIO_Init+0x1dc>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a7ee:	f042 0210 	orr.w	r2, r2, #16
 800a7f2:	631a      	str	r2, [r3, #48]	; 0x30
 800a7f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7f6:	f002 0210 	and.w	r2, r2, #16
 800a7fa:	9203      	str	r2, [sp, #12]
 800a7fc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a7fe:	9404      	str	r4, [sp, #16]
 800a800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a802:	f042 0204 	orr.w	r2, r2, #4
 800a806:	631a      	str	r2, [r3, #48]	; 0x30
 800a808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a80a:	f002 0204 	and.w	r2, r2, #4
 800a80e:	9204      	str	r2, [sp, #16]
 800a810:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a812:	9405      	str	r4, [sp, #20]
 800a814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a816:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a81a:	631a      	str	r2, [r3, #48]	; 0x30
 800a81c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a81e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800a822:	9205      	str	r2, [sp, #20]
 800a824:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a826:	9406      	str	r4, [sp, #24]
 800a828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a82a:	f042 0201 	orr.w	r2, r2, #1
 800a82e:	631a      	str	r2, [r3, #48]	; 0x30
 800a830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a832:	f002 0201 	and.w	r2, r2, #1
 800a836:	9206      	str	r2, [sp, #24]
 800a838:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a83a:	9407      	str	r4, [sp, #28]
 800a83c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a83e:	f042 0202 	orr.w	r2, r2, #2
 800a842:	631a      	str	r2, [r3, #48]	; 0x30
 800a844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a846:	f002 0202 	and.w	r2, r2, #2
 800a84a:	9207      	str	r2, [sp, #28]
 800a84c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a84e:	9408      	str	r4, [sp, #32]
 800a850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a852:	f042 0208 	orr.w	r2, r2, #8
 800a856:	631a      	str	r2, [r3, #48]	; 0x30
 800a858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85a:	f003 0308 	and.w	r3, r3, #8
 800a85e:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800a860:	4622      	mov	r2, r4
 800a862:	4630      	mov	r0, r6
 800a864:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a866:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800a868:	f7fa f8ac 	bl	80049c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800a86c:	2201      	movs	r2, #1
 800a86e:	4611      	mov	r1, r2
 800a870:	4638      	mov	r0, r7
 800a872:	f7fa f8a7 	bl	80049c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 800a876:	4622      	mov	r2, r4
 800a878:	4640      	mov	r0, r8
 800a87a:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 800a87e:	f7fa f8a1 	bl	80049c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a882:	2501      	movs	r5, #1
 800a884:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a888:	a909      	add	r1, sp, #36	; 0x24
 800a88a:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a88c:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a890:	f04f 0b04 	mov.w	fp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a894:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a898:	f7f9 ff4e 	bl	8004738 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a89c:	a909      	add	r1, sp, #36	; 0x24
 800a89e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800a8a0:	f04f 0908 	mov.w	r9, #8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a8a4:	e9cd b409 	strd	fp, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8a8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a8aa:	f7f9 ff45 	bl	8004738 <HAL_GPIO_Init>
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800a8ae:	a909      	add	r1, sp, #36	; 0x24
 800a8b0:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a8b2:	e9cd 9509 	strd	r9, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8b6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800a8ba:	f7f9 ff3d 	bl	8004738 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a8be:	2332      	movs	r3, #50	; 0x32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a8c0:	a909      	add	r1, sp, #36	; 0x24
 800a8c2:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a8c4:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8c8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a8ca:	f7f9 ff35 	bl	8004738 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800a8ce:	a909      	add	r1, sp, #36	; 0x24
 800a8d0:	4638      	mov	r0, r7

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8d2:	2602      	movs	r6, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a8d4:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8d8:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800a8dc:	f7f9 ff2c 	bl	8004738 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800a8e0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800a8e4:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a8e6:	f04f 0905 	mov.w	r9, #5
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800a8ea:	4638      	mov	r0, r7
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a8ec:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8f0:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8f4:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800a8f6:	f7f9 ff1f 	bl	8004738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a8fa:	e9cd 5a09 	strd	r5, sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8fe:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 800a9b4 <MX_GPIO_Init+0x1e0>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a902:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a904:	a909      	add	r1, sp, #36	; 0x24
 800a906:	4650      	mov	r0, sl
 800a908:	f7f9 ff16 	bl	8004738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800a90c:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a90e:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800a912:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a914:	2306      	movs	r3, #6
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800a916:	4650      	mov	r0, sl
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a918:	930d      	str	r3, [sp, #52]	; 0x34
 800a91a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a91c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800a920:	f7f9 ff0a 	bl	8004738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800a924:	22e0      	movs	r2, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a926:	e9cd 2609 	strd	r2, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a92a:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a92c:	2203      	movs	r2, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a92e:	4650      	mov	r0, sl
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a930:	e9cd 290c 	strd	r2, r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a934:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a936:	f7f9 feff 	bl	8004738 <HAL_GPIO_Init>
  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a93a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a93e:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800a9b8 <MX_GPIO_Init+0x1e4>
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800a942:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a946:	a909      	add	r1, sp, #36	; 0x24
 800a948:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a94a:	e9cd 2609 	strd	r2, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a94e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a952:	f7f9 fef1 	bl	8004738 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);*/

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800a956:	f44f 52a4 	mov.w	r2, #5248	; 0x1480
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a95a:	9b01      	ldr	r3, [sp, #4]
 800a95c:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a95e:	a909      	add	r1, sp, #36	; 0x24
 800a960:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a962:	e9cd 2609 	strd	r2, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a966:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a96a:	f7f9 fee5 	bl	8004738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800a96e:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a970:	a909      	add	r1, sp, #36	; 0x24
 800a972:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a974:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a978:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a97a:	f7f9 fedd 	bl	8004738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a97e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a982:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a984:	a909      	add	r1, sp, #36	; 0x24
 800a986:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a988:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a98c:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a990:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a994:	f7f9 fed0 	bl	8004738 <HAL_GPIO_Init>

}
 800a998:	b00f      	add	sp, #60	; 0x3c
 800a99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a99e:	bf00      	nop
 800a9a0:	40023800 	.word	0x40023800
 800a9a4:	40021000 	.word	0x40021000
 800a9a8:	40020800 	.word	0x40020800
 800a9ac:	40020c00 	.word	0x40020c00
 800a9b0:	10120000 	.word	0x10120000
 800a9b4:	40020000 	.word	0x40020000
 800a9b8:	40020400 	.word	0x40020400

0800a9bc <write4Bits>:
 * HAL_GPIO_WritePin() is passed an appropriate value type.
 */
#define SET_IF(expr)  ((expr) ? GPIO_PIN_SET : GPIO_PIN_RESET)

/* Write the lower nibble of @val to D4,D5,D6,D7  */
static void write4Bits(uint8_t val) {
 800a9bc:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(__lcd->D7->GPIOx, __lcd->D7->GPIO_Pin_x, SET_IF(val & 0x08)); // 4th bit of lower nibble
 800a9be:	4c1f      	ldr	r4, [pc, #124]	; (800aa3c <write4Bits+0x80>)
 800a9c0:	6823      	ldr	r3, [r4, #0]
 800a9c2:	699b      	ldr	r3, [r3, #24]
static void write4Bits(uint8_t val) {
 800a9c4:	4605      	mov	r5, r0
  HAL_GPIO_WritePin(__lcd->D7->GPIOx, __lcd->D7->GPIO_Pin_x, SET_IF(val & 0x08)); // 4th bit of lower nibble
 800a9c6:	f3c0 02c0 	ubfx	r2, r0, #3, #1
 800a9ca:	8899      	ldrh	r1, [r3, #4]
 800a9cc:	6818      	ldr	r0, [r3, #0]
 800a9ce:	f7f9 fff9 	bl	80049c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(__lcd->D6->GPIOx, __lcd->D6->GPIO_Pin_x, SET_IF(val & 0x04));
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	695b      	ldr	r3, [r3, #20]
 800a9d6:	f3c5 0280 	ubfx	r2, r5, #2, #1
 800a9da:	8899      	ldrh	r1, [r3, #4]
 800a9dc:	6818      	ldr	r0, [r3, #0]
 800a9de:	f7f9 fff1 	bl	80049c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(__lcd->D5->GPIOx, __lcd->D5->GPIO_Pin_x, SET_IF(val & 0x02));
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	f3c5 0240 	ubfx	r2, r5, #1, #1
 800a9ea:	8899      	ldrh	r1, [r3, #4]
 800a9ec:	6818      	ldr	r0, [r3, #0]
 800a9ee:	f7f9 ffe9 	bl	80049c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(__lcd->D4->GPIOx, __lcd->D4->GPIO_Pin_x, SET_IF(val & 0x01)); // 0th bit(LSb)
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	f005 0201 	and.w	r2, r5, #1
 800a9fa:	8899      	ldrh	r1, [r3, #4]
 800a9fc:	6818      	ldr	r0, [r3, #0]
 800a9fe:	f7f9 ffe1 	bl	80049c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(__lcd->E->GPIOx, __lcd->E->GPIO_Pin_x, GPIO_PIN_SET);
 800aa02:	6823      	ldr	r3, [r4, #0]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	2201      	movs	r2, #1
 800aa08:	8899      	ldrh	r1, [r3, #4]
 800aa0a:	6818      	ldr	r0, [r3, #0]
 800aa0c:	f7f9 ffda 	bl	80049c4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800aa10:	2001      	movs	r0, #1
 800aa12:	f7f9 fadb 	bl	8003fcc <HAL_Delay>
  HAL_GPIO_WritePin(__lcd->E->GPIOx, __lcd->E->GPIO_Pin_x, GPIO_PIN_RESET);
 800aa16:	6823      	ldr	r3, [r4, #0]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	8899      	ldrh	r1, [r3, #4]
 800aa1e:	6818      	ldr	r0, [r3, #0]
 800aa20:	f7f9 ffd0 	bl	80049c4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800aa24:	2001      	movs	r0, #1
 800aa26:	f7f9 fad1 	bl	8003fcc <HAL_Delay>
  HAL_GPIO_WritePin(__lcd->E->GPIOx, __lcd->E->GPIO_Pin_x, GPIO_PIN_SET);
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	8899      	ldrh	r1, [r3, #4]
 800aa32:	6818      	ldr	r0, [r3, #0]
  enable();
}
 800aa34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(__lcd->E->GPIOx, __lcd->E->GPIO_Pin_x, GPIO_PIN_SET);
 800aa38:	f7f9 bfc4 	b.w	80049c4 <HAL_GPIO_WritePin>
 800aa3c:	200001f8 	.word	0x200001f8

0800aa40 <sendCommand>:
  enable();
}
#endif

/* Sends a command byte to the LCD  */
void sendCommand(uint8_t cmd) {
 800aa40:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(__lcd->RS->GPIOx, __lcd->RS->GPIO_Pin_x, GPIO_PIN_RESET); // Command mode
 800aa42:	4d0c      	ldr	r5, [pc, #48]	; (800aa74 <sendCommand+0x34>)
 800aa44:	682b      	ldr	r3, [r5, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
void sendCommand(uint8_t cmd) {
 800aa48:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(__lcd->RS->GPIOx, __lcd->RS->GPIO_Pin_x, GPIO_PIN_RESET); // Command mode
 800aa4a:	8899      	ldrh	r1, [r3, #4]
 800aa4c:	6818      	ldr	r0, [r3, #0]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f7f9 ffb8 	bl	80049c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(__lcd->RW->GPIOx, __lcd->RW->GPIO_Pin_x, GPIO_PIN_RESET); // Write mode
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	6818      	ldr	r0, [r3, #0]
 800aa5c:	8899      	ldrh	r1, [r3, #4]
 800aa5e:	f7f9 ffb1 	bl	80049c4 <HAL_GPIO_WritePin>
  
  write4Bits(cmd >> 4);
 800aa62:	0920      	lsrs	r0, r4, #4
 800aa64:	f7ff ffaa 	bl	800a9bc <write4Bits>
  write4Bits(cmd);
 800aa68:	4620      	mov	r0, r4
  
}
 800aa6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  write4Bits(cmd);
 800aa6e:	f7ff bfa5 	b.w	800a9bc <write4Bits>
 800aa72:	bf00      	nop
 800aa74:	200001f8 	.word	0x200001f8

0800aa78 <sendData>:

/* Sends a data byte to the LCD  */
void sendData(uint8_t data) {
 800aa78:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(__lcd->RS->GPIOx, __lcd->RS->GPIO_Pin_x, GPIO_PIN_SET); // Data mode
 800aa7a:	4d0c      	ldr	r5, [pc, #48]	; (800aaac <sendData+0x34>)
 800aa7c:	682b      	ldr	r3, [r5, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
void sendData(uint8_t data) {
 800aa80:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(__lcd->RS->GPIOx, __lcd->RS->GPIO_Pin_x, GPIO_PIN_SET); // Data mode
 800aa82:	8899      	ldrh	r1, [r3, #4]
 800aa84:	6818      	ldr	r0, [r3, #0]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f7f9 ff9c 	bl	80049c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(__lcd->RW->GPIOx, __lcd->RW->GPIO_Pin_x, GPIO_PIN_RESET); // Write mode
 800aa8c:	682b      	ldr	r3, [r5, #0]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	6818      	ldr	r0, [r3, #0]
 800aa94:	8899      	ldrh	r1, [r3, #4]
 800aa96:	f7f9 ff95 	bl	80049c4 <HAL_GPIO_WritePin>
  
  write4Bits(data >> 4);
 800aa9a:	0920      	lsrs	r0, r4, #4
 800aa9c:	f7ff ff8e 	bl	800a9bc <write4Bits>
  write4Bits(data);
 800aaa0:	4620      	mov	r0, r4
}
 800aaa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  write4Bits(data);
 800aaa6:	f7ff bf89 	b.w	800a9bc <write4Bits>
 800aaaa:	bf00      	nop
 800aaac:	200001f8 	.word	0x200001f8

0800aab0 <LCD_init>:
LCD_TypeDef* LCD_init(PortPin_Map *RS, PortPin_Map *RW, PortPin_Map *E,
#ifdef EIGHT_BIT_MODE
              PortPin_Map *D0, PortPin_Map *D1, PortPin_Map *D2, PortPin_Map *D3,
#endif
              PortPin_Map *D4, PortPin_Map *D5, PortPin_Map *D6, PortPin_Map *D7)
{
 800aab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aab6:	4689      	mov	r9, r1
 800aab8:	4690      	mov	r8, r2
 800aaba:	461f      	mov	r7, r3
 800aabc:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
  LCD_TypeDef *ret;
  
  assert_param(RS != NULL);
 800aac0:	4682      	mov	sl, r0
 800aac2:	b918      	cbnz	r0, 800aacc <LCD_init+0x1c>
 800aac4:	2159      	movs	r1, #89	; 0x59
 800aac6:	481a      	ldr	r0, [pc, #104]	; (800ab30 <LCD_init+0x80>)
 800aac8:	f000 fab1 	bl	800b02e <assert_failed>
  assert_param(RW != NULL);
 800aacc:	f1b9 0f00 	cmp.w	r9, #0
 800aad0:	d103      	bne.n	800aada <LCD_init+0x2a>
 800aad2:	215a      	movs	r1, #90	; 0x5a
 800aad4:	4816      	ldr	r0, [pc, #88]	; (800ab30 <LCD_init+0x80>)
 800aad6:	f000 faaa 	bl	800b02e <assert_failed>
  assert_param(E != NULL);
 800aada:	f1b8 0f00 	cmp.w	r8, #0
 800aade:	d103      	bne.n	800aae8 <LCD_init+0x38>
 800aae0:	215b      	movs	r1, #91	; 0x5b
 800aae2:	4813      	ldr	r0, [pc, #76]	; (800ab30 <LCD_init+0x80>)
 800aae4:	f000 faa3 	bl	800b02e <assert_failed>
  assert_param(D1 != NULL);
  assert_param(D2 != NULL);
  assert_param(D3 != NULL);
#endif
  
  assert_param(D4 != NULL);
 800aae8:	b91f      	cbnz	r7, 800aaf2 <LCD_init+0x42>
 800aaea:	2164      	movs	r1, #100	; 0x64
 800aaec:	4810      	ldr	r0, [pc, #64]	; (800ab30 <LCD_init+0x80>)
 800aaee:	f000 fa9e 	bl	800b02e <assert_failed>
  assert_param(D5 != NULL);
 800aaf2:	b91e      	cbnz	r6, 800aafc <LCD_init+0x4c>
 800aaf4:	2165      	movs	r1, #101	; 0x65
 800aaf6:	480e      	ldr	r0, [pc, #56]	; (800ab30 <LCD_init+0x80>)
 800aaf8:	f000 fa99 	bl	800b02e <assert_failed>
  assert_param(D6 != NULL);
 800aafc:	b91d      	cbnz	r5, 800ab06 <LCD_init+0x56>
 800aafe:	2166      	movs	r1, #102	; 0x66
 800ab00:	480b      	ldr	r0, [pc, #44]	; (800ab30 <LCD_init+0x80>)
 800ab02:	f000 fa94 	bl	800b02e <assert_failed>
  assert_param(D7 != NULL);
 800ab06:	b91c      	cbnz	r4, 800ab10 <LCD_init+0x60>
 800ab08:	2167      	movs	r1, #103	; 0x67
 800ab0a:	4809      	ldr	r0, [pc, #36]	; (800ab30 <LCD_init+0x80>)
 800ab0c:	f000 fa8f 	bl	800b02e <assert_failed>
  
  ret = calloc(1, sizeof(LCD_TypeDef));
 800ab10:	2120      	movs	r1, #32
 800ab12:	2001      	movs	r0, #1
 800ab14:	f000 fe5a 	bl	800b7cc <calloc>
  if(!ret)
 800ab18:	b140      	cbz	r0, 800ab2c <LCD_init+0x7c>
    return NULL;
  
  ret->RS = RS;
  ret->RW = RW;
 800ab1a:	e9c0 a900 	strd	sl, r9, [r0]
  ret->D1 = D1;
  ret->D2 = D2;
  ret->D3 = D3;
#endif
  
  ret->D4 = D4;
 800ab1e:	e9c0 8702 	strd	r8, r7, [r0, #8]
  ret->D5 = D5;
  ret->D6 = D6;
 800ab22:	e9c0 6504 	strd	r6, r5, [r0, #16]
  ret->D7 = D7;
  
  ret->currLine = ret->currCol = 0;
 800ab26:	2300      	movs	r3, #0
  ret->D7 = D7;
 800ab28:	6184      	str	r4, [r0, #24]
  ret->currLine = ret->currCol = 0;
 800ab2a:	8383      	strh	r3, [r0, #28]
  
  return ret;
}
 800ab2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab30:	0800ce48 	.word	0x0800ce48

0800ab34 <LCD_clearScreen>:
  LCD_home(lcd);
  
  HAL_Delay(500);
}

void LCD_clearScreen(LCD_TypeDef* lcd) {
 800ab34:	b510      	push	{r4, lr}
  assert_param(lcd != NULL);
 800ab36:	4604      	mov	r4, r0
 800ab38:	b918      	cbnz	r0, 800ab42 <LCD_clearScreen+0xe>
 800ab3a:	21a0      	movs	r1, #160	; 0xa0
 800ab3c:	4806      	ldr	r0, [pc, #24]	; (800ab58 <LCD_clearScreen+0x24>)
 800ab3e:	f000 fa76 	bl	800b02e <assert_failed>
  __lcd = lcd; // NOTE: This line must exist for all user APIs.
 800ab42:	4b06      	ldr	r3, [pc, #24]	; (800ab5c <LCD_clearScreen+0x28>)
  sendCommand(LCD_CLEARDISPLAY);
 800ab44:	2001      	movs	r0, #1
  __lcd = lcd; // NOTE: This line must exist for all user APIs.
 800ab46:	601c      	str	r4, [r3, #0]
  sendCommand(LCD_CLEARDISPLAY);
 800ab48:	f7ff ff7a 	bl	800aa40 <sendCommand>
  HAL_Delay(1);
 800ab4c:	2001      	movs	r0, #1
}
 800ab4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_Delay(1);
 800ab52:	f7f9 ba3b 	b.w	8003fcc <HAL_Delay>
 800ab56:	bf00      	nop
 800ab58:	0800ce48 	.word	0x0800ce48
 800ab5c:	200001f8 	.word	0x200001f8

0800ab60 <LCD_home>:

void LCD_home(LCD_TypeDef* lcd) {
 800ab60:	b510      	push	{r4, lr}
  assert_param(lcd != NULL);
 800ab62:	4604      	mov	r4, r0
 800ab64:	b918      	cbnz	r0, 800ab6e <LCD_home+0xe>
 800ab66:	21a7      	movs	r1, #167	; 0xa7
 800ab68:	4806      	ldr	r0, [pc, #24]	; (800ab84 <LCD_home+0x24>)
 800ab6a:	f000 fa60 	bl	800b02e <assert_failed>
  __lcd = lcd; // NOTE: This line must exist for all user APIs.
 800ab6e:	4b06      	ldr	r3, [pc, #24]	; (800ab88 <LCD_home+0x28>)
  sendCommand(LCD_RETURNHOME);
 800ab70:	2002      	movs	r0, #2
  __lcd = lcd; // NOTE: This line must exist for all user APIs.
 800ab72:	601c      	str	r4, [r3, #0]
  sendCommand(LCD_RETURNHOME);
 800ab74:	f7ff ff64 	bl	800aa40 <sendCommand>
  HAL_Delay(1);
 800ab78:	2001      	movs	r0, #1
 800ab7a:	f7f9 fa27 	bl	8003fcc <HAL_Delay>
  lcd->currCol = lcd->currLine = 0;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	83a3      	strh	r3, [r4, #28]
}
 800ab82:	bd10      	pop	{r4, pc}
 800ab84:	0800ce48 	.word	0x0800ce48
 800ab88:	200001f8 	.word	0x200001f8

0800ab8c <LCD_begin>:
void LCD_begin(LCD_TypeDef* lcd) {
 800ab8c:	b510      	push	{r4, lr}
  assert_param(lcd != NULL);
 800ab8e:	4604      	mov	r4, r0
 800ab90:	b918      	cbnz	r0, 800ab9a <LCD_begin+0xe>
 800ab92:	2183      	movs	r1, #131	; 0x83
 800ab94:	481b      	ldr	r0, [pc, #108]	; (800ac04 <LCD_begin+0x78>)
 800ab96:	f000 fa4a 	bl	800b02e <assert_failed>
  __lcd = lcd; // NOTE: This line must exist for all user APIs.
 800ab9a:	4b1b      	ldr	r3, [pc, #108]	; (800ac08 <LCD_begin+0x7c>)
 800ab9c:	601c      	str	r4, [r3, #0]
  HAL_GPIO_WritePin(lcd->E->GPIOx, lcd->E->GPIO_Pin_x, GPIO_PIN_RESET);
 800ab9e:	68a3      	ldr	r3, [r4, #8]
 800aba0:	2200      	movs	r2, #0
 800aba2:	8899      	ldrh	r1, [r3, #4]
 800aba4:	6818      	ldr	r0, [r3, #0]
 800aba6:	f7f9 ff0d 	bl	80049c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd->RS->GPIOx, lcd->RS->GPIO_Pin_x, GPIO_PIN_RESET);
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	2200      	movs	r2, #0
 800abae:	8899      	ldrh	r1, [r3, #4]
 800abb0:	6818      	ldr	r0, [r3, #0]
 800abb2:	f7f9 ff07 	bl	80049c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd->RW->GPIOx, lcd->RW->GPIO_Pin_x, GPIO_PIN_RESET);
 800abb6:	6863      	ldr	r3, [r4, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	6818      	ldr	r0, [r3, #0]
 800abbc:	8899      	ldrh	r1, [r3, #4]
 800abbe:	f7f9 ff01 	bl	80049c4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800abc2:	200a      	movs	r0, #10
 800abc4:	f7f9 fa02 	bl	8003fcc <HAL_Delay>
  sendCommand(LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 800abc8:	2028      	movs	r0, #40	; 0x28
 800abca:	f7ff ff39 	bl	800aa40 <sendCommand>
  HAL_Delay(5);
 800abce:	2005      	movs	r0, #5
 800abd0:	f7f9 f9fc 	bl	8003fcc <HAL_Delay>
  sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_BLINKON | LCD_CURSORON);
 800abd4:	200f      	movs	r0, #15
 800abd6:	f7ff ff33 	bl	800aa40 <sendCommand>
  HAL_Delay(5);
 800abda:	2005      	movs	r0, #5
 800abdc:	f7f9 f9f6 	bl	8003fcc <HAL_Delay>
  sendCommand(LCD_ENTRYMODESET | LCD_ENTRYRIGHT | LCD_ENTRYSHIFTDECREMENT);
 800abe0:	2004      	movs	r0, #4
 800abe2:	f7ff ff2d 	bl	800aa40 <sendCommand>
  HAL_Delay(5);
 800abe6:	2005      	movs	r0, #5
 800abe8:	f7f9 f9f0 	bl	8003fcc <HAL_Delay>
  LCD_clearScreen(lcd);
 800abec:	4620      	mov	r0, r4
 800abee:	f7ff ffa1 	bl	800ab34 <LCD_clearScreen>
  LCD_home(lcd);
 800abf2:	4620      	mov	r0, r4
 800abf4:	f7ff ffb4 	bl	800ab60 <LCD_home>
  HAL_Delay(500);
 800abf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 800abfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_Delay(500);
 800ac00:	f7f9 b9e4 	b.w	8003fcc <HAL_Delay>
 800ac04:	0800ce48 	.word	0x0800ce48
 800ac08:	200001f8 	.word	0x200001f8

0800ac0c <LCD_setCursor>:

HAL_StatusTypeDef LCD_setCursor(LCD_TypeDef* lcd, uint8_t line, uint8_t col) {
 800ac0c:	b570      	push	{r4, r5, r6, lr}
 800ac0e:	460e      	mov	r6, r1
 800ac10:	4614      	mov	r4, r2
  assert_param(lcd != NULL);
 800ac12:	4605      	mov	r5, r0
 800ac14:	b918      	cbnz	r0, 800ac1e <LCD_setCursor+0x12>
 800ac16:	21af      	movs	r1, #175	; 0xaf
 800ac18:	480b      	ldr	r0, [pc, #44]	; (800ac48 <LCD_setCursor+0x3c>)
 800ac1a:	f000 fa08 	bl	800b02e <assert_failed>
  
  // Making sure lines and columns are taken care of.
  uint8_t temp_col;
  col = col % 16;
  temp_col = col;
  if(line == 1)
 800ac1e:	2e01      	cmp	r6, #1
  col = col % 16;
 800ac20:	f004 040f 	and.w	r4, r4, #15
  __lcd = lcd; // NOTE: This line must exist for all user APIs.
 800ac24:	4b09      	ldr	r3, [pc, #36]	; (800ac4c <LCD_setCursor+0x40>)
    temp_col += 0x40;
 800ac26:	bf0c      	ite	eq
 800ac28:	f104 0040 	addeq.w	r0, r4, #64	; 0x40
  temp_col = col;
 800ac2c:	4620      	movne	r0, r4
  
  sendCommand(LCD_SETDDRAMADDR | temp_col);
 800ac2e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  __lcd = lcd; // NOTE: This line must exist for all user APIs.
 800ac32:	601d      	str	r5, [r3, #0]
  sendCommand(LCD_SETDDRAMADDR | temp_col);
 800ac34:	f7ff ff04 	bl	800aa40 <sendCommand>
  HAL_Delay(1);
 800ac38:	2001      	movs	r0, #1
 800ac3a:	f7f9 f9c7 	bl	8003fcc <HAL_Delay>
  lcd->currLine = line;
 800ac3e:	772e      	strb	r6, [r5, #28]
  lcd->currCol = col;
 800ac40:	776c      	strb	r4, [r5, #29]
  
  return HAL_OK;
}
 800ac42:	2000      	movs	r0, #0
 800ac44:	bd70      	pop	{r4, r5, r6, pc}
 800ac46:	bf00      	nop
 800ac48:	0800ce48 	.word	0x0800ce48
 800ac4c:	200001f8 	.word	0x200001f8

0800ac50 <LCD_putchar>:

void LCD_putchar(LCD_TypeDef* lcd, uint8_t c) {
 800ac50:	b538      	push	{r3, r4, r5, lr}
 800ac52:	460d      	mov	r5, r1
  assert_param(lcd != NULL);
 800ac54:	4604      	mov	r4, r0
 800ac56:	b918      	cbnz	r0, 800ac60 <LCD_putchar+0x10>
 800ac58:	21c2      	movs	r1, #194	; 0xc2
 800ac5a:	4811      	ldr	r0, [pc, #68]	; (800aca0 <LCD_putchar+0x50>)
 800ac5c:	f000 f9e7 	bl	800b02e <assert_failed>
  __lcd = lcd; // NOTE: This line must exist for all user APIs.
 800ac60:	4b10      	ldr	r3, [pc, #64]	; (800aca4 <LCD_putchar+0x54>)
  sendData(c);
 800ac62:	4628      	mov	r0, r5
  __lcd = lcd; // NOTE: This line must exist for all user APIs.
 800ac64:	601c      	str	r4, [r3, #0]
  sendData(c);
 800ac66:	f7ff ff07 	bl	800aa78 <sendData>
  HAL_Delay(1);
 800ac6a:	2001      	movs	r0, #1
 800ac6c:	f7f9 f9ae 	bl	8003fcc <HAL_Delay>
  
  // Move cursor forward 1-step.
  if((lcd->currLine == 0) && (lcd->currCol == 15))
 800ac70:	8ba3      	ldrh	r3, [r4, #28]
 800ac72:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ac76:	d106      	bne.n	800ac86 <LCD_putchar+0x36>
    LCD_setCursor(lcd, 1, 0);
 800ac78:	2200      	movs	r2, #0
 800ac7a:	2101      	movs	r1, #1
  else if((lcd->currLine == 1) && (lcd->currCol == 15))
    LCD_setCursor(lcd, 0, 0);
  else
    LCD_setCursor(lcd, lcd->currLine, lcd->currCol + 1);
 800ac7c:	4620      	mov	r0, r4
}
 800ac7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    LCD_setCursor(lcd, lcd->currLine, lcd->currCol + 1);
 800ac82:	f7ff bfc3 	b.w	800ac0c <LCD_setCursor>
  else if((lcd->currLine == 1) && (lcd->currCol == 15))
 800ac86:	f640 7201 	movw	r2, #3841	; 0xf01
 800ac8a:	4293      	cmp	r3, r2
    LCD_setCursor(lcd, lcd->currLine, lcd->currCol + 1);
 800ac8c:	bf1b      	ittet	ne
 800ac8e:	7f62      	ldrbne	r2, [r4, #29]
 800ac90:	7f21      	ldrbne	r1, [r4, #28]
    LCD_setCursor(lcd, 0, 0);
 800ac92:	2200      	moveq	r2, #0
    LCD_setCursor(lcd, lcd->currLine, lcd->currCol + 1);
 800ac94:	3201      	addne	r2, #1
    LCD_setCursor(lcd, 0, 0);
 800ac96:	bf0c      	ite	eq
 800ac98:	4611      	moveq	r1, r2
    LCD_setCursor(lcd, lcd->currLine, lcd->currCol + 1);
 800ac9a:	b2d2      	uxtbne	r2, r2
 800ac9c:	e7ee      	b.n	800ac7c <LCD_putchar+0x2c>
 800ac9e:	bf00      	nop
 800aca0:	0800ce48 	.word	0x0800ce48
 800aca4:	200001f8 	.word	0x200001f8

0800aca8 <LCD_putstr>:

void LCD_putstr(LCD_TypeDef* lcd, uint8_t* s) {
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	460c      	mov	r4, r1
  assert_param(lcd != NULL);
 800acac:	4605      	mov	r5, r0
 800acae:	b918      	cbnz	r0, 800acb8 <LCD_putstr+0x10>
 800acb0:	21d1      	movs	r1, #209	; 0xd1
 800acb2:	4809      	ldr	r0, [pc, #36]	; (800acd8 <LCD_putstr+0x30>)
 800acb4:	f000 f9bb 	bl	800b02e <assert_failed>
  assert_param(s != NULL);
 800acb8:	b91c      	cbnz	r4, 800acc2 <LCD_putstr+0x1a>
 800acba:	21d2      	movs	r1, #210	; 0xd2
 800acbc:	4806      	ldr	r0, [pc, #24]	; (800acd8 <LCD_putstr+0x30>)
 800acbe:	f000 f9b6 	bl	800b02e <assert_failed>
  __lcd = lcd; // NOTE: This line must exist for all user APIs.
 800acc2:	4b06      	ldr	r3, [pc, #24]	; (800acdc <LCD_putstr+0x34>)
 800acc4:	3c01      	subs	r4, #1
 800acc6:	601d      	str	r5, [r3, #0]
  
  for(; *s != 0; ++s) {
 800acc8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800accc:	b901      	cbnz	r1, 800acd0 <LCD_putstr+0x28>
    LCD_putchar(lcd, *s);
  }
}
 800acce:	bd38      	pop	{r3, r4, r5, pc}
    LCD_putchar(lcd, *s);
 800acd0:	4628      	mov	r0, r5
 800acd2:	f7ff ffbd 	bl	800ac50 <LCD_putchar>
 800acd6:	e7f7      	b.n	800acc8 <LCD_putstr+0x20>
 800acd8:	0800ce48 	.word	0x0800ce48
 800acdc:	200001f8 	.word	0x200001f8

0800ace0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ace0:	b530      	push	{r4, r5, lr}
 800ace2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ace4:	2100      	movs	r1, #0
 800ace6:	4b27      	ldr	r3, [pc, #156]	; (800ad84 <SystemClock_Config+0xa4>)
 800ace8:	9101      	str	r1, [sp, #4]
 800acea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800acf0:	641a      	str	r2, [r3, #64]	; 0x40
 800acf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acf8:	9301      	str	r3, [sp, #4]
 800acfa:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800acfc:	4b22      	ldr	r3, [pc, #136]	; (800ad88 <SystemClock_Config+0xa8>)
 800acfe:	9102      	str	r1, [sp, #8]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad06:	601a      	str	r2, [r3, #0]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad0e:	9302      	str	r3, [sp, #8]
 800ad10:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ad12:	2201      	movs	r2, #1
 800ad14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ad18:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ad1a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ad1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ad22:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 192;
 800ad26:	2108      	movs	r1, #8
 800ad28:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800ad2a:	2504      	movs	r5, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ad2c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 192;
 800ad2e:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ad32:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800ad34:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ad36:	f7fb fab1 	bl	800629c <HAL_RCC_OscConfig>
 800ad3a:	b100      	cbz	r0, 800ad3e <SystemClock_Config+0x5e>
 800ad3c:	e7fe      	b.n	800ad3c <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ad3e:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ad40:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800ad44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ad48:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ad4a:	e9cd 3006 	strd	r3, r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800ad4e:	2103      	movs	r1, #3
 800ad50:	a803      	add	r0, sp, #12
 800ad52:	f7fb fcc9 	bl	80066e8 <HAL_RCC_ClockConfig>
 800ad56:	4604      	mov	r4, r0
 800ad58:	b100      	cbz	r0, 800ad5c <SystemClock_Config+0x7c>
 800ad5a:	e7fe      	b.n	800ad5a <SystemClock_Config+0x7a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800ad5c:	f7fb fdb6 	bl	80068cc <HAL_RCC_GetHCLKFreq>
 800ad60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ad64:	fbb0 f0f3 	udiv	r0, r0, r3
 800ad68:	f7f9 f9bc 	bl	80040e4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	f7f9 f9cf 	bl	8004110 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800ad72:	4622      	mov	r2, r4
 800ad74:	4621      	mov	r1, r4
 800ad76:	f04f 30ff 	mov.w	r0, #4294967295
 800ad7a:	f7f9 f959 	bl	8004030 <HAL_NVIC_SetPriority>
}
 800ad7e:	b015      	add	sp, #84	; 0x54
 800ad80:	bd30      	pop	{r4, r5, pc}
 800ad82:	bf00      	nop
 800ad84:	40023800 	.word	0x40023800
 800ad88:	40007000 	.word	0x40007000

0800ad8c <MX_USB_HOST_StateChanged>:
/* USER CODE BEGIN 4 */



void MX_USB_HOST_StateChanged(ApplicationTypeDef appState) {
	applicationState = appState;
 800ad8c:	4b01      	ldr	r3, [pc, #4]	; (800ad94 <MX_USB_HOST_StateChanged+0x8>)
 800ad8e:	7018      	strb	r0, [r3, #0]
}
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	200001fc 	.word	0x200001fc

0800ad98 <_write>:

int _write (int fd, const void *buf, size_t count) {
 800ad98:	b510      	push	{r4, lr}
 800ad9a:	4608      	mov	r0, r1
 800ad9c:	4614      	mov	r4, r2
	// Write to UART Here
	uart_write(buf, count);
 800ad9e:	4611      	mov	r1, r2
 800ada0:	f000 fb0e 	bl	800b3c0 <uart_write>
	return count;
}
 800ada4:	4620      	mov	r0, r4
 800ada6:	bd10      	pop	{r4, pc}

0800ada8 <mountVolume>:
void mountVolume() {
	FRESULT res = f_mount(&fs, "0:/", 0);
 800ada8:	4906      	ldr	r1, [pc, #24]	; (800adc4 <mountVolume+0x1c>)
 800adaa:	4807      	ldr	r0, [pc, #28]	; (800adc8 <mountVolume+0x20>)
void mountVolume() {
 800adac:	b508      	push	{r3, lr}
	FRESULT res = f_mount(&fs, "0:/", 0);
 800adae:	2200      	movs	r2, #0
 800adb0:	f7ff f9ca 	bl	800a148 <f_mount>
	if (res != FR_OK) {
 800adb4:	4601      	mov	r1, r0
 800adb6:	b120      	cbz	r0, 800adc2 <mountVolume+0x1a>
		printf("Error mounting filesystem %d\r\n", res);
 800adb8:	4804      	ldr	r0, [pc, #16]	; (800adcc <mountVolume+0x24>)
	}
}
 800adba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printf("Error mounting filesystem %d\r\n", res);
 800adbe:	f000 be05 	b.w	800b9cc <iprintf>
}
 800adc2:	bd08      	pop	{r3, pc}
 800adc4:	0800cebd 	.word	0x0800cebd
 800adc8:	200007f8 	.word	0x200007f8
 800adcc:	0800cec1 	.word	0x0800cec1

0800add0 <driveDisplay>:

void driveDisplay(char *filename){			// Scrittura brano in riproduzione + crop string
 800add0:	b530      	push	{r4, r5, lr}
	LCD_setCursor(lcd, 0, 0);
 800add2:	4c1b      	ldr	r4, [pc, #108]	; (800ae40 <driveDisplay+0x70>)
 800add4:	2200      	movs	r2, #0
 800add6:	4611      	mov	r1, r2
void driveDisplay(char *filename){			// Scrittura brano in riproduzione + crop string
 800add8:	b085      	sub	sp, #20
 800adda:	4605      	mov	r5, r0
	LCD_setCursor(lcd, 0, 0);
 800addc:	6820      	ldr	r0, [r4, #0]
 800adde:	f7ff ff15 	bl	800ac0c <LCD_setCursor>
	LCD_putstr(lcd, (uint8_t*)clearVar);
 800ade2:	4918      	ldr	r1, [pc, #96]	; (800ae44 <driveDisplay+0x74>)
 800ade4:	6820      	ldr	r0, [r4, #0]
 800ade6:	f7ff ff5f 	bl	800aca8 <LCD_putstr>
	HAL_Delay(500);
 800adea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800adee:	f7f9 f8ed 	bl	8003fcc <HAL_Delay>
	LCD_home(lcd);
 800adf2:	6820      	ldr	r0, [r4, #0]
 800adf4:	f7ff feb4 	bl	800ab60 <LCD_home>
	HAL_Delay(300);
 800adf8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800adfc:	f7f9 f8e6 	bl	8003fcc <HAL_Delay>
	if(strlen(filename) > 16){
 800ae00:	4628      	mov	r0, r5
 800ae02:	f7f8 fb1d 	bl	8003440 <strlen>
 800ae06:	2810      	cmp	r0, #16
 800ae08:	d918      	bls.n	800ae3c <driveDisplay+0x6c>
		char tmp[16];
		for(int i=0; i<15; i++)
 800ae0a:	2300      	movs	r3, #0
			tmp[i] = filename[i];
 800ae0c:	5cea      	ldrb	r2, [r5, r3]
 800ae0e:	f80d 2003 	strb.w	r2, [sp, r3]
		for(int i=0; i<15; i++)
 800ae12:	3301      	adds	r3, #1
 800ae14:	2b0f      	cmp	r3, #15
 800ae16:	d1f9      	bne.n	800ae0c <driveDisplay+0x3c>
		tmp[15]='\0';
 800ae18:	2300      	movs	r3, #0
 800ae1a:	f88d 300f 	strb.w	r3, [sp, #15]
		LCD_putstr(lcd, (uint8_t*)tmp);
 800ae1e:	4669      	mov	r1, sp
	}
	else
		LCD_putstr(lcd, (uint8_t*)filename);
 800ae20:	6820      	ldr	r0, [r4, #0]
 800ae22:	f7ff ff41 	bl	800aca8 <LCD_putstr>
	LCD_setCursor(lcd, 1, 0);
 800ae26:	2200      	movs	r2, #0
 800ae28:	2101      	movs	r1, #1
 800ae2a:	6820      	ldr	r0, [r4, #0]
 800ae2c:	f7ff feee 	bl	800ac0c <LCD_setCursor>
	LCD_putstr(lcd, (uint8_t*)"In riproduzione");
 800ae30:	4905      	ldr	r1, [pc, #20]	; (800ae48 <driveDisplay+0x78>)
 800ae32:	6820      	ldr	r0, [r4, #0]
 800ae34:	f7ff ff38 	bl	800aca8 <LCD_putstr>
}
 800ae38:	b005      	add	sp, #20
 800ae3a:	bd30      	pop	{r4, r5, pc}
		LCD_putstr(lcd, (uint8_t*)filename);
 800ae3c:	4629      	mov	r1, r5
 800ae3e:	e7ef      	b.n	800ae20 <driveDisplay+0x50>
 800ae40:	200007f4 	.word	0x200007f4
 800ae44:	20000060 	.word	0x20000060
 800ae48:	0800ce55 	.word	0x0800ce55

0800ae4c <readSongs>:

void readSongs(){
 800ae4c:	b530      	push	{r4, r5, lr}
 800ae4e:	b0d5      	sub	sp, #340	; 0x154
	DIR rootdir;
	FILINFO finfo;
	FRESULT res = FR_OK;
	if ((res = f_opendir(&rootdir, "/")) != FR_OK) {
 800ae50:	491e      	ldr	r1, [pc, #120]	; (800aecc <readSongs+0x80>)
 800ae52:	a801      	add	r0, sp, #4
 800ae54:	f7ff fbba 	bl	800a5cc <f_opendir>
 800ae58:	4601      	mov	r1, r0
 800ae5a:	b960      	cbnz	r0, 800ae76 <readSongs+0x2a>
//			if(strcmp(finfo.fname, prevName) == 0) continue;
//			strcpy(prevName, finfo.fname);
			driveDisplay(finfo.fname);			// chiamata a funzione per pilotare LCD
			playMP3Song(finfo.fname);
			while(f_eof(&currentSong)==0){		// controllo dello User Button
				if(BUTTON){
 800ae5c:	4c1c      	ldr	r4, [pc, #112]	; (800aed0 <readSongs+0x84>)
	while (f_readdir(&rootdir, &finfo) == FR_OK){
 800ae5e:	a90e      	add	r1, sp, #56	; 0x38
 800ae60:	a801      	add	r0, sp, #4
 800ae62:	f7ff fbfa 	bl	800a65a <f_readdir>
 800ae66:	b948      	cbnz	r0, 800ae7c <readSongs+0x30>
		if (finfo.fname[0] == '\0'){
 800ae68:	f89d 104e 	ldrb.w	r1, [sp, #78]	; 0x4e
 800ae6c:	b941      	cbnz	r1, 800ae80 <readSongs+0x34>
			f_readdir(&rootdir, NULL);
 800ae6e:	a801      	add	r0, sp, #4
 800ae70:	f7ff fbf3 	bl	800a65a <f_readdir>
			continue;
 800ae74:	e7f3      	b.n	800ae5e <readSongs+0x12>
		printf("Error opening root directory %d\r\n", res);
 800ae76:	4817      	ldr	r0, [pc, #92]	; (800aed4 <readSongs+0x88>)
 800ae78:	f000 fda8 	bl	800b9cc <iprintf>
				playMP3Task();					// Riproduzione dello stream MP3
			}
			stopMP3Song();
		}
	}
}
 800ae7c:	b055      	add	sp, #340	; 0x154
 800ae7e:	bd30      	pop	{r4, r5, pc}
		if (finfo.fname[0] == '.') continue;	// salto curdir
 800ae80:	292e      	cmp	r1, #46	; 0x2e
 800ae82:	d0ec      	beq.n	800ae5e <readSongs+0x12>
		if (finfo.fattrib & AM_DIR) continue;	// salto directory
 800ae84:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800ae88:	06d9      	lsls	r1, r3, #27
 800ae8a:	d4e8      	bmi.n	800ae5e <readSongs+0x12>
		if (strstr(finfo.fname, ".mp3")){
 800ae8c:	4912      	ldr	r1, [pc, #72]	; (800aed8 <readSongs+0x8c>)
 800ae8e:	f10d 004e 	add.w	r0, sp, #78	; 0x4e
 800ae92:	f000 fe27 	bl	800bae4 <strstr>
 800ae96:	2800      	cmp	r0, #0
 800ae98:	d0e1      	beq.n	800ae5e <readSongs+0x12>
			driveDisplay(finfo.fname);			// chiamata a funzione per pilotare LCD
 800ae9a:	f10d 004e 	add.w	r0, sp, #78	; 0x4e
 800ae9e:	f7ff ff97 	bl	800add0 <driveDisplay>
			playMP3Song(finfo.fname);
 800aea2:	f10d 004e 	add.w	r0, sp, #78	; 0x4e
 800aea6:	f000 f8d9 	bl	800b05c <playMP3Song>
			while(f_eof(&currentSong)==0){		// controllo dello User Button
 800aeaa:	4d0c      	ldr	r5, [pc, #48]	; (800aedc <readSongs+0x90>)
 800aeac:	69aa      	ldr	r2, [r5, #24]
 800aeae:	68eb      	ldr	r3, [r5, #12]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d005      	beq.n	800aec0 <readSongs+0x74>
				if(BUTTON){
 800aeb4:	6923      	ldr	r3, [r4, #16]
 800aeb6:	07da      	lsls	r2, r3, #31
 800aeb8:	d505      	bpl.n	800aec6 <readSongs+0x7a>
					while(BUTTON);
 800aeba:	6923      	ldr	r3, [r4, #16]
 800aebc:	07db      	lsls	r3, r3, #31
 800aebe:	d4fc      	bmi.n	800aeba <readSongs+0x6e>
			stopMP3Song();
 800aec0:	f000 f924 	bl	800b10c <stopMP3Song>
 800aec4:	e7cb      	b.n	800ae5e <readSongs+0x12>
				playMP3Task();					// Riproduzione dello stream MP3
 800aec6:	f000 f92d 	bl	800b124 <playMP3Task>
 800aeca:	e7ef      	b.n	800aeac <readSongs+0x60>
 800aecc:	0800cebf 	.word	0x0800cebf
 800aed0:	40020000 	.word	0x40020000
 800aed4:	0800cee0 	.word	0x0800cee0
 800aed8:	0800cf02 	.word	0x0800cf02
 800aedc:	20002f2c 	.word	0x20002f2c

0800aee0 <main>:
{
 800aee0:	b5f0      	push	{r4, r5, r6, r7, lr}
  PortPin_Map LCD_RS = {.GPIOx = RS_GPIO_Port, .GPIO_Pin_x = RS_Pin};
 800aee2:	4c47      	ldr	r4, [pc, #284]	; (800b000 <main+0x120>)
{
 800aee4:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 800aee6:	f7f9 f845 	bl	8003f74 <HAL_Init>
  SystemClock_Config();
 800aeea:	f7ff fef9 	bl	800ace0 <SystemClock_Config>
  MX_GPIO_Init();
 800aeee:	f7ff fc71 	bl	800a7d4 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 800aef2:	f000 fa89 	bl	800b408 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 800aef6:	f7ff fc5d 	bl	800a7b4 <MX_FATFS_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800aefa:	2200      	movs	r2, #0
 800aefc:	2101      	movs	r1, #1
 800aefe:	4841      	ldr	r0, [pc, #260]	; (800b004 <main+0x124>)
 800af00:	f7f9 fd60 	bl	80049c4 <HAL_GPIO_WritePin>
  uart_init();
 800af04:	f000 fa1a 	bl	800b33c <uart_init>
  PortPin_Map LCD_RS = {.GPIOx = RS_GPIO_Port, .GPIO_Pin_x = RS_Pin};
 800af08:	e894 0003 	ldmia.w	r4, {r0, r1}
  PortPin_Map LCD_RW = {.GPIOx = RW_GPIO_Port, .GPIO_Pin_x = RW_Pin};
 800af0c:	f104 0308 	add.w	r3, r4, #8
  PortPin_Map LCD_RS = {.GPIOx = RS_GPIO_Port, .GPIO_Pin_x = RS_Pin};
 800af10:	ad04      	add	r5, sp, #16
 800af12:	e885 0003 	stmia.w	r5, {r0, r1}
  PortPin_Map LCD_RW = {.GPIOx = RW_GPIO_Port, .GPIO_Pin_x = RW_Pin};
 800af16:	e893 0003 	ldmia.w	r3, {r0, r1}
 800af1a:	ae06      	add	r6, sp, #24
  PortPin_Map LCD_E = {.GPIOx = E_GPIO_Port, .GPIO_Pin_x = E_Pin};
 800af1c:	f104 0310 	add.w	r3, r4, #16
  PortPin_Map LCD_RW = {.GPIOx = RW_GPIO_Port, .GPIO_Pin_x = RW_Pin};
 800af20:	e886 0003 	stmia.w	r6, {r0, r1}
  PortPin_Map LCD_E = {.GPIOx = E_GPIO_Port, .GPIO_Pin_x = E_Pin};
 800af24:	e893 0003 	ldmia.w	r3, {r0, r1}
 800af28:	aa08      	add	r2, sp, #32
 800af2a:	e882 0003 	stmia.w	r2, {r0, r1}
  PortPin_Map LCD_D4 = {.GPIOx = D4_GPIO_Port, .GPIO_Pin_x = D4_Pin};
 800af2e:	f104 0118 	add.w	r1, r4, #24
 800af32:	c903      	ldmia	r1, {r0, r1}
 800af34:	ab0a      	add	r3, sp, #40	; 0x28
 800af36:	e883 0003 	stmia.w	r3, {r0, r1}
  PortPin_Map LCD_D5 = {.GPIOx = D5_GPIO_Port, .GPIO_Pin_x = D5_Pin};
 800af3a:	f104 0120 	add.w	r1, r4, #32
 800af3e:	c903      	ldmia	r1, {r0, r1}
 800af40:	af0c      	add	r7, sp, #48	; 0x30
 800af42:	e887 0003 	stmia.w	r7, {r0, r1}
  PortPin_Map LCD_D6 = {.GPIOx = D6_GPIO_Port, .GPIO_Pin_x = D6_Pin};
 800af46:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800af4a:	c903      	ldmia	r1, {r0, r1}
 800af4c:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
  PortPin_Map LCD_D7 = {.GPIOx = D7_GPIO_Port, .GPIO_Pin_x = D7_Pin};
 800af50:	3430      	adds	r4, #48	; 0x30
  PortPin_Map LCD_D6 = {.GPIOx = D6_GPIO_Port, .GPIO_Pin_x = D6_Pin};
 800af52:	e88c 0003 	stmia.w	ip, {r0, r1}
  PortPin_Map LCD_D7 = {.GPIOx = D7_GPIO_Port, .GPIO_Pin_x = D7_Pin};
 800af56:	e894 0003 	ldmia.w	r4, {r0, r1}
 800af5a:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
 800af5e:	e88e 0003 	stmia.w	lr, {r0, r1}
  lcd = LCD_init(&LCD_RS, &LCD_RW, &LCD_E, &LCD_D4, &LCD_D5, &LCD_D6, &LCD_D7);
 800af62:	9700      	str	r7, [sp, #0]
 800af64:	4631      	mov	r1, r6
 800af66:	4628      	mov	r0, r5
 800af68:	e9cd ce01 	strd	ip, lr, [sp, #4]
 800af6c:	f7ff fda0 	bl	800aab0 <LCD_init>
 800af70:	4c25      	ldr	r4, [pc, #148]	; (800b008 <main+0x128>)
 800af72:	6020      	str	r0, [r4, #0]
  if(!lcd)
 800af74:	2800      	cmp	r0, #0
 800af76:	d03f      	beq.n	800aff8 <main+0x118>
  LCD_begin(lcd);
 800af78:	f7ff fe08 	bl	800ab8c <LCD_begin>
  HAL_Delay(300);
 800af7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800af80:	f7f9 f824 	bl	8003fcc <HAL_Delay>
  LCD_clearScreen(lcd);
 800af84:	6820      	ldr	r0, [r4, #0]
    if (localState != applicationState) {
 800af86:	4d21      	ldr	r5, [pc, #132]	; (800b00c <main+0x12c>)
       		printf("Unknown state\r\n");
 800af88:	4f21      	ldr	r7, [pc, #132]	; (800b010 <main+0x130>)
  LCD_clearScreen(lcd);
 800af8a:	f7ff fdd3 	bl	800ab34 <LCD_clearScreen>
  LCD_putstr(lcd, (uint8_t*)clearVar);
 800af8e:	4921      	ldr	r1, [pc, #132]	; (800b014 <main+0x134>)
 800af90:	6820      	ldr	r0, [r4, #0]
 800af92:	f7ff fe89 	bl	800aca8 <LCD_putstr>
  HAL_Delay(300);
 800af96:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800af9a:	f7f9 f817 	bl	8003fcc <HAL_Delay>
  LCD_home(lcd);
 800af9e:	6820      	ldr	r0, [r4, #0]
 800afa0:	f7ff fdde 	bl	800ab60 <LCD_home>
  LCD_putstr(lcd, (uint8_t*)"STM32 Mp3 Reader");
 800afa4:	6820      	ldr	r0, [r4, #0]
 800afa6:	491c      	ldr	r1, [pc, #112]	; (800b018 <main+0x138>)
 800afa8:	f7ff fe7e 	bl	800aca8 <LCD_putstr>
  HAL_Delay(3000);
 800afac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800afb0:	f7f9 f80c 	bl	8003fcc <HAL_Delay>
  ApplicationTypeDef localState = APPLICATION_IDLE;
 800afb4:	2400      	movs	r4, #0
 800afb6:	462e      	mov	r6, r5
    MX_USB_HOST_Process();
 800afb8:	f000 fa3c 	bl	800b434 <MX_USB_HOST_Process>
    if (localState != applicationState) {
 800afbc:	782b      	ldrb	r3, [r5, #0]
 800afbe:	429c      	cmp	r4, r3
 800afc0:	d0fa      	beq.n	800afb8 <main+0xd8>
           switch (applicationState) {
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d816      	bhi.n	800aff4 <main+0x114>
 800afc6:	e8df f003 	tbb	[pc, r3]
 800afca:	0602      	.short	0x0602
 800afcc:	1108      	.short	0x1108
       		printf("Idle state\r\n");
 800afce:	4813      	ldr	r0, [pc, #76]	; (800b01c <main+0x13c>)
       		printf("Unknown state\r\n");
 800afd0:	f000 fd70 	bl	800bab4 <puts>
           	break;
 800afd4:	e008      	b.n	800afe8 <main+0x108>
       		printf("Start state\r\n");
 800afd6:	4812      	ldr	r0, [pc, #72]	; (800b020 <main+0x140>)
 800afd8:	e7fa      	b.n	800afd0 <main+0xf0>
       		printf("Ready state\r\n");
 800afda:	4812      	ldr	r0, [pc, #72]	; (800b024 <main+0x144>)
 800afdc:	f000 fd6a 	bl	800bab4 <puts>
       		mountVolume();
 800afe0:	f7ff fee2 	bl	800ada8 <mountVolume>
       		readSongs();
 800afe4:	f7ff ff32 	bl	800ae4c <readSongs>
           localState = applicationState;
 800afe8:	7834      	ldrb	r4, [r6, #0]
 800afea:	e7e5      	b.n	800afb8 <main+0xd8>
           	stopMP3Song();
 800afec:	f000 f88e 	bl	800b10c <stopMP3Song>
       		printf("Disconnect state\r\n");
 800aff0:	480d      	ldr	r0, [pc, #52]	; (800b028 <main+0x148>)
 800aff2:	e7ed      	b.n	800afd0 <main+0xf0>
       		printf("Unknown state\r\n");
 800aff4:	4638      	mov	r0, r7
 800aff6:	e7eb      	b.n	800afd0 <main+0xf0>
}
 800aff8:	2001      	movs	r0, #1
 800affa:	b013      	add	sp, #76	; 0x4c
 800affc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800affe:	bf00      	nop
 800b000:	0800c758 	.word	0x0800c758
 800b004:	40020800 	.word	0x40020800
 800b008:	200007f4 	.word	0x200007f4
 800b00c:	200001fc 	.word	0x200001fc
 800b010:	0800ceae 	.word	0x0800ceae
 800b014:	20000060 	.word	0x20000060
 800b018:	0800ce65 	.word	0x0800ce65
 800b01c:	0800ce76 	.word	0x0800ce76
 800b020:	0800ce82 	.word	0x0800ce82
 800b024:	0800ce8f 	.word	0x0800ce8f
 800b028:	0800ce9c 	.word	0x0800ce9c

0800b02c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800b02c:	e7fe      	b.n	800b02c <_Error_Handler>

0800b02e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
 800b02e:	e7fe      	b.n	800b02e <assert_failed>

0800b030 <getDataFromFile>:
		rc = -1;
	}
	return rc;
}

static unsigned int getDataFromFile(void* mp3data, unsigned int size, void* token) {
 800b030:	b507      	push	{r0, r1, r2, lr}
	unsigned int read;

	if (f_read(&currentSong, mp3data, size, &read) != FR_OK)
 800b032:	460a      	mov	r2, r1
 800b034:	ab01      	add	r3, sp, #4
 800b036:	4601      	mov	r1, r0
 800b038:	4806      	ldr	r0, [pc, #24]	; (800b054 <getDataFromFile+0x24>)
 800b03a:	f7ff f9c1 	bl	800a3c0 <f_read>
 800b03e:	b130      	cbz	r0, 800b04e <getDataFromFile+0x1e>
	{
		printf("error reading file\r\n");
 800b040:	4805      	ldr	r0, [pc, #20]	; (800b058 <getDataFromFile+0x28>)
 800b042:	f000 fd37 	bl	800bab4 <puts>
		return 0;
 800b046:	2000      	movs	r0, #0
	}

	return read;
}
 800b048:	b003      	add	sp, #12
 800b04a:	f85d fb04 	ldr.w	pc, [sp], #4
	return read;
 800b04e:	9801      	ldr	r0, [sp, #4]
 800b050:	e7fa      	b.n	800b048 <getDataFromFile+0x18>
 800b052:	bf00      	nop
 800b054:	20002f2c 	.word	0x20002f2c
 800b058:	0800cf25 	.word	0x0800cf25

0800b05c <playMP3Song>:

int playMP3Song(char *path) {
 800b05c:	b510      	push	{r4, lr}
	int rc = 0;
	rc = f_open(&currentSong, path, FA_READ);
 800b05e:	2201      	movs	r2, #1
int playMP3Song(char *path) {
 800b060:	b08c      	sub	sp, #48	; 0x30
	rc = f_open(&currentSong, path, FA_READ);
 800b062:	4601      	mov	r1, r0
 800b064:	481f      	ldr	r0, [pc, #124]	; (800b0e4 <playMP3Song+0x88>)
 800b066:	f7ff f8a3 	bl	800a1b0 <f_open>

	  /* Enables and resets CRC-32 from STM32 HW */
	  __HAL_RCC_CRC_CLK_ENABLE();
 800b06a:	2300      	movs	r3, #0
 800b06c:	9301      	str	r3, [sp, #4]
 800b06e:	4b1e      	ldr	r3, [pc, #120]	; (800b0e8 <playMP3Song+0x8c>)
 800b070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b072:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b076:	631a      	str	r2, [r3, #48]	; 0x30
 800b078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b07a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b07e:	9301      	str	r3, [sp, #4]
 800b080:	9b01      	ldr	r3, [sp, #4]
	  CRC->CR = CRC_CR_RESET;
 800b082:	4b1a      	ldr	r3, [pc, #104]	; (800b0ec <playMP3Song+0x90>)
 800b084:	2201      	movs	r2, #1
 800b086:	609a      	str	r2, [r3, #8]

	if (rc == FR_OK) {
 800b088:	4604      	mov	r4, r0
 800b08a:	b990      	cbnz	r0, 800b0b2 <playMP3Song+0x56>
		/* Initialize MP3 decoder */
		SpiritMP3DecoderInit(&decoder, getDataFromFile, NULL, NULL);
 800b08c:	4603      	mov	r3, r0
 800b08e:	4602      	mov	r2, r0
 800b090:	4917      	ldr	r1, [pc, #92]	; (800b0f0 <playMP3Song+0x94>)
 800b092:	4818      	ldr	r0, [pc, #96]	; (800b0f4 <playMP3Song+0x98>)
 800b094:	f7f5 ff15 	bl	8000ec2 <SpiritMP3DecoderInit>
	if (SpiritMP3Decode(&decoder, (short*)&playbackBuffer[0], BUFFER_LENGTH_BYTES/4, &mp3Info) != BUFFER_LENGTH_BYTES/4)
 800b098:	ab02      	add	r3, sp, #8
 800b09a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b09e:	4916      	ldr	r1, [pc, #88]	; (800b0f8 <playMP3Song+0x9c>)
 800b0a0:	4814      	ldr	r0, [pc, #80]	; (800b0f4 <playMP3Song+0x98>)
 800b0a2:	f7f5 ff33 	bl	8000f0c <SpiritMP3Decode>
 800b0a6:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 800b0aa:	d005      	beq.n	800b0b8 <playMP3Song+0x5c>
		printf("found end of file too soon... error.\r\n");
 800b0ac:	4813      	ldr	r0, [pc, #76]	; (800b0fc <playMP3Song+0xa0>)
		printf("error starting audio playback\r\n");
 800b0ae:	f000 fd01 	bl	800bab4 <puts>
		StartPlaybackFromFirstFrame();
	}

	return rc;
}
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	b00c      	add	sp, #48	; 0x30
 800b0b6:	bd10      	pop	{r4, pc}
	printf("Using sample rate %d\r\n", mp3Info.nSampleRateHz);
 800b0b8:	9903      	ldr	r1, [sp, #12]
 800b0ba:	4811      	ldr	r0, [pc, #68]	; (800b100 <playMP3Song+0xa4>)
 800b0bc:	f000 fc86 	bl	800b9cc <iprintf>
	rc = BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, DEFAULT_VOLUME_LEVEL, mp3Info.nSampleRateHz);
 800b0c0:	9a03      	ldr	r2, [sp, #12]
 800b0c2:	2150      	movs	r1, #80	; 0x50
 800b0c4:	2002      	movs	r0, #2
 800b0c6:	f7f8 fecb 	bl	8003e60 <BSP_AUDIO_OUT_Init>
	if (AUDIO_OK != rc) {
 800b0ca:	b108      	cbz	r0, 800b0d0 <playMP3Song+0x74>
		printf("Error initializing audio device\r\n");
 800b0cc:	480d      	ldr	r0, [pc, #52]	; (800b104 <playMP3Song+0xa8>)
 800b0ce:	e7ee      	b.n	800b0ae <playMP3Song+0x52>
	if (AUDIO_OK != BSP_AUDIO_OUT_Play(playbackBuffer, BUFFER_LENGTH_BYTES)) {
 800b0d0:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 800b0d4:	4808      	ldr	r0, [pc, #32]	; (800b0f8 <playMP3Song+0x9c>)
 800b0d6:	f7f8 fdbf 	bl	8003c58 <BSP_AUDIO_OUT_Play>
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	d0e9      	beq.n	800b0b2 <playMP3Song+0x56>
		printf("error starting audio playback\r\n");
 800b0de:	480a      	ldr	r0, [pc, #40]	; (800b108 <playMP3Song+0xac>)
 800b0e0:	e7e5      	b.n	800b0ae <playMP3Song+0x52>
 800b0e2:	bf00      	nop
 800b0e4:	20002f2c 	.word	0x20002f2c
 800b0e8:	40023800 	.word	0x40023800
 800b0ec:	40023000 	.word	0x40023000
 800b0f0:	0800b031 	.word	0x0800b031
 800b0f4:	2000315c 	.word	0x2000315c
 800b0f8:	20000b2c 	.word	0x20000b2c
 800b0fc:	0800cf39 	.word	0x0800cf39
 800b100:	0800cf5f 	.word	0x0800cf5f
 800b104:	0800cf76 	.word	0x0800cf76
 800b108:	0800cf97 	.word	0x0800cf97

0800b10c <stopMP3Song>:

int stopMP3Song() {
 800b10c:	b508      	push	{r3, lr}
	BSP_AUDIO_OUT_Stop(CODEC_PDWN_HW);
 800b10e:	2001      	movs	r0, #1
 800b110:	f7f8 fdc8 	bl	8003ca4 <BSP_AUDIO_OUT_Stop>
	f_close(&currentSong);
 800b114:	4802      	ldr	r0, [pc, #8]	; (800b120 <stopMP3Song+0x14>)
 800b116:	f7ff fa48 	bl	800a5aa <f_close>

	return 0;
}
 800b11a:	2000      	movs	r0, #0
 800b11c:	bd08      	pop	{r3, pc}
 800b11e:	bf00      	nop
 800b120:	20002f2c 	.word	0x20002f2c

0800b124 <playMP3Task>:

void playMP3Task() {
 800b124:	b510      	push	{r4, lr}
	UINT bytesRead = 0;

	switch (playbackState) {
 800b126:	4c0b      	ldr	r4, [pc, #44]	; (800b154 <playMP3Task+0x30>)
 800b128:	7823      	ldrb	r3, [r4, #0]
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d002      	beq.n	800b136 <playMP3Task+0x12>
 800b130:	2b02      	cmp	r3, #2
 800b132:	d00a      	beq.n	800b14a <playMP3Task+0x26>
	case IDLE:
		break;
	default:
		break;
	}
}
 800b134:	bd10      	pop	{r4, pc}
		SpiritMP3Decode(&decoder, (short*)&playbackBuffer[BUFFER_LENGTH_BYTES/4], BUFFER_LENGTH_BYTES/8, NULL);
 800b136:	4908      	ldr	r1, [pc, #32]	; (800b158 <playMP3Task+0x34>)
 800b138:	2300      	movs	r3, #0
 800b13a:	f44f 6290 	mov.w	r2, #1152	; 0x480
		SpiritMP3Decode(&decoder, (short*)&playbackBuffer[0], BUFFER_LENGTH_BYTES/8, NULL);
 800b13e:	4807      	ldr	r0, [pc, #28]	; (800b15c <playMP3Task+0x38>)
 800b140:	f7f5 fee4 	bl	8000f0c <SpiritMP3Decode>
		playbackState = IDLE;
 800b144:	2300      	movs	r3, #0
 800b146:	7023      	strb	r3, [r4, #0]
}
 800b148:	e7f4      	b.n	800b134 <playMP3Task+0x10>
		SpiritMP3Decode(&decoder, (short*)&playbackBuffer[0], BUFFER_LENGTH_BYTES/8, NULL);
 800b14a:	2300      	movs	r3, #0
 800b14c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800b150:	4903      	ldr	r1, [pc, #12]	; (800b160 <playMP3Task+0x3c>)
 800b152:	e7f4      	b.n	800b13e <playMP3Task+0x1a>
 800b154:	200001fd 	.word	0x200001fd
 800b158:	20001d2c 	.word	0x20001d2c
 800b15c:	2000315c 	.word	0x2000315c
 800b160:	20000b2c 	.word	0x20000b2c

0800b164 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

void BSP_AUDIO_OUT_TransferComplete_CallBack(void) {
 800b164:	b508      	push	{r3, lr}
	BSP_AUDIO_OUT_ChangeBuffer(playbackBuffer, BUFFER_LENGTH_BYTES/2);
 800b166:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800b16a:	4803      	ldr	r0, [pc, #12]	; (800b178 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
 800b16c:	f7f8 fd92 	bl	8003c94 <BSP_AUDIO_OUT_ChangeBuffer>
	playbackState = TRANSFER_COMPLETE;
 800b170:	4b02      	ldr	r3, [pc, #8]	; (800b17c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x18>)
 800b172:	2201      	movs	r2, #1
 800b174:	701a      	strb	r2, [r3, #0]
}
 800b176:	bd08      	pop	{r3, pc}
 800b178:	20000b2c 	.word	0x20000b2c
 800b17c:	200001fd 	.word	0x200001fd

0800b180 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

void BSP_AUDIO_OUT_HalfTransfer_CallBack(void) {
	playbackState = HALF_TRANSFER;
 800b180:	4b01      	ldr	r3, [pc, #4]	; (800b188 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x8>)
 800b182:	2202      	movs	r2, #2
 800b184:	701a      	strb	r2, [r3, #0]
}
 800b186:	4770      	bx	lr
 800b188:	200001fd 	.word	0x200001fd

0800b18c <BSP_AUDIO_OUT_Error_CallBack>:


void BSP_AUDIO_OUT_Error_CallBack(void) {
	printf("BSP_AUDIO_OUT_Error_CallBack\r\n");
 800b18c:	4801      	ldr	r0, [pc, #4]	; (800b194 <BSP_AUDIO_OUT_Error_CallBack+0x8>)
 800b18e:	f000 bc91 	b.w	800bab4 <puts>
 800b192:	bf00      	nop
 800b194:	0800cf07 	.word	0x0800cf07

0800b198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b198:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b19a:	4b23      	ldr	r3, [pc, #140]	; (800b228 <HAL_MspInit+0x90>)
 800b19c:	2400      	movs	r4, #0
 800b19e:	9400      	str	r4, [sp, #0]
 800b1a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1a6:	645a      	str	r2, [r3, #68]	; 0x44
 800b1a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1aa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800b1ae:	9200      	str	r2, [sp, #0]
 800b1b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b1b2:	9401      	str	r4, [sp, #4]
 800b1b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b1ba:	641a      	str	r2, [r3, #64]	; 0x40
 800b1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1c2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800b1c4:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800b1c6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800b1c8:	f7f8 ff14 	bl	8003ff4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800b1cc:	4622      	mov	r2, r4
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	f06f 000b 	mvn.w	r0, #11
 800b1d4:	f7f8 ff2c 	bl	8004030 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800b1d8:	4622      	mov	r2, r4
 800b1da:	4621      	mov	r1, r4
 800b1dc:	f06f 000a 	mvn.w	r0, #10
 800b1e0:	f7f8 ff26 	bl	8004030 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800b1e4:	4622      	mov	r2, r4
 800b1e6:	4621      	mov	r1, r4
 800b1e8:	f06f 0009 	mvn.w	r0, #9
 800b1ec:	f7f8 ff20 	bl	8004030 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800b1f0:	4622      	mov	r2, r4
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	f06f 0004 	mvn.w	r0, #4
 800b1f8:	f7f8 ff1a 	bl	8004030 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800b1fc:	4622      	mov	r2, r4
 800b1fe:	4621      	mov	r1, r4
 800b200:	f06f 0003 	mvn.w	r0, #3
 800b204:	f7f8 ff14 	bl	8004030 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800b208:	4622      	mov	r2, r4
 800b20a:	4621      	mov	r1, r4
 800b20c:	f06f 0001 	mvn.w	r0, #1
 800b210:	f7f8 ff0e 	bl	8004030 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b214:	4622      	mov	r2, r4
 800b216:	4621      	mov	r1, r4
 800b218:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b21c:	b002      	add	sp, #8
 800b21e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b222:	f7f8 bf05 	b.w	8004030 <HAL_NVIC_SetPriority>
 800b226:	bf00      	nop
 800b228:	40023800 	.word	0x40023800

0800b22c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800b22c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b22e:	f7f8 febb 	bl	8003fa8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800b236:	f7f8 bf84 	b.w	8004142 <HAL_SYSTICK_IRQHandler>
	...

0800b23c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800b23c:	4801      	ldr	r0, [pc, #4]	; (800b244 <OTG_FS_IRQHandler+0x8>)
 800b23e:	f7f9 bcef 	b.w	8004c20 <HAL_HCD_IRQHandler>
 800b242:	bf00      	nop
 800b244:	2000655c 	.word	0x2000655c

0800b248 <DMA1_Stream7_IRQHandler>:
}

/* USER CODE BEGIN 1 */

void DMA1_Stream7_IRQHandler() {
	HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 800b248:	4b01      	ldr	r3, [pc, #4]	; (800b250 <DMA1_Stream7_IRQHandler+0x8>)
 800b24a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b24c:	f7f9 b9b6 	b.w	80045bc <HAL_DMA_IRQHandler>
 800b250:	200002f4 	.word	0x200002f4

0800b254 <NMI_Handler>:
* @param  None
* @retval None
*/
void NMI_Handler(void)
{
}
 800b254:	4770      	bx	lr

0800b256 <HardFault_Handler>:
* @brief  This function handles Hard Fault exception.
* @param  None
* @retval None
*/
void HardFault_Handler(uint32_t* pulFaultStackAddress)
{
 800b256:	b088      	sub	sp, #32
	volatile uint32_t r12;
	volatile uint32_t lr; /* Link register. */
	volatile uint32_t pc; /* Program counter. */
	volatile uint32_t psr;/* Program status register. */

	r0 = pulFaultStackAddress[ 0 ];
 800b258:	6803      	ldr	r3, [r0, #0]
 800b25a:	9300      	str	r3, [sp, #0]
	r1 = pulFaultStackAddress[ 1 ];
 800b25c:	6843      	ldr	r3, [r0, #4]
 800b25e:	9301      	str	r3, [sp, #4]
	r2 = pulFaultStackAddress[ 2 ];
 800b260:	6883      	ldr	r3, [r0, #8]
 800b262:	9302      	str	r3, [sp, #8]
	r3 = pulFaultStackAddress[ 3 ];
 800b264:	68c3      	ldr	r3, [r0, #12]
 800b266:	9303      	str	r3, [sp, #12]

	r12 = pulFaultStackAddress[ 4 ];
 800b268:	6903      	ldr	r3, [r0, #16]
 800b26a:	9304      	str	r3, [sp, #16]
	lr = pulFaultStackAddress[ 5 ];
 800b26c:	6943      	ldr	r3, [r0, #20]
 800b26e:	9305      	str	r3, [sp, #20]
	pc = pulFaultStackAddress[ 6 ];
 800b270:	6983      	ldr	r3, [r0, #24]
 800b272:	9306      	str	r3, [sp, #24]
	psr = pulFaultStackAddress[ 7 ];
 800b274:	69c3      	ldr	r3, [r0, #28]
 800b276:	9307      	str	r3, [sp, #28]
 800b278:	e7fe      	b.n	800b278 <HardFault_Handler+0x22>

0800b27a <MemManage_Handler>:
* @brief  This function handles Memory Manage exception.
* @param  None
* @retval None
*/
void MemManage_Handler(void)
{
 800b27a:	e7fe      	b.n	800b27a <MemManage_Handler>

0800b27c <BusFault_Handler>:
* @brief  This function handles Bus Fault exception.
* @param  None
* @retval None
*/
void BusFault_Handler(void)
{
 800b27c:	e7fe      	b.n	800b27c <BusFault_Handler>

0800b27e <UsageFault_Handler>:
* @brief  This function handles Usage Fault exception.
* @param  None
* @retval None
*/
void UsageFault_Handler(void)
{
 800b27e:	e7fe      	b.n	800b27e <UsageFault_Handler>

0800b280 <SVC_Handler>:
 800b280:	4770      	bx	lr

0800b282 <DebugMon_Handler>:
 800b282:	4770      	bx	lr

0800b284 <PendSV_Handler>:
 800b284:	4770      	bx	lr

0800b286 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b286:	b570      	push	{r4, r5, r6, lr}
 800b288:	460e      	mov	r6, r1
 800b28a:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b28c:	460c      	mov	r4, r1
 800b28e:	1ba3      	subs	r3, r4, r6
 800b290:	429d      	cmp	r5, r3
 800b292:	dc01      	bgt.n	800b298 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800b294:	4628      	mov	r0, r5
 800b296:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800b298:	f3af 8000 	nop.w
 800b29c:	f804 0b01 	strb.w	r0, [r4], #1
 800b2a0:	e7f5      	b.n	800b28e <_read+0x8>
	...

0800b2a4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800b2a4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b2a6:	4b0a      	ldr	r3, [pc, #40]	; (800b2d0 <_sbrk+0x2c>)
 800b2a8:	6819      	ldr	r1, [r3, #0]
{
 800b2aa:	4602      	mov	r2, r0
	if (heap_end == 0)
 800b2ac:	b909      	cbnz	r1, 800b2b2 <_sbrk+0xe>
		heap_end = &end;
 800b2ae:	4909      	ldr	r1, [pc, #36]	; (800b2d4 <_sbrk+0x30>)
 800b2b0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800b2b2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800b2b4:	4669      	mov	r1, sp
 800b2b6:	4402      	add	r2, r0
 800b2b8:	428a      	cmp	r2, r1
 800b2ba:	d906      	bls.n	800b2ca <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800b2bc:	f000 fa8e 	bl	800b7dc <__errno>
 800b2c0:	230c      	movs	r3, #12
 800b2c2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800b2c4:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800b2c8:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800b2ca:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800b2cc:	e7fc      	b.n	800b2c8 <_sbrk+0x24>
 800b2ce:	bf00      	nop
 800b2d0:	20000200 	.word	0x20000200
 800b2d4:	200067f8 	.word	0x200067f8

0800b2d8 <_close>:

int _close(int file)
{
	return -1;
}
 800b2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2dc:	4770      	bx	lr

0800b2de <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800b2de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2e2:	604b      	str	r3, [r1, #4]
	return 0;
}
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	4770      	bx	lr

0800b2e8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800b2e8:	2001      	movs	r0, #1
 800b2ea:	4770      	bx	lr

0800b2ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	4770      	bx	lr

0800b2f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b2f0:	490f      	ldr	r1, [pc, #60]	; (800b330 <SystemInit+0x40>)
 800b2f2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800b2f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b2fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b2fe:	4b0d      	ldr	r3, [pc, #52]	; (800b334 <SystemInit+0x44>)
 800b300:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b302:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800b304:	f042 0201 	orr.w	r2, r2, #1
 800b308:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800b30a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800b312:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b316:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b318:	4a07      	ldr	r2, [pc, #28]	; (800b338 <SystemInit+0x48>)
 800b31a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b322:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b324:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b326:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b32a:	608b      	str	r3, [r1, #8]
#endif
}
 800b32c:	4770      	bx	lr
 800b32e:	bf00      	nop
 800b330:	e000ed00 	.word	0xe000ed00
 800b334:	40023800 	.word	0x40023800
 800b338:	24003010 	.word	0x24003010

0800b33c <uart_init>:
	HAL_GPIO_Init(GPIOA, &gpio);

	return RESULT_OK;
}

UART_Result_t uart_init() {
 800b33c:	b530      	push	{r4, r5, lr}
 800b33e:	b087      	sub	sp, #28
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800b340:	2400      	movs	r4, #0
 800b342:	4d1b      	ldr	r5, [pc, #108]	; (800b3b0 <uart_init+0x74>)
 800b344:	9400      	str	r4, [sp, #0]
 800b346:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_GPIO_Init(GPIOA, &gpio);
 800b348:	481a      	ldr	r0, [pc, #104]	; (800b3b4 <uart_init+0x78>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800b34a:	f043 0301 	orr.w	r3, r3, #1
 800b34e:	632b      	str	r3, [r5, #48]	; 0x30
 800b350:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	gpio.Pull = GPIO_NOPULL;
 800b352:	9403      	str	r4, [sp, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800b354:	f003 0301 	and.w	r3, r3, #1
 800b358:	9300      	str	r3, [sp, #0]
	gpio.Mode = GPIO_MODE_AF_PP;
 800b35a:	2204      	movs	r2, #4
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800b35c:	9b00      	ldr	r3, [sp, #0]
	gpio.Mode = GPIO_MODE_AF_PP;
 800b35e:	2302      	movs	r3, #2
 800b360:	e9cd 2301 	strd	r2, r3, [sp, #4]
	gpio.Alternate = GPIO_AF7_USART2;
 800b364:	2101      	movs	r1, #1
 800b366:	2307      	movs	r3, #7
 800b368:	e9cd 1304 	strd	r1, r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &gpio);
 800b36c:	a901      	add	r1, sp, #4
 800b36e:	f7f9 f9e3 	bl	8004738 <HAL_GPIO_Init>
	if (uart_init_phy() != RESULT_OK) return PHY_FAILURE;

	__HAL_RCC_USART2_CLK_ENABLE();
 800b372:	9401      	str	r4, [sp, #4]
 800b374:	6c2b      	ldr	r3, [r5, #64]	; 0x40
	huart.Instance = USART2;
 800b376:	4810      	ldr	r0, [pc, #64]	; (800b3b8 <uart_init+0x7c>)
	__HAL_RCC_USART2_CLK_ENABLE();
 800b378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b37c:	642b      	str	r3, [r5, #64]	; 0x40
 800b37e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
	huart.Init.Mode = UART_MODE_TX;
	huart.Init.BaudRate = 115200;
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b380:	6184      	str	r4, [r0, #24]
	__HAL_RCC_USART2_CLK_ENABLE();
 800b382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b386:	9301      	str	r3, [sp, #4]
 800b388:	9b01      	ldr	r3, [sp, #4]
	huart.Instance = USART2;
 800b38a:	4b0c      	ldr	r3, [pc, #48]	; (800b3bc <uart_init+0x80>)
 800b38c:	6003      	str	r3, [r0, #0]
	huart.Init.Mode = UART_MODE_TX;
 800b38e:	2308      	movs	r3, #8
 800b390:	6143      	str	r3, [r0, #20]
	huart.Init.BaudRate = 115200;
 800b392:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800b396:	6043      	str	r3, [r0, #4]
	huart.Init.Parity = UART_PARITY_NONE;
	huart.Init.StopBits = UART_STOPBITS_1;
 800b398:	e9c0 4403 	strd	r4, r4, [r0, #12]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 800b39c:	6084      	str	r4, [r0, #8]
	if (HAL_UART_Init(&huart) != HAL_OK) return UART_FAILURE;
 800b39e:	f7fb fd5f 	bl	8006e60 <HAL_UART_Init>
 800b3a2:	42a0      	cmp	r0, r4

	return RESULT_OK;
}
 800b3a4:	bf14      	ite	ne
 800b3a6:	2002      	movne	r0, #2
 800b3a8:	4620      	moveq	r0, r4
 800b3aa:	b007      	add	sp, #28
 800b3ac:	bd30      	pop	{r4, r5, pc}
 800b3ae:	bf00      	nop
 800b3b0:	40023800 	.word	0x40023800
 800b3b4:	40020000 	.word	0x40020000
 800b3b8:	20000204 	.word	0x20000204
 800b3bc:	40004400 	.word	0x40004400

0800b3c0 <uart_write>:

UART_Result_t uart_write(const void *buf, size_t len) {
 800b3c0:	b508      	push	{r3, lr}
	if (HAL_UART_Transmit(&huart, (uint8_t*)buf,
 800b3c2:	b28a      	uxth	r2, r1
 800b3c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b3c8:	4601      	mov	r1, r0
 800b3ca:	4804      	ldr	r0, [pc, #16]	; (800b3dc <uart_write+0x1c>)
 800b3cc:	f7fb fdca 	bl	8006f64 <HAL_UART_Transmit>
 800b3d0:	2800      	cmp	r0, #0
			len, UART_TIMEOUT_MILLISECONDS) != HAL_OK) {
		return UART_FAILURE;
	}

	return RESULT_OK;
}
 800b3d2:	bf14      	ite	ne
 800b3d4:	2002      	movne	r0, #2
 800b3d6:	2000      	moveq	r0, #0
 800b3d8:	bd08      	pop	{r3, pc}
 800b3da:	bf00      	nop
 800b3dc:	20000204 	.word	0x20000204

0800b3e0 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b3e0:	2904      	cmp	r1, #4
{
 800b3e2:	b508      	push	{r3, lr}
 800b3e4:	4b07      	ldr	r3, [pc, #28]	; (800b404 <USBH_UserProcess+0x24>)
  switch(id)
 800b3e6:	d00b      	beq.n	800b400 <USBH_UserProcess+0x20>
 800b3e8:	2905      	cmp	r1, #5
 800b3ea:	d006      	beq.n	800b3fa <USBH_UserProcess+0x1a>
 800b3ec:	2902      	cmp	r1, #2
 800b3ee:	d100      	bne.n	800b3f2 <USBH_UserProcess+0x12>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b3f0:	7019      	strb	r1, [r3, #0]
  break;

  default:
  break;
  }
  MX_USB_HOST_StateChanged(Appli_state);
 800b3f2:	7818      	ldrb	r0, [r3, #0]
 800b3f4:	f7ff fcca 	bl	800ad8c <MX_USB_HOST_StateChanged>
  /* USER CODE END CALL_BACK_1 */
}
 800b3f8:	bd08      	pop	{r3, pc}
  Appli_state = APPLICATION_DISCONNECT;
 800b3fa:	2203      	movs	r2, #3
  Appli_state = APPLICATION_START;
 800b3fc:	701a      	strb	r2, [r3, #0]
  break;
 800b3fe:	e7f8      	b.n	800b3f2 <USBH_UserProcess+0x12>
  Appli_state = APPLICATION_START;
 800b400:	2201      	movs	r2, #1
 800b402:	e7fb      	b.n	800b3fc <USBH_UserProcess+0x1c>
 800b404:	20000244 	.word	0x20000244

0800b408 <MX_USB_HOST_Init>:
{
 800b408:	b510      	push	{r4, lr}
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 800b40a:	4c07      	ldr	r4, [pc, #28]	; (800b428 <MX_USB_HOST_Init+0x20>)
 800b40c:	4907      	ldr	r1, [pc, #28]	; (800b42c <MX_USB_HOST_Init+0x24>)
 800b40e:	2201      	movs	r2, #1
 800b410:	4620      	mov	r0, r4
 800b412:	f7fd f85f 	bl	80084d4 <USBH_Init>
  USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS);
 800b416:	4620      	mov	r0, r4
 800b418:	4905      	ldr	r1, [pc, #20]	; (800b430 <MX_USB_HOST_Init+0x28>)
 800b41a:	f7fd f872 	bl	8008502 <USBH_RegisterClass>
  USBH_Start(&hUsbHostFS);
 800b41e:	4620      	mov	r0, r4
}
 800b420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBH_Start(&hUsbHostFS);
 800b424:	f7fd b8a0 	b.w	8008568 <USBH_Start>
 800b428:	20006194 	.word	0x20006194
 800b42c:	0800b3e1 	.word	0x0800b3e1
 800b430:	20000040 	.word	0x20000040

0800b434 <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 800b434:	4801      	ldr	r0, [pc, #4]	; (800b43c <MX_USB_HOST_Process+0x8>)
 800b436:	f7fd b8a1 	b.w	800857c <USBH_Process>
 800b43a:	bf00      	nop
 800b43c:	20006194 	.word	0x20006194

0800b440 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b440:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 800b442:	6803      	ldr	r3, [r0, #0]
 800b444:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800b448:	b086      	sub	sp, #24
  if(hcdHandle->Instance==USB_OTG_FS)
 800b44a:	d12e      	bne.n	800b4aa <HAL_HCD_MspInit+0x6a>
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b44c:	2400      	movs	r4, #0
 800b44e:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b452:	a901      	add	r1, sp, #4
 800b454:	4816      	ldr	r0, [pc, #88]	; (800b4b0 <HAL_HCD_MspInit+0x70>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b456:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b458:	e9cd 3401 	strd	r3, r4, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b45c:	f7f9 f96c 	bl	8004738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b460:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800b464:	2302      	movs	r3, #2
 800b466:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b46a:	2103      	movs	r1, #3
 800b46c:	230a      	movs	r3, #10
 800b46e:	e9cd 1304 	strd	r1, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b472:	480f      	ldr	r0, [pc, #60]	; (800b4b0 <HAL_HCD_MspInit+0x70>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b474:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b476:	a901      	add	r1, sp, #4
 800b478:	f7f9 f95e 	bl	8004738 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b47c:	4b0d      	ldr	r3, [pc, #52]	; (800b4b4 <HAL_HCD_MspInit+0x74>)
 800b47e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b480:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b484:	635a      	str	r2, [r3, #52]	; 0x34
 800b486:	9400      	str	r4, [sp, #0]
 800b488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b48a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b48e:	645a      	str	r2, [r3, #68]	; 0x44
 800b490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b496:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b498:	2043      	movs	r0, #67	; 0x43
 800b49a:	4622      	mov	r2, r4
 800b49c:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b49e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b4a0:	f7f8 fdc6 	bl	8004030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b4a4:	2043      	movs	r0, #67	; 0x43
 800b4a6:	f7f8 fe07 	bl	80040b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b4aa:	b006      	add	sp, #24
 800b4ac:	bd10      	pop	{r4, pc}
 800b4ae:	bf00      	nop
 800b4b0:	40020000 	.word	0x40020000
 800b4b4:	40023800 	.word	0x40023800

0800b4b8 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 800b4b8:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 800b4bc:	f7fd b97c 	b.w	80087b8 <USBH_LL_IncTimer>

0800b4c0 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 800b4c0:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 800b4c4:	f7fd b986 	b.w	80087d4 <USBH_LL_Connect>

0800b4c8 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 800b4c8:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 800b4cc:	f7fd b995 	b.w	80087fa <USBH_LL_Disconnect>

0800b4d0 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b4d0:	4770      	bx	lr
	...

0800b4d4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b4d4:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b4d6:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800b4da:	2b01      	cmp	r3, #1
{
 800b4dc:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 800b4de:	d11e      	bne.n	800b51e <USBH_LL_Init+0x4a>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b4e0:	4810      	ldr	r0, [pc, #64]	; (800b524 <USBH_LL_Init+0x50>)
  phost->pData = &hhcd_USB_OTG_FS;
 800b4e2:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b4e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800b4ea:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b4ec:	2108      	movs	r1, #8
 800b4ee:	2303      	movs	r3, #3
 800b4f0:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b4f4:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b4f6:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 800b4f8:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b4fc:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b4fe:	e9c0 2306 	strd	r2, r3, [r0, #24]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b502:	f7f9 fabf 	bl	8004a84 <HAL_HCD_Init>
 800b506:	b118      	cbz	r0, 800b510 <USBH_LL_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800b508:	21e1      	movs	r1, #225	; 0xe1
 800b50a:	4807      	ldr	r0, [pc, #28]	; (800b528 <USBH_LL_Init+0x54>)
 800b50c:	f7ff fd8e 	bl	800b02c <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b510:	4804      	ldr	r0, [pc, #16]	; (800b524 <USBH_LL_Init+0x50>)
 800b512:	f7f9 febd 	bl	8005290 <HAL_HCD_GetCurrentFrame>
 800b516:	4601      	mov	r1, r0
 800b518:	4620      	mov	r0, r4
 800b51a:	f7fd f94a 	bl	80087b2 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 800b51e:	2000      	movs	r0, #0
 800b520:	bd10      	pop	{r4, pc}
 800b522:	bf00      	nop
 800b524:	2000655c 	.word	0x2000655c
 800b528:	0800cfd5 	.word	0x0800cfd5

0800b52c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b52c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 800b52e:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800b532:	f7f9 fe77 	bl	8005224 <HAL_HCD_Start>
 800b536:	2803      	cmp	r0, #3
 800b538:	bf96      	itet	ls
 800b53a:	4b02      	ldrls	r3, [pc, #8]	; (800b544 <USBH_LL_Start+0x18>)
 800b53c:	2002      	movhi	r0, #2
 800b53e:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800b540:	bd08      	pop	{r3, pc}
 800b542:	bf00      	nop
 800b544:	0800cfd1 	.word	0x0800cfd1

0800b548 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b548:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 800b54a:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800b54e:	f7f9 fe7f 	bl	8005250 <HAL_HCD_Stop>
 800b552:	2803      	cmp	r0, #3
 800b554:	bf96      	itet	ls
 800b556:	4b02      	ldrls	r3, [pc, #8]	; (800b560 <USBH_LL_Stop+0x18>)
 800b558:	2002      	movhi	r0, #2
 800b55a:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800b55c:	bd08      	pop	{r3, pc}
 800b55e:	bf00      	nop
 800b560:	0800cfd1 	.word	0x0800cfd1

0800b564 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b564:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b566:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800b56a:	f7f9 fe94 	bl	8005296 <HAL_HCD_GetCurrentSpeed>
 800b56e:	2802      	cmp	r0, #2
 800b570:	bf96      	itet	ls
 800b572:	4b02      	ldrls	r3, [pc, #8]	; (800b57c <USBH_LL_GetSpeed+0x18>)
 800b574:	2001      	movhi	r0, #1
 800b576:	5c18      	ldrbls	r0, [r3, r0]
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 800b578:	bd08      	pop	{r3, pc}
 800b57a:	bf00      	nop
 800b57c:	0800cfce 	.word	0x0800cfce

0800b580 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b580:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b582:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800b586:	f7f9 fe75 	bl	8005274 <HAL_HCD_ResetPort>
 800b58a:	2803      	cmp	r0, #3
 800b58c:	bf96      	itet	ls
 800b58e:	4b02      	ldrls	r3, [pc, #8]	; (800b598 <USBH_LL_ResetPort+0x18>)
 800b590:	2002      	movhi	r0, #2
 800b592:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800b594:	bd08      	pop	{r3, pc}
 800b596:	bf00      	nop
 800b598:	0800cfd1 	.word	0x0800cfd1

0800b59c <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b59c:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800b5a0:	f7f9 be71 	b.w	8005286 <HAL_HCD_HC_GetXferCount>

0800b5a4 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b5a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b5a6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800b5aa:	9402      	str	r4, [sp, #8]
 800b5ac:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800b5b0:	9401      	str	r4, [sp, #4]
 800b5b2:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800b5b6:	9400      	str	r4, [sp, #0]
 800b5b8:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800b5bc:	f7f9 fa1c 	bl	80049f8 <HAL_HCD_HC_Init>
 800b5c0:	2803      	cmp	r0, #3
 800b5c2:	bf9a      	itte	ls
 800b5c4:	4b02      	ldrls	r3, [pc, #8]	; (800b5d0 <USBH_LL_OpenPipe+0x2c>)
 800b5c6:	5c18      	ldrbls	r0, [r3, r0]
 800b5c8:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800b5ca:	b004      	add	sp, #16
 800b5cc:	bd10      	pop	{r4, pc}
 800b5ce:	bf00      	nop
 800b5d0:	0800cfd1 	.word	0x0800cfd1

0800b5d4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b5d4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b5d6:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800b5da:	f7f9 fa40 	bl	8004a5e <HAL_HCD_HC_Halt>
 800b5de:	2803      	cmp	r0, #3
 800b5e0:	bf96      	itet	ls
 800b5e2:	4b02      	ldrls	r3, [pc, #8]	; (800b5ec <USBH_LL_ClosePipe+0x18>)
 800b5e4:	2002      	movhi	r0, #2
 800b5e6:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800b5e8:	bd08      	pop	{r3, pc}
 800b5ea:	bf00      	nop
 800b5ec:	0800cfd1 	.word	0x0800cfd1

0800b5f0 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b5f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b5f2:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800b5f6:	9403      	str	r4, [sp, #12]
 800b5f8:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800b5fc:	9402      	str	r4, [sp, #8]
 800b5fe:	9c07      	ldr	r4, [sp, #28]
 800b600:	9401      	str	r4, [sp, #4]
 800b602:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800b606:	9400      	str	r4, [sp, #0]
 800b608:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800b60c:	f7f9 fa88 	bl	8004b20 <HAL_HCD_HC_SubmitRequest>
 800b610:	2803      	cmp	r0, #3
 800b612:	bf9a      	itte	ls
 800b614:	4b02      	ldrls	r3, [pc, #8]	; (800b620 <USBH_LL_SubmitURB+0x30>)
 800b616:	5c18      	ldrbls	r0, [r3, r0]
 800b618:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800b61a:	b004      	add	sp, #16
 800b61c:	bd10      	pop	{r4, pc}
 800b61e:	bf00      	nop
 800b620:	0800cfd1 	.word	0x0800cfd1

0800b624 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b624:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800b628:	f7f9 be27 	b.w	800527a <HAL_HCD_HC_GetURBState>

0800b62c <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b62c:	b508      	push	{r3, lr}
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800b62e:	20c8      	movs	r0, #200	; 0xc8
 800b630:	f7f8 fccc 	bl	8003fcc <HAL_Delay>
  return USBH_OK;
}
 800b634:	2000      	movs	r0, #0
 800b636:	bd08      	pop	{r3, pc}

0800b638 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b638:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0

  if(pHandle->hc[pipe].ep_is_in)
 800b63c:	2328      	movs	r3, #40	; 0x28
 800b63e:	fb03 0101 	mla	r1, r3, r1, r0
 800b642:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800b646:	b11b      	cbz	r3, 800b650 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b648:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 800b64c:	2000      	movs	r0, #0
 800b64e:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 800b650:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 800b654:	e7fa      	b.n	800b64c <USBH_LL_SetToggle+0x14>

0800b656 <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b656:	f8d0 23c0 	ldr.w	r2, [r0, #960]	; 0x3c0

  if(pHandle->hc[pipe].ep_is_in)
 800b65a:	2328      	movs	r3, #40	; 0x28
 800b65c:	fb03 2101 	mla	r1, r3, r1, r2
 800b660:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800b664:	b113      	cbz	r3, 800b66c <USBH_LL_GetToggle+0x16>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b666:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
 800b66a:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b66c:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle;
}
 800b670:	4770      	bx	lr

0800b672 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800b672:	f7f8 bcab 	b.w	8003fcc <HAL_Delay>

0800b676 <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 800b676:	2000      	movs	r0, #0
 800b678:	4770      	bx	lr
	...

0800b67c <USBH_status>:
  */
DSTATUS USBH_status(BYTE lun)
{
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800b67c:	4601      	mov	r1, r0
{
 800b67e:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800b680:	4803      	ldr	r0, [pc, #12]	; (800b690 <USBH_status+0x14>)
 800b682:	f7fc fbb3 	bl	8007dec <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
 800b686:	fab0 f080 	clz	r0, r0
 800b68a:	0940      	lsrs	r0, r0, #5
 800b68c:	bd08      	pop	{r3, pc}
 800b68e:	bf00      	nop
 800b690:	20006194 	.word	0x20006194

0800b694 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b694:	b510      	push	{r4, lr}
 800b696:	b090      	sub	sp, #64	; 0x40
 800b698:	4604      	mov	r4, r0
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	460b      	mov	r3, r1
 800b69e:	4601      	mov	r1, r0
 800b6a0:	480a      	ldr	r0, [pc, #40]	; (800b6cc <USBH_read+0x38>)
 800b6a2:	f7fc fbcc 	bl	8007e3e <USBH_MSC_Read>
 800b6a6:	b168      	cbz	r0, 800b6c4 <USBH_read+0x30>
  {
    res = RES_OK;
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800b6a8:	aa03      	add	r2, sp, #12
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	4807      	ldr	r0, [pc, #28]	; (800b6cc <USBH_read+0x38>)
 800b6ae:	f7fc fbae 	bl	8007e0e <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800b6b2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b6b6:	2b28      	cmp	r3, #40	; 0x28
 800b6b8:	d006      	beq.n	800b6c8 <USBH_read+0x34>
 800b6ba:	2b3a      	cmp	r3, #58	; 0x3a
 800b6bc:	d004      	beq.n	800b6c8 <USBH_read+0x34>
 800b6be:	2b04      	cmp	r3, #4
 800b6c0:	d002      	beq.n	800b6c8 <USBH_read+0x34>
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
      break; 

    default:
      res = RES_ERROR;
 800b6c2:	2001      	movs	r0, #1
      break;
    }
  }

  return res;
}
 800b6c4:	b010      	add	sp, #64	; 0x40
 800b6c6:	bd10      	pop	{r4, pc}
      res = RES_NOTRDY;
 800b6c8:	2003      	movs	r0, #3
 800b6ca:	e7fb      	b.n	800b6c4 <USBH_read+0x30>
 800b6cc:	20006194 	.word	0x20006194

0800b6d0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b6d0:	b510      	push	{r4, lr}
 800b6d2:	4614      	mov	r4, r2
 800b6d4:	b08e      	sub	sp, #56	; 0x38
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 800b6d6:	2903      	cmp	r1, #3
 800b6d8:	d803      	bhi.n	800b6e2 <USBH_ioctl+0x12>
 800b6da:	e8df f001 	tbb	[pc, r1]
 800b6de:	0525      	.short	0x0525
 800b6e0:	1a10      	.short	0x1a10
      res = RES_ERROR;
    }
    break;

  default:
    res = RES_PARERR;
 800b6e2:	2004      	movs	r0, #4
  }

  return res;
}
 800b6e4:	b00e      	add	sp, #56	; 0x38
 800b6e6:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b6e8:	4601      	mov	r1, r0
 800b6ea:	aa01      	add	r2, sp, #4
 800b6ec:	480f      	ldr	r0, [pc, #60]	; (800b72c <USBH_ioctl+0x5c>)
 800b6ee:	f7fc fb8e 	bl	8007e0e <USBH_MSC_GetLUNInfo>
 800b6f2:	b108      	cbz	r0, 800b6f8 <USBH_ioctl+0x28>
      res = RES_ERROR;
 800b6f4:	2001      	movs	r0, #1
 800b6f6:	e7f5      	b.n	800b6e4 <USBH_ioctl+0x14>
      *(DWORD*)buff = info.capacity.block_nbr;
 800b6f8:	9b02      	ldr	r3, [sp, #8]
      *(DWORD*)buff = info.capacity.block_size;
 800b6fa:	6023      	str	r3, [r4, #0]
 800b6fc:	e7f2      	b.n	800b6e4 <USBH_ioctl+0x14>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b6fe:	4601      	mov	r1, r0
 800b700:	aa01      	add	r2, sp, #4
 800b702:	480a      	ldr	r0, [pc, #40]	; (800b72c <USBH_ioctl+0x5c>)
 800b704:	f7fc fb83 	bl	8007e0e <USBH_MSC_GetLUNInfo>
 800b708:	2800      	cmp	r0, #0
 800b70a:	d1f3      	bne.n	800b6f4 <USBH_ioctl+0x24>
      *(DWORD*)buff = info.capacity.block_size;
 800b70c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b710:	e7f3      	b.n	800b6fa <USBH_ioctl+0x2a>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b712:	4601      	mov	r1, r0
 800b714:	aa01      	add	r2, sp, #4
 800b716:	4805      	ldr	r0, [pc, #20]	; (800b72c <USBH_ioctl+0x5c>)
 800b718:	f7fc fb79 	bl	8007e0e <USBH_MSC_GetLUNInfo>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d1e9      	bne.n	800b6f4 <USBH_ioctl+0x24>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800b720:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b724:	0a5b      	lsrs	r3, r3, #9
 800b726:	e7e8      	b.n	800b6fa <USBH_ioctl+0x2a>
    res = RES_OK;
 800b728:	2000      	movs	r0, #0
 800b72a:	e7db      	b.n	800b6e4 <USBH_ioctl+0x14>
 800b72c:	20006194 	.word	0x20006194

0800b730 <USBH_write>:
{
 800b730:	b510      	push	{r4, lr}
 800b732:	b090      	sub	sp, #64	; 0x40
 800b734:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800b736:	9300      	str	r3, [sp, #0]
 800b738:	460b      	mov	r3, r1
 800b73a:	4601      	mov	r1, r0
 800b73c:	480d      	ldr	r0, [pc, #52]	; (800b774 <USBH_write+0x44>)
 800b73e:	f7fc fbc1 	bl	8007ec4 <USBH_MSC_Write>
 800b742:	b160      	cbz	r0, 800b75e <USBH_write+0x2e>
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800b744:	aa03      	add	r2, sp, #12
 800b746:	4621      	mov	r1, r4
 800b748:	480a      	ldr	r0, [pc, #40]	; (800b774 <USBH_write+0x44>)
 800b74a:	f7fc fb60 	bl	8007e0e <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 800b74e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b752:	2b27      	cmp	r3, #39	; 0x27
 800b754:	d00b      	beq.n	800b76e <USBH_write+0x3e>
 800b756:	d804      	bhi.n	800b762 <USBH_write+0x32>
 800b758:	2b04      	cmp	r3, #4
 800b75a:	d106      	bne.n	800b76a <USBH_write+0x3a>
      res = RES_NOTRDY;
 800b75c:	2003      	movs	r0, #3
}
 800b75e:	b010      	add	sp, #64	; 0x40
 800b760:	bd10      	pop	{r4, pc}
    switch (info.sense.asc)
 800b762:	2b28      	cmp	r3, #40	; 0x28
 800b764:	d0fa      	beq.n	800b75c <USBH_write+0x2c>
 800b766:	2b3a      	cmp	r3, #58	; 0x3a
 800b768:	e7f7      	b.n	800b75a <USBH_write+0x2a>
      res = RES_ERROR;
 800b76a:	2001      	movs	r0, #1
 800b76c:	e7f7      	b.n	800b75e <USBH_write+0x2e>
      res = RES_WRPRT;
 800b76e:	2002      	movs	r0, #2
 800b770:	e7f5      	b.n	800b75e <USBH_write+0x2e>
 800b772:	bf00      	nop
 800b774:	20006194 	.word	0x20006194

0800b778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b778:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b7b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b77c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b77e:	e003      	b.n	800b788 <LoopCopyDataInit>

0800b780 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b780:	4b0c      	ldr	r3, [pc, #48]	; (800b7b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b782:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b784:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b786:	3104      	adds	r1, #4

0800b788 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b788:	480b      	ldr	r0, [pc, #44]	; (800b7b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b78a:	4b0c      	ldr	r3, [pc, #48]	; (800b7bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b78c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b78e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b790:	d3f6      	bcc.n	800b780 <CopyDataInit>
  ldr  r2, =_sbss
 800b792:	4a0b      	ldr	r2, [pc, #44]	; (800b7c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b794:	e002      	b.n	800b79c <LoopFillZerobss>

0800b796 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b796:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b798:	f842 3b04 	str.w	r3, [r2], #4

0800b79c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b79c:	4b09      	ldr	r3, [pc, #36]	; (800b7c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b79e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b7a0:	d3f9      	bcc.n	800b796 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b7a2:	f7ff fda5 	bl	800b2f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b7a6:	f000 f81f 	bl	800b7e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b7aa:	f7ff fb99 	bl	800aee0 <main>
  bx  lr    
 800b7ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b7b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b7b4:	0800eaf8 	.word	0x0800eaf8
  ldr  r0, =_sdata
 800b7b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b7bc:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 800b7c0:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 800b7c4:	200067f8 	.word	0x200067f8

0800b7c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b7c8:	e7fe      	b.n	800b7c8 <ADC_IRQHandler>
	...

0800b7cc <calloc>:
 800b7cc:	4b02      	ldr	r3, [pc, #8]	; (800b7d8 <calloc+0xc>)
 800b7ce:	460a      	mov	r2, r1
 800b7d0:	4601      	mov	r1, r0
 800b7d2:	6818      	ldr	r0, [r3, #0]
 800b7d4:	f000 b844 	b.w	800b860 <_calloc_r>
 800b7d8:	20000088 	.word	0x20000088

0800b7dc <__errno>:
 800b7dc:	4b01      	ldr	r3, [pc, #4]	; (800b7e4 <__errno+0x8>)
 800b7de:	6818      	ldr	r0, [r3, #0]
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	20000088 	.word	0x20000088

0800b7e8 <__libc_init_array>:
 800b7e8:	b570      	push	{r4, r5, r6, lr}
 800b7ea:	4e0d      	ldr	r6, [pc, #52]	; (800b820 <__libc_init_array+0x38>)
 800b7ec:	4c0d      	ldr	r4, [pc, #52]	; (800b824 <__libc_init_array+0x3c>)
 800b7ee:	1ba4      	subs	r4, r4, r6
 800b7f0:	10a4      	asrs	r4, r4, #2
 800b7f2:	2500      	movs	r5, #0
 800b7f4:	42a5      	cmp	r5, r4
 800b7f6:	d109      	bne.n	800b80c <__libc_init_array+0x24>
 800b7f8:	4e0b      	ldr	r6, [pc, #44]	; (800b828 <__libc_init_array+0x40>)
 800b7fa:	4c0c      	ldr	r4, [pc, #48]	; (800b82c <__libc_init_array+0x44>)
 800b7fc:	f000 ffa0 	bl	800c740 <_init>
 800b800:	1ba4      	subs	r4, r4, r6
 800b802:	10a4      	asrs	r4, r4, #2
 800b804:	2500      	movs	r5, #0
 800b806:	42a5      	cmp	r5, r4
 800b808:	d105      	bne.n	800b816 <__libc_init_array+0x2e>
 800b80a:	bd70      	pop	{r4, r5, r6, pc}
 800b80c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b810:	4798      	blx	r3
 800b812:	3501      	adds	r5, #1
 800b814:	e7ee      	b.n	800b7f4 <__libc_init_array+0xc>
 800b816:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b81a:	4798      	blx	r3
 800b81c:	3501      	adds	r5, #1
 800b81e:	e7f2      	b.n	800b806 <__libc_init_array+0x1e>
 800b820:	0800eaf0 	.word	0x0800eaf0
 800b824:	0800eaf0 	.word	0x0800eaf0
 800b828:	0800eaf0 	.word	0x0800eaf0
 800b82c:	0800eaf4 	.word	0x0800eaf4

0800b830 <malloc>:
 800b830:	4b02      	ldr	r3, [pc, #8]	; (800b83c <malloc+0xc>)
 800b832:	4601      	mov	r1, r0
 800b834:	6818      	ldr	r0, [r3, #0]
 800b836:	f000 b86f 	b.w	800b918 <_malloc_r>
 800b83a:	bf00      	nop
 800b83c:	20000088 	.word	0x20000088

0800b840 <free>:
 800b840:	4b02      	ldr	r3, [pc, #8]	; (800b84c <free+0xc>)
 800b842:	4601      	mov	r1, r0
 800b844:	6818      	ldr	r0, [r3, #0]
 800b846:	f000 b819 	b.w	800b87c <_free_r>
 800b84a:	bf00      	nop
 800b84c:	20000088 	.word	0x20000088

0800b850 <memset>:
 800b850:	4402      	add	r2, r0
 800b852:	4603      	mov	r3, r0
 800b854:	4293      	cmp	r3, r2
 800b856:	d100      	bne.n	800b85a <memset+0xa>
 800b858:	4770      	bx	lr
 800b85a:	f803 1b01 	strb.w	r1, [r3], #1
 800b85e:	e7f9      	b.n	800b854 <memset+0x4>

0800b860 <_calloc_r>:
 800b860:	b538      	push	{r3, r4, r5, lr}
 800b862:	fb02 f401 	mul.w	r4, r2, r1
 800b866:	4621      	mov	r1, r4
 800b868:	f000 f856 	bl	800b918 <_malloc_r>
 800b86c:	4605      	mov	r5, r0
 800b86e:	b118      	cbz	r0, 800b878 <_calloc_r+0x18>
 800b870:	4622      	mov	r2, r4
 800b872:	2100      	movs	r1, #0
 800b874:	f7ff ffec 	bl	800b850 <memset>
 800b878:	4628      	mov	r0, r5
 800b87a:	bd38      	pop	{r3, r4, r5, pc}

0800b87c <_free_r>:
 800b87c:	b538      	push	{r3, r4, r5, lr}
 800b87e:	4605      	mov	r5, r0
 800b880:	2900      	cmp	r1, #0
 800b882:	d045      	beq.n	800b910 <_free_r+0x94>
 800b884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b888:	1f0c      	subs	r4, r1, #4
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	bfb8      	it	lt
 800b88e:	18e4      	addlt	r4, r4, r3
 800b890:	f000 fbe0 	bl	800c054 <__malloc_lock>
 800b894:	4a1f      	ldr	r2, [pc, #124]	; (800b914 <_free_r+0x98>)
 800b896:	6813      	ldr	r3, [r2, #0]
 800b898:	4610      	mov	r0, r2
 800b89a:	b933      	cbnz	r3, 800b8aa <_free_r+0x2e>
 800b89c:	6063      	str	r3, [r4, #4]
 800b89e:	6014      	str	r4, [r2, #0]
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8a6:	f000 bbd6 	b.w	800c056 <__malloc_unlock>
 800b8aa:	42a3      	cmp	r3, r4
 800b8ac:	d90c      	bls.n	800b8c8 <_free_r+0x4c>
 800b8ae:	6821      	ldr	r1, [r4, #0]
 800b8b0:	1862      	adds	r2, r4, r1
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	bf04      	itt	eq
 800b8b6:	681a      	ldreq	r2, [r3, #0]
 800b8b8:	685b      	ldreq	r3, [r3, #4]
 800b8ba:	6063      	str	r3, [r4, #4]
 800b8bc:	bf04      	itt	eq
 800b8be:	1852      	addeq	r2, r2, r1
 800b8c0:	6022      	streq	r2, [r4, #0]
 800b8c2:	6004      	str	r4, [r0, #0]
 800b8c4:	e7ec      	b.n	800b8a0 <_free_r+0x24>
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	685a      	ldr	r2, [r3, #4]
 800b8ca:	b10a      	cbz	r2, 800b8d0 <_free_r+0x54>
 800b8cc:	42a2      	cmp	r2, r4
 800b8ce:	d9fa      	bls.n	800b8c6 <_free_r+0x4a>
 800b8d0:	6819      	ldr	r1, [r3, #0]
 800b8d2:	1858      	adds	r0, r3, r1
 800b8d4:	42a0      	cmp	r0, r4
 800b8d6:	d10b      	bne.n	800b8f0 <_free_r+0x74>
 800b8d8:	6820      	ldr	r0, [r4, #0]
 800b8da:	4401      	add	r1, r0
 800b8dc:	1858      	adds	r0, r3, r1
 800b8de:	4282      	cmp	r2, r0
 800b8e0:	6019      	str	r1, [r3, #0]
 800b8e2:	d1dd      	bne.n	800b8a0 <_free_r+0x24>
 800b8e4:	6810      	ldr	r0, [r2, #0]
 800b8e6:	6852      	ldr	r2, [r2, #4]
 800b8e8:	605a      	str	r2, [r3, #4]
 800b8ea:	4401      	add	r1, r0
 800b8ec:	6019      	str	r1, [r3, #0]
 800b8ee:	e7d7      	b.n	800b8a0 <_free_r+0x24>
 800b8f0:	d902      	bls.n	800b8f8 <_free_r+0x7c>
 800b8f2:	230c      	movs	r3, #12
 800b8f4:	602b      	str	r3, [r5, #0]
 800b8f6:	e7d3      	b.n	800b8a0 <_free_r+0x24>
 800b8f8:	6820      	ldr	r0, [r4, #0]
 800b8fa:	1821      	adds	r1, r4, r0
 800b8fc:	428a      	cmp	r2, r1
 800b8fe:	bf04      	itt	eq
 800b900:	6811      	ldreq	r1, [r2, #0]
 800b902:	6852      	ldreq	r2, [r2, #4]
 800b904:	6062      	str	r2, [r4, #4]
 800b906:	bf04      	itt	eq
 800b908:	1809      	addeq	r1, r1, r0
 800b90a:	6021      	streq	r1, [r4, #0]
 800b90c:	605c      	str	r4, [r3, #4]
 800b90e:	e7c7      	b.n	800b8a0 <_free_r+0x24>
 800b910:	bd38      	pop	{r3, r4, r5, pc}
 800b912:	bf00      	nop
 800b914:	20000248 	.word	0x20000248

0800b918 <_malloc_r>:
 800b918:	b570      	push	{r4, r5, r6, lr}
 800b91a:	1ccd      	adds	r5, r1, #3
 800b91c:	f025 0503 	bic.w	r5, r5, #3
 800b920:	3508      	adds	r5, #8
 800b922:	2d0c      	cmp	r5, #12
 800b924:	bf38      	it	cc
 800b926:	250c      	movcc	r5, #12
 800b928:	2d00      	cmp	r5, #0
 800b92a:	4606      	mov	r6, r0
 800b92c:	db01      	blt.n	800b932 <_malloc_r+0x1a>
 800b92e:	42a9      	cmp	r1, r5
 800b930:	d903      	bls.n	800b93a <_malloc_r+0x22>
 800b932:	230c      	movs	r3, #12
 800b934:	6033      	str	r3, [r6, #0]
 800b936:	2000      	movs	r0, #0
 800b938:	bd70      	pop	{r4, r5, r6, pc}
 800b93a:	f000 fb8b 	bl	800c054 <__malloc_lock>
 800b93e:	4a21      	ldr	r2, [pc, #132]	; (800b9c4 <_malloc_r+0xac>)
 800b940:	6814      	ldr	r4, [r2, #0]
 800b942:	4621      	mov	r1, r4
 800b944:	b991      	cbnz	r1, 800b96c <_malloc_r+0x54>
 800b946:	4c20      	ldr	r4, [pc, #128]	; (800b9c8 <_malloc_r+0xb0>)
 800b948:	6823      	ldr	r3, [r4, #0]
 800b94a:	b91b      	cbnz	r3, 800b954 <_malloc_r+0x3c>
 800b94c:	4630      	mov	r0, r6
 800b94e:	f000 f8b9 	bl	800bac4 <_sbrk_r>
 800b952:	6020      	str	r0, [r4, #0]
 800b954:	4629      	mov	r1, r5
 800b956:	4630      	mov	r0, r6
 800b958:	f000 f8b4 	bl	800bac4 <_sbrk_r>
 800b95c:	1c43      	adds	r3, r0, #1
 800b95e:	d124      	bne.n	800b9aa <_malloc_r+0x92>
 800b960:	230c      	movs	r3, #12
 800b962:	6033      	str	r3, [r6, #0]
 800b964:	4630      	mov	r0, r6
 800b966:	f000 fb76 	bl	800c056 <__malloc_unlock>
 800b96a:	e7e4      	b.n	800b936 <_malloc_r+0x1e>
 800b96c:	680b      	ldr	r3, [r1, #0]
 800b96e:	1b5b      	subs	r3, r3, r5
 800b970:	d418      	bmi.n	800b9a4 <_malloc_r+0x8c>
 800b972:	2b0b      	cmp	r3, #11
 800b974:	d90f      	bls.n	800b996 <_malloc_r+0x7e>
 800b976:	600b      	str	r3, [r1, #0]
 800b978:	50cd      	str	r5, [r1, r3]
 800b97a:	18cc      	adds	r4, r1, r3
 800b97c:	4630      	mov	r0, r6
 800b97e:	f000 fb6a 	bl	800c056 <__malloc_unlock>
 800b982:	f104 000b 	add.w	r0, r4, #11
 800b986:	1d23      	adds	r3, r4, #4
 800b988:	f020 0007 	bic.w	r0, r0, #7
 800b98c:	1ac3      	subs	r3, r0, r3
 800b98e:	d0d3      	beq.n	800b938 <_malloc_r+0x20>
 800b990:	425a      	negs	r2, r3
 800b992:	50e2      	str	r2, [r4, r3]
 800b994:	e7d0      	b.n	800b938 <_malloc_r+0x20>
 800b996:	428c      	cmp	r4, r1
 800b998:	684b      	ldr	r3, [r1, #4]
 800b99a:	bf16      	itet	ne
 800b99c:	6063      	strne	r3, [r4, #4]
 800b99e:	6013      	streq	r3, [r2, #0]
 800b9a0:	460c      	movne	r4, r1
 800b9a2:	e7eb      	b.n	800b97c <_malloc_r+0x64>
 800b9a4:	460c      	mov	r4, r1
 800b9a6:	6849      	ldr	r1, [r1, #4]
 800b9a8:	e7cc      	b.n	800b944 <_malloc_r+0x2c>
 800b9aa:	1cc4      	adds	r4, r0, #3
 800b9ac:	f024 0403 	bic.w	r4, r4, #3
 800b9b0:	42a0      	cmp	r0, r4
 800b9b2:	d005      	beq.n	800b9c0 <_malloc_r+0xa8>
 800b9b4:	1a21      	subs	r1, r4, r0
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	f000 f884 	bl	800bac4 <_sbrk_r>
 800b9bc:	3001      	adds	r0, #1
 800b9be:	d0cf      	beq.n	800b960 <_malloc_r+0x48>
 800b9c0:	6025      	str	r5, [r4, #0]
 800b9c2:	e7db      	b.n	800b97c <_malloc_r+0x64>
 800b9c4:	20000248 	.word	0x20000248
 800b9c8:	2000024c 	.word	0x2000024c

0800b9cc <iprintf>:
 800b9cc:	b40f      	push	{r0, r1, r2, r3}
 800b9ce:	4b0a      	ldr	r3, [pc, #40]	; (800b9f8 <iprintf+0x2c>)
 800b9d0:	b513      	push	{r0, r1, r4, lr}
 800b9d2:	681c      	ldr	r4, [r3, #0]
 800b9d4:	b124      	cbz	r4, 800b9e0 <iprintf+0x14>
 800b9d6:	69a3      	ldr	r3, [r4, #24]
 800b9d8:	b913      	cbnz	r3, 800b9e0 <iprintf+0x14>
 800b9da:	4620      	mov	r0, r4
 800b9dc:	f000 fa4c 	bl	800be78 <__sinit>
 800b9e0:	ab05      	add	r3, sp, #20
 800b9e2:	9a04      	ldr	r2, [sp, #16]
 800b9e4:	68a1      	ldr	r1, [r4, #8]
 800b9e6:	9301      	str	r3, [sp, #4]
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	f000 fb5f 	bl	800c0ac <_vfiprintf_r>
 800b9ee:	b002      	add	sp, #8
 800b9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9f4:	b004      	add	sp, #16
 800b9f6:	4770      	bx	lr
 800b9f8:	20000088 	.word	0x20000088

0800b9fc <_puts_r>:
 800b9fc:	b570      	push	{r4, r5, r6, lr}
 800b9fe:	460e      	mov	r6, r1
 800ba00:	4605      	mov	r5, r0
 800ba02:	b118      	cbz	r0, 800ba0c <_puts_r+0x10>
 800ba04:	6983      	ldr	r3, [r0, #24]
 800ba06:	b90b      	cbnz	r3, 800ba0c <_puts_r+0x10>
 800ba08:	f000 fa36 	bl	800be78 <__sinit>
 800ba0c:	69ab      	ldr	r3, [r5, #24]
 800ba0e:	68ac      	ldr	r4, [r5, #8]
 800ba10:	b913      	cbnz	r3, 800ba18 <_puts_r+0x1c>
 800ba12:	4628      	mov	r0, r5
 800ba14:	f000 fa30 	bl	800be78 <__sinit>
 800ba18:	4b23      	ldr	r3, [pc, #140]	; (800baa8 <_puts_r+0xac>)
 800ba1a:	429c      	cmp	r4, r3
 800ba1c:	d117      	bne.n	800ba4e <_puts_r+0x52>
 800ba1e:	686c      	ldr	r4, [r5, #4]
 800ba20:	89a3      	ldrh	r3, [r4, #12]
 800ba22:	071b      	lsls	r3, r3, #28
 800ba24:	d51d      	bpl.n	800ba62 <_puts_r+0x66>
 800ba26:	6923      	ldr	r3, [r4, #16]
 800ba28:	b1db      	cbz	r3, 800ba62 <_puts_r+0x66>
 800ba2a:	3e01      	subs	r6, #1
 800ba2c:	68a3      	ldr	r3, [r4, #8]
 800ba2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ba32:	3b01      	subs	r3, #1
 800ba34:	60a3      	str	r3, [r4, #8]
 800ba36:	b9e9      	cbnz	r1, 800ba74 <_puts_r+0x78>
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	da2e      	bge.n	800ba9a <_puts_r+0x9e>
 800ba3c:	4622      	mov	r2, r4
 800ba3e:	210a      	movs	r1, #10
 800ba40:	4628      	mov	r0, r5
 800ba42:	f000 f869 	bl	800bb18 <__swbuf_r>
 800ba46:	3001      	adds	r0, #1
 800ba48:	d011      	beq.n	800ba6e <_puts_r+0x72>
 800ba4a:	200a      	movs	r0, #10
 800ba4c:	e011      	b.n	800ba72 <_puts_r+0x76>
 800ba4e:	4b17      	ldr	r3, [pc, #92]	; (800baac <_puts_r+0xb0>)
 800ba50:	429c      	cmp	r4, r3
 800ba52:	d101      	bne.n	800ba58 <_puts_r+0x5c>
 800ba54:	68ac      	ldr	r4, [r5, #8]
 800ba56:	e7e3      	b.n	800ba20 <_puts_r+0x24>
 800ba58:	4b15      	ldr	r3, [pc, #84]	; (800bab0 <_puts_r+0xb4>)
 800ba5a:	429c      	cmp	r4, r3
 800ba5c:	bf08      	it	eq
 800ba5e:	68ec      	ldreq	r4, [r5, #12]
 800ba60:	e7de      	b.n	800ba20 <_puts_r+0x24>
 800ba62:	4621      	mov	r1, r4
 800ba64:	4628      	mov	r0, r5
 800ba66:	f000 f8a9 	bl	800bbbc <__swsetup_r>
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	d0dd      	beq.n	800ba2a <_puts_r+0x2e>
 800ba6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba72:	bd70      	pop	{r4, r5, r6, pc}
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	da04      	bge.n	800ba82 <_puts_r+0x86>
 800ba78:	69a2      	ldr	r2, [r4, #24]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	dc06      	bgt.n	800ba8c <_puts_r+0x90>
 800ba7e:	290a      	cmp	r1, #10
 800ba80:	d004      	beq.n	800ba8c <_puts_r+0x90>
 800ba82:	6823      	ldr	r3, [r4, #0]
 800ba84:	1c5a      	adds	r2, r3, #1
 800ba86:	6022      	str	r2, [r4, #0]
 800ba88:	7019      	strb	r1, [r3, #0]
 800ba8a:	e7cf      	b.n	800ba2c <_puts_r+0x30>
 800ba8c:	4622      	mov	r2, r4
 800ba8e:	4628      	mov	r0, r5
 800ba90:	f000 f842 	bl	800bb18 <__swbuf_r>
 800ba94:	3001      	adds	r0, #1
 800ba96:	d1c9      	bne.n	800ba2c <_puts_r+0x30>
 800ba98:	e7e9      	b.n	800ba6e <_puts_r+0x72>
 800ba9a:	6823      	ldr	r3, [r4, #0]
 800ba9c:	200a      	movs	r0, #10
 800ba9e:	1c5a      	adds	r2, r3, #1
 800baa0:	6022      	str	r2, [r4, #0]
 800baa2:	7018      	strb	r0, [r3, #0]
 800baa4:	e7e5      	b.n	800ba72 <_puts_r+0x76>
 800baa6:	bf00      	nop
 800baa8:	0800d020 	.word	0x0800d020
 800baac:	0800d040 	.word	0x0800d040
 800bab0:	0800d000 	.word	0x0800d000

0800bab4 <puts>:
 800bab4:	4b02      	ldr	r3, [pc, #8]	; (800bac0 <puts+0xc>)
 800bab6:	4601      	mov	r1, r0
 800bab8:	6818      	ldr	r0, [r3, #0]
 800baba:	f7ff bf9f 	b.w	800b9fc <_puts_r>
 800babe:	bf00      	nop
 800bac0:	20000088 	.word	0x20000088

0800bac4 <_sbrk_r>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	4c06      	ldr	r4, [pc, #24]	; (800bae0 <_sbrk_r+0x1c>)
 800bac8:	2300      	movs	r3, #0
 800baca:	4605      	mov	r5, r0
 800bacc:	4608      	mov	r0, r1
 800bace:	6023      	str	r3, [r4, #0]
 800bad0:	f7ff fbe8 	bl	800b2a4 <_sbrk>
 800bad4:	1c43      	adds	r3, r0, #1
 800bad6:	d102      	bne.n	800bade <_sbrk_r+0x1a>
 800bad8:	6823      	ldr	r3, [r4, #0]
 800bada:	b103      	cbz	r3, 800bade <_sbrk_r+0x1a>
 800badc:	602b      	str	r3, [r5, #0]
 800bade:	bd38      	pop	{r3, r4, r5, pc}
 800bae0:	200067f4 	.word	0x200067f4

0800bae4 <strstr>:
 800bae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bae6:	7803      	ldrb	r3, [r0, #0]
 800bae8:	b17b      	cbz	r3, 800bb0a <strstr+0x26>
 800baea:	4604      	mov	r4, r0
 800baec:	7823      	ldrb	r3, [r4, #0]
 800baee:	4620      	mov	r0, r4
 800baf0:	1c66      	adds	r6, r4, #1
 800baf2:	b17b      	cbz	r3, 800bb14 <strstr+0x30>
 800baf4:	1e4a      	subs	r2, r1, #1
 800baf6:	1e63      	subs	r3, r4, #1
 800baf8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800bafc:	b14d      	cbz	r5, 800bb12 <strstr+0x2e>
 800bafe:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800bb02:	42af      	cmp	r7, r5
 800bb04:	4634      	mov	r4, r6
 800bb06:	d0f7      	beq.n	800baf8 <strstr+0x14>
 800bb08:	e7f0      	b.n	800baec <strstr+0x8>
 800bb0a:	780b      	ldrb	r3, [r1, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	bf18      	it	ne
 800bb10:	2000      	movne	r0, #0
 800bb12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb14:	4618      	mov	r0, r3
 800bb16:	e7fc      	b.n	800bb12 <strstr+0x2e>

0800bb18 <__swbuf_r>:
 800bb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1a:	460e      	mov	r6, r1
 800bb1c:	4614      	mov	r4, r2
 800bb1e:	4605      	mov	r5, r0
 800bb20:	b118      	cbz	r0, 800bb2a <__swbuf_r+0x12>
 800bb22:	6983      	ldr	r3, [r0, #24]
 800bb24:	b90b      	cbnz	r3, 800bb2a <__swbuf_r+0x12>
 800bb26:	f000 f9a7 	bl	800be78 <__sinit>
 800bb2a:	4b21      	ldr	r3, [pc, #132]	; (800bbb0 <__swbuf_r+0x98>)
 800bb2c:	429c      	cmp	r4, r3
 800bb2e:	d12a      	bne.n	800bb86 <__swbuf_r+0x6e>
 800bb30:	686c      	ldr	r4, [r5, #4]
 800bb32:	69a3      	ldr	r3, [r4, #24]
 800bb34:	60a3      	str	r3, [r4, #8]
 800bb36:	89a3      	ldrh	r3, [r4, #12]
 800bb38:	071a      	lsls	r2, r3, #28
 800bb3a:	d52e      	bpl.n	800bb9a <__swbuf_r+0x82>
 800bb3c:	6923      	ldr	r3, [r4, #16]
 800bb3e:	b363      	cbz	r3, 800bb9a <__swbuf_r+0x82>
 800bb40:	6923      	ldr	r3, [r4, #16]
 800bb42:	6820      	ldr	r0, [r4, #0]
 800bb44:	1ac0      	subs	r0, r0, r3
 800bb46:	6963      	ldr	r3, [r4, #20]
 800bb48:	b2f6      	uxtb	r6, r6
 800bb4a:	4283      	cmp	r3, r0
 800bb4c:	4637      	mov	r7, r6
 800bb4e:	dc04      	bgt.n	800bb5a <__swbuf_r+0x42>
 800bb50:	4621      	mov	r1, r4
 800bb52:	4628      	mov	r0, r5
 800bb54:	f000 f926 	bl	800bda4 <_fflush_r>
 800bb58:	bb28      	cbnz	r0, 800bba6 <__swbuf_r+0x8e>
 800bb5a:	68a3      	ldr	r3, [r4, #8]
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	60a3      	str	r3, [r4, #8]
 800bb60:	6823      	ldr	r3, [r4, #0]
 800bb62:	1c5a      	adds	r2, r3, #1
 800bb64:	6022      	str	r2, [r4, #0]
 800bb66:	701e      	strb	r6, [r3, #0]
 800bb68:	6963      	ldr	r3, [r4, #20]
 800bb6a:	3001      	adds	r0, #1
 800bb6c:	4283      	cmp	r3, r0
 800bb6e:	d004      	beq.n	800bb7a <__swbuf_r+0x62>
 800bb70:	89a3      	ldrh	r3, [r4, #12]
 800bb72:	07db      	lsls	r3, r3, #31
 800bb74:	d519      	bpl.n	800bbaa <__swbuf_r+0x92>
 800bb76:	2e0a      	cmp	r6, #10
 800bb78:	d117      	bne.n	800bbaa <__swbuf_r+0x92>
 800bb7a:	4621      	mov	r1, r4
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	f000 f911 	bl	800bda4 <_fflush_r>
 800bb82:	b190      	cbz	r0, 800bbaa <__swbuf_r+0x92>
 800bb84:	e00f      	b.n	800bba6 <__swbuf_r+0x8e>
 800bb86:	4b0b      	ldr	r3, [pc, #44]	; (800bbb4 <__swbuf_r+0x9c>)
 800bb88:	429c      	cmp	r4, r3
 800bb8a:	d101      	bne.n	800bb90 <__swbuf_r+0x78>
 800bb8c:	68ac      	ldr	r4, [r5, #8]
 800bb8e:	e7d0      	b.n	800bb32 <__swbuf_r+0x1a>
 800bb90:	4b09      	ldr	r3, [pc, #36]	; (800bbb8 <__swbuf_r+0xa0>)
 800bb92:	429c      	cmp	r4, r3
 800bb94:	bf08      	it	eq
 800bb96:	68ec      	ldreq	r4, [r5, #12]
 800bb98:	e7cb      	b.n	800bb32 <__swbuf_r+0x1a>
 800bb9a:	4621      	mov	r1, r4
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	f000 f80d 	bl	800bbbc <__swsetup_r>
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d0cc      	beq.n	800bb40 <__swbuf_r+0x28>
 800bba6:	f04f 37ff 	mov.w	r7, #4294967295
 800bbaa:	4638      	mov	r0, r7
 800bbac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	0800d020 	.word	0x0800d020
 800bbb4:	0800d040 	.word	0x0800d040
 800bbb8:	0800d000 	.word	0x0800d000

0800bbbc <__swsetup_r>:
 800bbbc:	4b32      	ldr	r3, [pc, #200]	; (800bc88 <__swsetup_r+0xcc>)
 800bbbe:	b570      	push	{r4, r5, r6, lr}
 800bbc0:	681d      	ldr	r5, [r3, #0]
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	460c      	mov	r4, r1
 800bbc6:	b125      	cbz	r5, 800bbd2 <__swsetup_r+0x16>
 800bbc8:	69ab      	ldr	r3, [r5, #24]
 800bbca:	b913      	cbnz	r3, 800bbd2 <__swsetup_r+0x16>
 800bbcc:	4628      	mov	r0, r5
 800bbce:	f000 f953 	bl	800be78 <__sinit>
 800bbd2:	4b2e      	ldr	r3, [pc, #184]	; (800bc8c <__swsetup_r+0xd0>)
 800bbd4:	429c      	cmp	r4, r3
 800bbd6:	d10f      	bne.n	800bbf8 <__swsetup_r+0x3c>
 800bbd8:	686c      	ldr	r4, [r5, #4]
 800bbda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbde:	b29a      	uxth	r2, r3
 800bbe0:	0715      	lsls	r5, r2, #28
 800bbe2:	d42c      	bmi.n	800bc3e <__swsetup_r+0x82>
 800bbe4:	06d0      	lsls	r0, r2, #27
 800bbe6:	d411      	bmi.n	800bc0c <__swsetup_r+0x50>
 800bbe8:	2209      	movs	r2, #9
 800bbea:	6032      	str	r2, [r6, #0]
 800bbec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbf0:	81a3      	strh	r3, [r4, #12]
 800bbf2:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf6:	e03e      	b.n	800bc76 <__swsetup_r+0xba>
 800bbf8:	4b25      	ldr	r3, [pc, #148]	; (800bc90 <__swsetup_r+0xd4>)
 800bbfa:	429c      	cmp	r4, r3
 800bbfc:	d101      	bne.n	800bc02 <__swsetup_r+0x46>
 800bbfe:	68ac      	ldr	r4, [r5, #8]
 800bc00:	e7eb      	b.n	800bbda <__swsetup_r+0x1e>
 800bc02:	4b24      	ldr	r3, [pc, #144]	; (800bc94 <__swsetup_r+0xd8>)
 800bc04:	429c      	cmp	r4, r3
 800bc06:	bf08      	it	eq
 800bc08:	68ec      	ldreq	r4, [r5, #12]
 800bc0a:	e7e6      	b.n	800bbda <__swsetup_r+0x1e>
 800bc0c:	0751      	lsls	r1, r2, #29
 800bc0e:	d512      	bpl.n	800bc36 <__swsetup_r+0x7a>
 800bc10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc12:	b141      	cbz	r1, 800bc26 <__swsetup_r+0x6a>
 800bc14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc18:	4299      	cmp	r1, r3
 800bc1a:	d002      	beq.n	800bc22 <__swsetup_r+0x66>
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f7ff fe2d 	bl	800b87c <_free_r>
 800bc22:	2300      	movs	r3, #0
 800bc24:	6363      	str	r3, [r4, #52]	; 0x34
 800bc26:	89a3      	ldrh	r3, [r4, #12]
 800bc28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc2c:	81a3      	strh	r3, [r4, #12]
 800bc2e:	2300      	movs	r3, #0
 800bc30:	6063      	str	r3, [r4, #4]
 800bc32:	6923      	ldr	r3, [r4, #16]
 800bc34:	6023      	str	r3, [r4, #0]
 800bc36:	89a3      	ldrh	r3, [r4, #12]
 800bc38:	f043 0308 	orr.w	r3, r3, #8
 800bc3c:	81a3      	strh	r3, [r4, #12]
 800bc3e:	6923      	ldr	r3, [r4, #16]
 800bc40:	b94b      	cbnz	r3, 800bc56 <__swsetup_r+0x9a>
 800bc42:	89a3      	ldrh	r3, [r4, #12]
 800bc44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc4c:	d003      	beq.n	800bc56 <__swsetup_r+0x9a>
 800bc4e:	4621      	mov	r1, r4
 800bc50:	4630      	mov	r0, r6
 800bc52:	f000 f9bf 	bl	800bfd4 <__smakebuf_r>
 800bc56:	89a2      	ldrh	r2, [r4, #12]
 800bc58:	f012 0301 	ands.w	r3, r2, #1
 800bc5c:	d00c      	beq.n	800bc78 <__swsetup_r+0xbc>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	60a3      	str	r3, [r4, #8]
 800bc62:	6963      	ldr	r3, [r4, #20]
 800bc64:	425b      	negs	r3, r3
 800bc66:	61a3      	str	r3, [r4, #24]
 800bc68:	6923      	ldr	r3, [r4, #16]
 800bc6a:	b953      	cbnz	r3, 800bc82 <__swsetup_r+0xc6>
 800bc6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc70:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800bc74:	d1ba      	bne.n	800bbec <__swsetup_r+0x30>
 800bc76:	bd70      	pop	{r4, r5, r6, pc}
 800bc78:	0792      	lsls	r2, r2, #30
 800bc7a:	bf58      	it	pl
 800bc7c:	6963      	ldrpl	r3, [r4, #20]
 800bc7e:	60a3      	str	r3, [r4, #8]
 800bc80:	e7f2      	b.n	800bc68 <__swsetup_r+0xac>
 800bc82:	2000      	movs	r0, #0
 800bc84:	e7f7      	b.n	800bc76 <__swsetup_r+0xba>
 800bc86:	bf00      	nop
 800bc88:	20000088 	.word	0x20000088
 800bc8c:	0800d020 	.word	0x0800d020
 800bc90:	0800d040 	.word	0x0800d040
 800bc94:	0800d000 	.word	0x0800d000

0800bc98 <__sflush_r>:
 800bc98:	898a      	ldrh	r2, [r1, #12]
 800bc9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc9e:	4605      	mov	r5, r0
 800bca0:	0710      	lsls	r0, r2, #28
 800bca2:	460c      	mov	r4, r1
 800bca4:	d458      	bmi.n	800bd58 <__sflush_r+0xc0>
 800bca6:	684b      	ldr	r3, [r1, #4]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	dc05      	bgt.n	800bcb8 <__sflush_r+0x20>
 800bcac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	dc02      	bgt.n	800bcb8 <__sflush_r+0x20>
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcba:	2e00      	cmp	r6, #0
 800bcbc:	d0f9      	beq.n	800bcb2 <__sflush_r+0x1a>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bcc4:	682f      	ldr	r7, [r5, #0]
 800bcc6:	6a21      	ldr	r1, [r4, #32]
 800bcc8:	602b      	str	r3, [r5, #0]
 800bcca:	d032      	beq.n	800bd32 <__sflush_r+0x9a>
 800bccc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcce:	89a3      	ldrh	r3, [r4, #12]
 800bcd0:	075a      	lsls	r2, r3, #29
 800bcd2:	d505      	bpl.n	800bce0 <__sflush_r+0x48>
 800bcd4:	6863      	ldr	r3, [r4, #4]
 800bcd6:	1ac0      	subs	r0, r0, r3
 800bcd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcda:	b10b      	cbz	r3, 800bce0 <__sflush_r+0x48>
 800bcdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcde:	1ac0      	subs	r0, r0, r3
 800bce0:	2300      	movs	r3, #0
 800bce2:	4602      	mov	r2, r0
 800bce4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bce6:	6a21      	ldr	r1, [r4, #32]
 800bce8:	4628      	mov	r0, r5
 800bcea:	47b0      	blx	r6
 800bcec:	1c43      	adds	r3, r0, #1
 800bcee:	89a3      	ldrh	r3, [r4, #12]
 800bcf0:	d106      	bne.n	800bd00 <__sflush_r+0x68>
 800bcf2:	6829      	ldr	r1, [r5, #0]
 800bcf4:	291d      	cmp	r1, #29
 800bcf6:	d848      	bhi.n	800bd8a <__sflush_r+0xf2>
 800bcf8:	4a29      	ldr	r2, [pc, #164]	; (800bda0 <__sflush_r+0x108>)
 800bcfa:	40ca      	lsrs	r2, r1
 800bcfc:	07d6      	lsls	r6, r2, #31
 800bcfe:	d544      	bpl.n	800bd8a <__sflush_r+0xf2>
 800bd00:	2200      	movs	r2, #0
 800bd02:	6062      	str	r2, [r4, #4]
 800bd04:	04d9      	lsls	r1, r3, #19
 800bd06:	6922      	ldr	r2, [r4, #16]
 800bd08:	6022      	str	r2, [r4, #0]
 800bd0a:	d504      	bpl.n	800bd16 <__sflush_r+0x7e>
 800bd0c:	1c42      	adds	r2, r0, #1
 800bd0e:	d101      	bne.n	800bd14 <__sflush_r+0x7c>
 800bd10:	682b      	ldr	r3, [r5, #0]
 800bd12:	b903      	cbnz	r3, 800bd16 <__sflush_r+0x7e>
 800bd14:	6560      	str	r0, [r4, #84]	; 0x54
 800bd16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd18:	602f      	str	r7, [r5, #0]
 800bd1a:	2900      	cmp	r1, #0
 800bd1c:	d0c9      	beq.n	800bcb2 <__sflush_r+0x1a>
 800bd1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd22:	4299      	cmp	r1, r3
 800bd24:	d002      	beq.n	800bd2c <__sflush_r+0x94>
 800bd26:	4628      	mov	r0, r5
 800bd28:	f7ff fda8 	bl	800b87c <_free_r>
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	6360      	str	r0, [r4, #52]	; 0x34
 800bd30:	e7c0      	b.n	800bcb4 <__sflush_r+0x1c>
 800bd32:	2301      	movs	r3, #1
 800bd34:	4628      	mov	r0, r5
 800bd36:	47b0      	blx	r6
 800bd38:	1c41      	adds	r1, r0, #1
 800bd3a:	d1c8      	bne.n	800bcce <__sflush_r+0x36>
 800bd3c:	682b      	ldr	r3, [r5, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d0c5      	beq.n	800bcce <__sflush_r+0x36>
 800bd42:	2b1d      	cmp	r3, #29
 800bd44:	d001      	beq.n	800bd4a <__sflush_r+0xb2>
 800bd46:	2b16      	cmp	r3, #22
 800bd48:	d101      	bne.n	800bd4e <__sflush_r+0xb6>
 800bd4a:	602f      	str	r7, [r5, #0]
 800bd4c:	e7b1      	b.n	800bcb2 <__sflush_r+0x1a>
 800bd4e:	89a3      	ldrh	r3, [r4, #12]
 800bd50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd54:	81a3      	strh	r3, [r4, #12]
 800bd56:	e7ad      	b.n	800bcb4 <__sflush_r+0x1c>
 800bd58:	690f      	ldr	r7, [r1, #16]
 800bd5a:	2f00      	cmp	r7, #0
 800bd5c:	d0a9      	beq.n	800bcb2 <__sflush_r+0x1a>
 800bd5e:	0793      	lsls	r3, r2, #30
 800bd60:	680e      	ldr	r6, [r1, #0]
 800bd62:	bf08      	it	eq
 800bd64:	694b      	ldreq	r3, [r1, #20]
 800bd66:	600f      	str	r7, [r1, #0]
 800bd68:	bf18      	it	ne
 800bd6a:	2300      	movne	r3, #0
 800bd6c:	eba6 0807 	sub.w	r8, r6, r7
 800bd70:	608b      	str	r3, [r1, #8]
 800bd72:	f1b8 0f00 	cmp.w	r8, #0
 800bd76:	dd9c      	ble.n	800bcb2 <__sflush_r+0x1a>
 800bd78:	4643      	mov	r3, r8
 800bd7a:	463a      	mov	r2, r7
 800bd7c:	6a21      	ldr	r1, [r4, #32]
 800bd7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd80:	4628      	mov	r0, r5
 800bd82:	47b0      	blx	r6
 800bd84:	2800      	cmp	r0, #0
 800bd86:	dc06      	bgt.n	800bd96 <__sflush_r+0xfe>
 800bd88:	89a3      	ldrh	r3, [r4, #12]
 800bd8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd8e:	81a3      	strh	r3, [r4, #12]
 800bd90:	f04f 30ff 	mov.w	r0, #4294967295
 800bd94:	e78e      	b.n	800bcb4 <__sflush_r+0x1c>
 800bd96:	4407      	add	r7, r0
 800bd98:	eba8 0800 	sub.w	r8, r8, r0
 800bd9c:	e7e9      	b.n	800bd72 <__sflush_r+0xda>
 800bd9e:	bf00      	nop
 800bda0:	20400001 	.word	0x20400001

0800bda4 <_fflush_r>:
 800bda4:	b538      	push	{r3, r4, r5, lr}
 800bda6:	690b      	ldr	r3, [r1, #16]
 800bda8:	4605      	mov	r5, r0
 800bdaa:	460c      	mov	r4, r1
 800bdac:	b1db      	cbz	r3, 800bde6 <_fflush_r+0x42>
 800bdae:	b118      	cbz	r0, 800bdb8 <_fflush_r+0x14>
 800bdb0:	6983      	ldr	r3, [r0, #24]
 800bdb2:	b90b      	cbnz	r3, 800bdb8 <_fflush_r+0x14>
 800bdb4:	f000 f860 	bl	800be78 <__sinit>
 800bdb8:	4b0c      	ldr	r3, [pc, #48]	; (800bdec <_fflush_r+0x48>)
 800bdba:	429c      	cmp	r4, r3
 800bdbc:	d109      	bne.n	800bdd2 <_fflush_r+0x2e>
 800bdbe:	686c      	ldr	r4, [r5, #4]
 800bdc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdc4:	b17b      	cbz	r3, 800bde6 <_fflush_r+0x42>
 800bdc6:	4621      	mov	r1, r4
 800bdc8:	4628      	mov	r0, r5
 800bdca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdce:	f7ff bf63 	b.w	800bc98 <__sflush_r>
 800bdd2:	4b07      	ldr	r3, [pc, #28]	; (800bdf0 <_fflush_r+0x4c>)
 800bdd4:	429c      	cmp	r4, r3
 800bdd6:	d101      	bne.n	800bddc <_fflush_r+0x38>
 800bdd8:	68ac      	ldr	r4, [r5, #8]
 800bdda:	e7f1      	b.n	800bdc0 <_fflush_r+0x1c>
 800bddc:	4b05      	ldr	r3, [pc, #20]	; (800bdf4 <_fflush_r+0x50>)
 800bdde:	429c      	cmp	r4, r3
 800bde0:	bf08      	it	eq
 800bde2:	68ec      	ldreq	r4, [r5, #12]
 800bde4:	e7ec      	b.n	800bdc0 <_fflush_r+0x1c>
 800bde6:	2000      	movs	r0, #0
 800bde8:	bd38      	pop	{r3, r4, r5, pc}
 800bdea:	bf00      	nop
 800bdec:	0800d020 	.word	0x0800d020
 800bdf0:	0800d040 	.word	0x0800d040
 800bdf4:	0800d000 	.word	0x0800d000

0800bdf8 <std>:
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	b510      	push	{r4, lr}
 800bdfc:	4604      	mov	r4, r0
 800bdfe:	e9c0 3300 	strd	r3, r3, [r0]
 800be02:	6083      	str	r3, [r0, #8]
 800be04:	8181      	strh	r1, [r0, #12]
 800be06:	6643      	str	r3, [r0, #100]	; 0x64
 800be08:	81c2      	strh	r2, [r0, #14]
 800be0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be0e:	6183      	str	r3, [r0, #24]
 800be10:	4619      	mov	r1, r3
 800be12:	2208      	movs	r2, #8
 800be14:	305c      	adds	r0, #92	; 0x5c
 800be16:	f7ff fd1b 	bl	800b850 <memset>
 800be1a:	4b05      	ldr	r3, [pc, #20]	; (800be30 <std+0x38>)
 800be1c:	6263      	str	r3, [r4, #36]	; 0x24
 800be1e:	4b05      	ldr	r3, [pc, #20]	; (800be34 <std+0x3c>)
 800be20:	62a3      	str	r3, [r4, #40]	; 0x28
 800be22:	4b05      	ldr	r3, [pc, #20]	; (800be38 <std+0x40>)
 800be24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be26:	4b05      	ldr	r3, [pc, #20]	; (800be3c <std+0x44>)
 800be28:	6224      	str	r4, [r4, #32]
 800be2a:	6323      	str	r3, [r4, #48]	; 0x30
 800be2c:	bd10      	pop	{r4, pc}
 800be2e:	bf00      	nop
 800be30:	0800c5e9 	.word	0x0800c5e9
 800be34:	0800c60b 	.word	0x0800c60b
 800be38:	0800c643 	.word	0x0800c643
 800be3c:	0800c667 	.word	0x0800c667

0800be40 <_cleanup_r>:
 800be40:	4901      	ldr	r1, [pc, #4]	; (800be48 <_cleanup_r+0x8>)
 800be42:	f000 b885 	b.w	800bf50 <_fwalk_reent>
 800be46:	bf00      	nop
 800be48:	0800bda5 	.word	0x0800bda5

0800be4c <__sfmoreglue>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	1e4a      	subs	r2, r1, #1
 800be50:	2568      	movs	r5, #104	; 0x68
 800be52:	4355      	muls	r5, r2
 800be54:	460e      	mov	r6, r1
 800be56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be5a:	f7ff fd5d 	bl	800b918 <_malloc_r>
 800be5e:	4604      	mov	r4, r0
 800be60:	b140      	cbz	r0, 800be74 <__sfmoreglue+0x28>
 800be62:	2100      	movs	r1, #0
 800be64:	e9c0 1600 	strd	r1, r6, [r0]
 800be68:	300c      	adds	r0, #12
 800be6a:	60a0      	str	r0, [r4, #8]
 800be6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be70:	f7ff fcee 	bl	800b850 <memset>
 800be74:	4620      	mov	r0, r4
 800be76:	bd70      	pop	{r4, r5, r6, pc}

0800be78 <__sinit>:
 800be78:	6983      	ldr	r3, [r0, #24]
 800be7a:	b510      	push	{r4, lr}
 800be7c:	4604      	mov	r4, r0
 800be7e:	bb33      	cbnz	r3, 800bece <__sinit+0x56>
 800be80:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800be84:	6503      	str	r3, [r0, #80]	; 0x50
 800be86:	4b12      	ldr	r3, [pc, #72]	; (800bed0 <__sinit+0x58>)
 800be88:	4a12      	ldr	r2, [pc, #72]	; (800bed4 <__sinit+0x5c>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	6282      	str	r2, [r0, #40]	; 0x28
 800be8e:	4298      	cmp	r0, r3
 800be90:	bf04      	itt	eq
 800be92:	2301      	moveq	r3, #1
 800be94:	6183      	streq	r3, [r0, #24]
 800be96:	f000 f81f 	bl	800bed8 <__sfp>
 800be9a:	6060      	str	r0, [r4, #4]
 800be9c:	4620      	mov	r0, r4
 800be9e:	f000 f81b 	bl	800bed8 <__sfp>
 800bea2:	60a0      	str	r0, [r4, #8]
 800bea4:	4620      	mov	r0, r4
 800bea6:	f000 f817 	bl	800bed8 <__sfp>
 800beaa:	2200      	movs	r2, #0
 800beac:	60e0      	str	r0, [r4, #12]
 800beae:	2104      	movs	r1, #4
 800beb0:	6860      	ldr	r0, [r4, #4]
 800beb2:	f7ff ffa1 	bl	800bdf8 <std>
 800beb6:	2201      	movs	r2, #1
 800beb8:	2109      	movs	r1, #9
 800beba:	68a0      	ldr	r0, [r4, #8]
 800bebc:	f7ff ff9c 	bl	800bdf8 <std>
 800bec0:	2202      	movs	r2, #2
 800bec2:	2112      	movs	r1, #18
 800bec4:	68e0      	ldr	r0, [r4, #12]
 800bec6:	f7ff ff97 	bl	800bdf8 <std>
 800beca:	2301      	movs	r3, #1
 800becc:	61a3      	str	r3, [r4, #24]
 800bece:	bd10      	pop	{r4, pc}
 800bed0:	0800cffc 	.word	0x0800cffc
 800bed4:	0800be41 	.word	0x0800be41

0800bed8 <__sfp>:
 800bed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beda:	4b1b      	ldr	r3, [pc, #108]	; (800bf48 <__sfp+0x70>)
 800bedc:	681e      	ldr	r6, [r3, #0]
 800bede:	69b3      	ldr	r3, [r6, #24]
 800bee0:	4607      	mov	r7, r0
 800bee2:	b913      	cbnz	r3, 800beea <__sfp+0x12>
 800bee4:	4630      	mov	r0, r6
 800bee6:	f7ff ffc7 	bl	800be78 <__sinit>
 800beea:	3648      	adds	r6, #72	; 0x48
 800beec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bef0:	3b01      	subs	r3, #1
 800bef2:	d503      	bpl.n	800befc <__sfp+0x24>
 800bef4:	6833      	ldr	r3, [r6, #0]
 800bef6:	b133      	cbz	r3, 800bf06 <__sfp+0x2e>
 800bef8:	6836      	ldr	r6, [r6, #0]
 800befa:	e7f7      	b.n	800beec <__sfp+0x14>
 800befc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf00:	b16d      	cbz	r5, 800bf1e <__sfp+0x46>
 800bf02:	3468      	adds	r4, #104	; 0x68
 800bf04:	e7f4      	b.n	800bef0 <__sfp+0x18>
 800bf06:	2104      	movs	r1, #4
 800bf08:	4638      	mov	r0, r7
 800bf0a:	f7ff ff9f 	bl	800be4c <__sfmoreglue>
 800bf0e:	6030      	str	r0, [r6, #0]
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d1f1      	bne.n	800bef8 <__sfp+0x20>
 800bf14:	230c      	movs	r3, #12
 800bf16:	603b      	str	r3, [r7, #0]
 800bf18:	4604      	mov	r4, r0
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf1e:	4b0b      	ldr	r3, [pc, #44]	; (800bf4c <__sfp+0x74>)
 800bf20:	6665      	str	r5, [r4, #100]	; 0x64
 800bf22:	e9c4 5500 	strd	r5, r5, [r4]
 800bf26:	60a5      	str	r5, [r4, #8]
 800bf28:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bf2c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800bf30:	2208      	movs	r2, #8
 800bf32:	4629      	mov	r1, r5
 800bf34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf38:	f7ff fc8a 	bl	800b850 <memset>
 800bf3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf44:	e7e9      	b.n	800bf1a <__sfp+0x42>
 800bf46:	bf00      	nop
 800bf48:	0800cffc 	.word	0x0800cffc
 800bf4c:	ffff0001 	.word	0xffff0001

0800bf50 <_fwalk_reent>:
 800bf50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf54:	4680      	mov	r8, r0
 800bf56:	4689      	mov	r9, r1
 800bf58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf5c:	2600      	movs	r6, #0
 800bf5e:	b914      	cbnz	r4, 800bf66 <_fwalk_reent+0x16>
 800bf60:	4630      	mov	r0, r6
 800bf62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf66:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800bf6a:	3f01      	subs	r7, #1
 800bf6c:	d501      	bpl.n	800bf72 <_fwalk_reent+0x22>
 800bf6e:	6824      	ldr	r4, [r4, #0]
 800bf70:	e7f5      	b.n	800bf5e <_fwalk_reent+0xe>
 800bf72:	89ab      	ldrh	r3, [r5, #12]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d907      	bls.n	800bf88 <_fwalk_reent+0x38>
 800bf78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	d003      	beq.n	800bf88 <_fwalk_reent+0x38>
 800bf80:	4629      	mov	r1, r5
 800bf82:	4640      	mov	r0, r8
 800bf84:	47c8      	blx	r9
 800bf86:	4306      	orrs	r6, r0
 800bf88:	3568      	adds	r5, #104	; 0x68
 800bf8a:	e7ee      	b.n	800bf6a <_fwalk_reent+0x1a>

0800bf8c <__swhatbuf_r>:
 800bf8c:	b570      	push	{r4, r5, r6, lr}
 800bf8e:	460e      	mov	r6, r1
 800bf90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf94:	2900      	cmp	r1, #0
 800bf96:	b096      	sub	sp, #88	; 0x58
 800bf98:	4614      	mov	r4, r2
 800bf9a:	461d      	mov	r5, r3
 800bf9c:	da07      	bge.n	800bfae <__swhatbuf_r+0x22>
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	602b      	str	r3, [r5, #0]
 800bfa2:	89b3      	ldrh	r3, [r6, #12]
 800bfa4:	061a      	lsls	r2, r3, #24
 800bfa6:	d410      	bmi.n	800bfca <__swhatbuf_r+0x3e>
 800bfa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfac:	e00e      	b.n	800bfcc <__swhatbuf_r+0x40>
 800bfae:	466a      	mov	r2, sp
 800bfb0:	f000 fb80 	bl	800c6b4 <_fstat_r>
 800bfb4:	2800      	cmp	r0, #0
 800bfb6:	dbf2      	blt.n	800bf9e <__swhatbuf_r+0x12>
 800bfb8:	9a01      	ldr	r2, [sp, #4]
 800bfba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bfbe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bfc2:	425a      	negs	r2, r3
 800bfc4:	415a      	adcs	r2, r3
 800bfc6:	602a      	str	r2, [r5, #0]
 800bfc8:	e7ee      	b.n	800bfa8 <__swhatbuf_r+0x1c>
 800bfca:	2340      	movs	r3, #64	; 0x40
 800bfcc:	2000      	movs	r0, #0
 800bfce:	6023      	str	r3, [r4, #0]
 800bfd0:	b016      	add	sp, #88	; 0x58
 800bfd2:	bd70      	pop	{r4, r5, r6, pc}

0800bfd4 <__smakebuf_r>:
 800bfd4:	898b      	ldrh	r3, [r1, #12]
 800bfd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bfd8:	079d      	lsls	r5, r3, #30
 800bfda:	4606      	mov	r6, r0
 800bfdc:	460c      	mov	r4, r1
 800bfde:	d507      	bpl.n	800bff0 <__smakebuf_r+0x1c>
 800bfe0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bfe4:	6023      	str	r3, [r4, #0]
 800bfe6:	6123      	str	r3, [r4, #16]
 800bfe8:	2301      	movs	r3, #1
 800bfea:	6163      	str	r3, [r4, #20]
 800bfec:	b002      	add	sp, #8
 800bfee:	bd70      	pop	{r4, r5, r6, pc}
 800bff0:	ab01      	add	r3, sp, #4
 800bff2:	466a      	mov	r2, sp
 800bff4:	f7ff ffca 	bl	800bf8c <__swhatbuf_r>
 800bff8:	9900      	ldr	r1, [sp, #0]
 800bffa:	4605      	mov	r5, r0
 800bffc:	4630      	mov	r0, r6
 800bffe:	f7ff fc8b 	bl	800b918 <_malloc_r>
 800c002:	b948      	cbnz	r0, 800c018 <__smakebuf_r+0x44>
 800c004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c008:	059a      	lsls	r2, r3, #22
 800c00a:	d4ef      	bmi.n	800bfec <__smakebuf_r+0x18>
 800c00c:	f023 0303 	bic.w	r3, r3, #3
 800c010:	f043 0302 	orr.w	r3, r3, #2
 800c014:	81a3      	strh	r3, [r4, #12]
 800c016:	e7e3      	b.n	800bfe0 <__smakebuf_r+0xc>
 800c018:	4b0d      	ldr	r3, [pc, #52]	; (800c050 <__smakebuf_r+0x7c>)
 800c01a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c01c:	89a3      	ldrh	r3, [r4, #12]
 800c01e:	6020      	str	r0, [r4, #0]
 800c020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c024:	81a3      	strh	r3, [r4, #12]
 800c026:	9b00      	ldr	r3, [sp, #0]
 800c028:	6163      	str	r3, [r4, #20]
 800c02a:	9b01      	ldr	r3, [sp, #4]
 800c02c:	6120      	str	r0, [r4, #16]
 800c02e:	b15b      	cbz	r3, 800c048 <__smakebuf_r+0x74>
 800c030:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c034:	4630      	mov	r0, r6
 800c036:	f000 fb4f 	bl	800c6d8 <_isatty_r>
 800c03a:	b128      	cbz	r0, 800c048 <__smakebuf_r+0x74>
 800c03c:	89a3      	ldrh	r3, [r4, #12]
 800c03e:	f023 0303 	bic.w	r3, r3, #3
 800c042:	f043 0301 	orr.w	r3, r3, #1
 800c046:	81a3      	strh	r3, [r4, #12]
 800c048:	89a3      	ldrh	r3, [r4, #12]
 800c04a:	431d      	orrs	r5, r3
 800c04c:	81a5      	strh	r5, [r4, #12]
 800c04e:	e7cd      	b.n	800bfec <__smakebuf_r+0x18>
 800c050:	0800be41 	.word	0x0800be41

0800c054 <__malloc_lock>:
 800c054:	4770      	bx	lr

0800c056 <__malloc_unlock>:
 800c056:	4770      	bx	lr

0800c058 <__sfputc_r>:
 800c058:	6893      	ldr	r3, [r2, #8]
 800c05a:	3b01      	subs	r3, #1
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	b410      	push	{r4}
 800c060:	6093      	str	r3, [r2, #8]
 800c062:	da08      	bge.n	800c076 <__sfputc_r+0x1e>
 800c064:	6994      	ldr	r4, [r2, #24]
 800c066:	42a3      	cmp	r3, r4
 800c068:	db01      	blt.n	800c06e <__sfputc_r+0x16>
 800c06a:	290a      	cmp	r1, #10
 800c06c:	d103      	bne.n	800c076 <__sfputc_r+0x1e>
 800c06e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c072:	f7ff bd51 	b.w	800bb18 <__swbuf_r>
 800c076:	6813      	ldr	r3, [r2, #0]
 800c078:	1c58      	adds	r0, r3, #1
 800c07a:	6010      	str	r0, [r2, #0]
 800c07c:	7019      	strb	r1, [r3, #0]
 800c07e:	4608      	mov	r0, r1
 800c080:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c084:	4770      	bx	lr

0800c086 <__sfputs_r>:
 800c086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c088:	4606      	mov	r6, r0
 800c08a:	460f      	mov	r7, r1
 800c08c:	4614      	mov	r4, r2
 800c08e:	18d5      	adds	r5, r2, r3
 800c090:	42ac      	cmp	r4, r5
 800c092:	d101      	bne.n	800c098 <__sfputs_r+0x12>
 800c094:	2000      	movs	r0, #0
 800c096:	e007      	b.n	800c0a8 <__sfputs_r+0x22>
 800c098:	463a      	mov	r2, r7
 800c09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c09e:	4630      	mov	r0, r6
 800c0a0:	f7ff ffda 	bl	800c058 <__sfputc_r>
 800c0a4:	1c43      	adds	r3, r0, #1
 800c0a6:	d1f3      	bne.n	800c090 <__sfputs_r+0xa>
 800c0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c0ac <_vfiprintf_r>:
 800c0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b0:	460c      	mov	r4, r1
 800c0b2:	b09d      	sub	sp, #116	; 0x74
 800c0b4:	4617      	mov	r7, r2
 800c0b6:	461d      	mov	r5, r3
 800c0b8:	4606      	mov	r6, r0
 800c0ba:	b118      	cbz	r0, 800c0c4 <_vfiprintf_r+0x18>
 800c0bc:	6983      	ldr	r3, [r0, #24]
 800c0be:	b90b      	cbnz	r3, 800c0c4 <_vfiprintf_r+0x18>
 800c0c0:	f7ff feda 	bl	800be78 <__sinit>
 800c0c4:	4b7c      	ldr	r3, [pc, #496]	; (800c2b8 <_vfiprintf_r+0x20c>)
 800c0c6:	429c      	cmp	r4, r3
 800c0c8:	d158      	bne.n	800c17c <_vfiprintf_r+0xd0>
 800c0ca:	6874      	ldr	r4, [r6, #4]
 800c0cc:	89a3      	ldrh	r3, [r4, #12]
 800c0ce:	0718      	lsls	r0, r3, #28
 800c0d0:	d55e      	bpl.n	800c190 <_vfiprintf_r+0xe4>
 800c0d2:	6923      	ldr	r3, [r4, #16]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d05b      	beq.n	800c190 <_vfiprintf_r+0xe4>
 800c0d8:	2300      	movs	r3, #0
 800c0da:	9309      	str	r3, [sp, #36]	; 0x24
 800c0dc:	2320      	movs	r3, #32
 800c0de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0e2:	2330      	movs	r3, #48	; 0x30
 800c0e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0e8:	9503      	str	r5, [sp, #12]
 800c0ea:	f04f 0b01 	mov.w	fp, #1
 800c0ee:	46b8      	mov	r8, r7
 800c0f0:	4645      	mov	r5, r8
 800c0f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c0f6:	b10b      	cbz	r3, 800c0fc <_vfiprintf_r+0x50>
 800c0f8:	2b25      	cmp	r3, #37	; 0x25
 800c0fa:	d154      	bne.n	800c1a6 <_vfiprintf_r+0xfa>
 800c0fc:	ebb8 0a07 	subs.w	sl, r8, r7
 800c100:	d00b      	beq.n	800c11a <_vfiprintf_r+0x6e>
 800c102:	4653      	mov	r3, sl
 800c104:	463a      	mov	r2, r7
 800c106:	4621      	mov	r1, r4
 800c108:	4630      	mov	r0, r6
 800c10a:	f7ff ffbc 	bl	800c086 <__sfputs_r>
 800c10e:	3001      	adds	r0, #1
 800c110:	f000 80c2 	beq.w	800c298 <_vfiprintf_r+0x1ec>
 800c114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c116:	4453      	add	r3, sl
 800c118:	9309      	str	r3, [sp, #36]	; 0x24
 800c11a:	f898 3000 	ldrb.w	r3, [r8]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	f000 80ba 	beq.w	800c298 <_vfiprintf_r+0x1ec>
 800c124:	2300      	movs	r3, #0
 800c126:	f04f 32ff 	mov.w	r2, #4294967295
 800c12a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c12e:	9304      	str	r3, [sp, #16]
 800c130:	9307      	str	r3, [sp, #28]
 800c132:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c136:	931a      	str	r3, [sp, #104]	; 0x68
 800c138:	46a8      	mov	r8, r5
 800c13a:	2205      	movs	r2, #5
 800c13c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c140:	485e      	ldr	r0, [pc, #376]	; (800c2bc <_vfiprintf_r+0x210>)
 800c142:	f7f7 f985 	bl	8003450 <memchr>
 800c146:	9b04      	ldr	r3, [sp, #16]
 800c148:	bb78      	cbnz	r0, 800c1aa <_vfiprintf_r+0xfe>
 800c14a:	06d9      	lsls	r1, r3, #27
 800c14c:	bf44      	itt	mi
 800c14e:	2220      	movmi	r2, #32
 800c150:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c154:	071a      	lsls	r2, r3, #28
 800c156:	bf44      	itt	mi
 800c158:	222b      	movmi	r2, #43	; 0x2b
 800c15a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c15e:	782a      	ldrb	r2, [r5, #0]
 800c160:	2a2a      	cmp	r2, #42	; 0x2a
 800c162:	d02a      	beq.n	800c1ba <_vfiprintf_r+0x10e>
 800c164:	9a07      	ldr	r2, [sp, #28]
 800c166:	46a8      	mov	r8, r5
 800c168:	2000      	movs	r0, #0
 800c16a:	250a      	movs	r5, #10
 800c16c:	4641      	mov	r1, r8
 800c16e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c172:	3b30      	subs	r3, #48	; 0x30
 800c174:	2b09      	cmp	r3, #9
 800c176:	d969      	bls.n	800c24c <_vfiprintf_r+0x1a0>
 800c178:	b360      	cbz	r0, 800c1d4 <_vfiprintf_r+0x128>
 800c17a:	e024      	b.n	800c1c6 <_vfiprintf_r+0x11a>
 800c17c:	4b50      	ldr	r3, [pc, #320]	; (800c2c0 <_vfiprintf_r+0x214>)
 800c17e:	429c      	cmp	r4, r3
 800c180:	d101      	bne.n	800c186 <_vfiprintf_r+0xda>
 800c182:	68b4      	ldr	r4, [r6, #8]
 800c184:	e7a2      	b.n	800c0cc <_vfiprintf_r+0x20>
 800c186:	4b4f      	ldr	r3, [pc, #316]	; (800c2c4 <_vfiprintf_r+0x218>)
 800c188:	429c      	cmp	r4, r3
 800c18a:	bf08      	it	eq
 800c18c:	68f4      	ldreq	r4, [r6, #12]
 800c18e:	e79d      	b.n	800c0cc <_vfiprintf_r+0x20>
 800c190:	4621      	mov	r1, r4
 800c192:	4630      	mov	r0, r6
 800c194:	f7ff fd12 	bl	800bbbc <__swsetup_r>
 800c198:	2800      	cmp	r0, #0
 800c19a:	d09d      	beq.n	800c0d8 <_vfiprintf_r+0x2c>
 800c19c:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a0:	b01d      	add	sp, #116	; 0x74
 800c1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a6:	46a8      	mov	r8, r5
 800c1a8:	e7a2      	b.n	800c0f0 <_vfiprintf_r+0x44>
 800c1aa:	4a44      	ldr	r2, [pc, #272]	; (800c2bc <_vfiprintf_r+0x210>)
 800c1ac:	1a80      	subs	r0, r0, r2
 800c1ae:	fa0b f000 	lsl.w	r0, fp, r0
 800c1b2:	4318      	orrs	r0, r3
 800c1b4:	9004      	str	r0, [sp, #16]
 800c1b6:	4645      	mov	r5, r8
 800c1b8:	e7be      	b.n	800c138 <_vfiprintf_r+0x8c>
 800c1ba:	9a03      	ldr	r2, [sp, #12]
 800c1bc:	1d11      	adds	r1, r2, #4
 800c1be:	6812      	ldr	r2, [r2, #0]
 800c1c0:	9103      	str	r1, [sp, #12]
 800c1c2:	2a00      	cmp	r2, #0
 800c1c4:	db01      	blt.n	800c1ca <_vfiprintf_r+0x11e>
 800c1c6:	9207      	str	r2, [sp, #28]
 800c1c8:	e004      	b.n	800c1d4 <_vfiprintf_r+0x128>
 800c1ca:	4252      	negs	r2, r2
 800c1cc:	f043 0302 	orr.w	r3, r3, #2
 800c1d0:	9207      	str	r2, [sp, #28]
 800c1d2:	9304      	str	r3, [sp, #16]
 800c1d4:	f898 3000 	ldrb.w	r3, [r8]
 800c1d8:	2b2e      	cmp	r3, #46	; 0x2e
 800c1da:	d10e      	bne.n	800c1fa <_vfiprintf_r+0x14e>
 800c1dc:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c1e2:	d138      	bne.n	800c256 <_vfiprintf_r+0x1aa>
 800c1e4:	9b03      	ldr	r3, [sp, #12]
 800c1e6:	1d1a      	adds	r2, r3, #4
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	9203      	str	r2, [sp, #12]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	bfb8      	it	lt
 800c1f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1f4:	f108 0802 	add.w	r8, r8, #2
 800c1f8:	9305      	str	r3, [sp, #20]
 800c1fa:	4d33      	ldr	r5, [pc, #204]	; (800c2c8 <_vfiprintf_r+0x21c>)
 800c1fc:	f898 1000 	ldrb.w	r1, [r8]
 800c200:	2203      	movs	r2, #3
 800c202:	4628      	mov	r0, r5
 800c204:	f7f7 f924 	bl	8003450 <memchr>
 800c208:	b140      	cbz	r0, 800c21c <_vfiprintf_r+0x170>
 800c20a:	2340      	movs	r3, #64	; 0x40
 800c20c:	1b40      	subs	r0, r0, r5
 800c20e:	fa03 f000 	lsl.w	r0, r3, r0
 800c212:	9b04      	ldr	r3, [sp, #16]
 800c214:	4303      	orrs	r3, r0
 800c216:	f108 0801 	add.w	r8, r8, #1
 800c21a:	9304      	str	r3, [sp, #16]
 800c21c:	f898 1000 	ldrb.w	r1, [r8]
 800c220:	482a      	ldr	r0, [pc, #168]	; (800c2cc <_vfiprintf_r+0x220>)
 800c222:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c226:	2206      	movs	r2, #6
 800c228:	f108 0701 	add.w	r7, r8, #1
 800c22c:	f7f7 f910 	bl	8003450 <memchr>
 800c230:	2800      	cmp	r0, #0
 800c232:	d037      	beq.n	800c2a4 <_vfiprintf_r+0x1f8>
 800c234:	4b26      	ldr	r3, [pc, #152]	; (800c2d0 <_vfiprintf_r+0x224>)
 800c236:	bb1b      	cbnz	r3, 800c280 <_vfiprintf_r+0x1d4>
 800c238:	9b03      	ldr	r3, [sp, #12]
 800c23a:	3307      	adds	r3, #7
 800c23c:	f023 0307 	bic.w	r3, r3, #7
 800c240:	3308      	adds	r3, #8
 800c242:	9303      	str	r3, [sp, #12]
 800c244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c246:	444b      	add	r3, r9
 800c248:	9309      	str	r3, [sp, #36]	; 0x24
 800c24a:	e750      	b.n	800c0ee <_vfiprintf_r+0x42>
 800c24c:	fb05 3202 	mla	r2, r5, r2, r3
 800c250:	2001      	movs	r0, #1
 800c252:	4688      	mov	r8, r1
 800c254:	e78a      	b.n	800c16c <_vfiprintf_r+0xc0>
 800c256:	2300      	movs	r3, #0
 800c258:	f108 0801 	add.w	r8, r8, #1
 800c25c:	9305      	str	r3, [sp, #20]
 800c25e:	4619      	mov	r1, r3
 800c260:	250a      	movs	r5, #10
 800c262:	4640      	mov	r0, r8
 800c264:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c268:	3a30      	subs	r2, #48	; 0x30
 800c26a:	2a09      	cmp	r2, #9
 800c26c:	d903      	bls.n	800c276 <_vfiprintf_r+0x1ca>
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d0c3      	beq.n	800c1fa <_vfiprintf_r+0x14e>
 800c272:	9105      	str	r1, [sp, #20]
 800c274:	e7c1      	b.n	800c1fa <_vfiprintf_r+0x14e>
 800c276:	fb05 2101 	mla	r1, r5, r1, r2
 800c27a:	2301      	movs	r3, #1
 800c27c:	4680      	mov	r8, r0
 800c27e:	e7f0      	b.n	800c262 <_vfiprintf_r+0x1b6>
 800c280:	ab03      	add	r3, sp, #12
 800c282:	9300      	str	r3, [sp, #0]
 800c284:	4622      	mov	r2, r4
 800c286:	4b13      	ldr	r3, [pc, #76]	; (800c2d4 <_vfiprintf_r+0x228>)
 800c288:	a904      	add	r1, sp, #16
 800c28a:	4630      	mov	r0, r6
 800c28c:	f3af 8000 	nop.w
 800c290:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c294:	4681      	mov	r9, r0
 800c296:	d1d5      	bne.n	800c244 <_vfiprintf_r+0x198>
 800c298:	89a3      	ldrh	r3, [r4, #12]
 800c29a:	065b      	lsls	r3, r3, #25
 800c29c:	f53f af7e 	bmi.w	800c19c <_vfiprintf_r+0xf0>
 800c2a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2a2:	e77d      	b.n	800c1a0 <_vfiprintf_r+0xf4>
 800c2a4:	ab03      	add	r3, sp, #12
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	4622      	mov	r2, r4
 800c2aa:	4b0a      	ldr	r3, [pc, #40]	; (800c2d4 <_vfiprintf_r+0x228>)
 800c2ac:	a904      	add	r1, sp, #16
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	f000 f888 	bl	800c3c4 <_printf_i>
 800c2b4:	e7ec      	b.n	800c290 <_vfiprintf_r+0x1e4>
 800c2b6:	bf00      	nop
 800c2b8:	0800d020 	.word	0x0800d020
 800c2bc:	0800d060 	.word	0x0800d060
 800c2c0:	0800d040 	.word	0x0800d040
 800c2c4:	0800d000 	.word	0x0800d000
 800c2c8:	0800d066 	.word	0x0800d066
 800c2cc:	0800d06a 	.word	0x0800d06a
 800c2d0:	00000000 	.word	0x00000000
 800c2d4:	0800c087 	.word	0x0800c087

0800c2d8 <_printf_common>:
 800c2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2dc:	4691      	mov	r9, r2
 800c2de:	461f      	mov	r7, r3
 800c2e0:	688a      	ldr	r2, [r1, #8]
 800c2e2:	690b      	ldr	r3, [r1, #16]
 800c2e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	bfb8      	it	lt
 800c2ec:	4613      	movlt	r3, r2
 800c2ee:	f8c9 3000 	str.w	r3, [r9]
 800c2f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2f6:	4606      	mov	r6, r0
 800c2f8:	460c      	mov	r4, r1
 800c2fa:	b112      	cbz	r2, 800c302 <_printf_common+0x2a>
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	f8c9 3000 	str.w	r3, [r9]
 800c302:	6823      	ldr	r3, [r4, #0]
 800c304:	0699      	lsls	r1, r3, #26
 800c306:	bf42      	ittt	mi
 800c308:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c30c:	3302      	addmi	r3, #2
 800c30e:	f8c9 3000 	strmi.w	r3, [r9]
 800c312:	6825      	ldr	r5, [r4, #0]
 800c314:	f015 0506 	ands.w	r5, r5, #6
 800c318:	d107      	bne.n	800c32a <_printf_common+0x52>
 800c31a:	f104 0a19 	add.w	sl, r4, #25
 800c31e:	68e3      	ldr	r3, [r4, #12]
 800c320:	f8d9 2000 	ldr.w	r2, [r9]
 800c324:	1a9b      	subs	r3, r3, r2
 800c326:	42ab      	cmp	r3, r5
 800c328:	dc28      	bgt.n	800c37c <_printf_common+0xa4>
 800c32a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c32e:	6822      	ldr	r2, [r4, #0]
 800c330:	3300      	adds	r3, #0
 800c332:	bf18      	it	ne
 800c334:	2301      	movne	r3, #1
 800c336:	0692      	lsls	r2, r2, #26
 800c338:	d42d      	bmi.n	800c396 <_printf_common+0xbe>
 800c33a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c33e:	4639      	mov	r1, r7
 800c340:	4630      	mov	r0, r6
 800c342:	47c0      	blx	r8
 800c344:	3001      	adds	r0, #1
 800c346:	d020      	beq.n	800c38a <_printf_common+0xb2>
 800c348:	6823      	ldr	r3, [r4, #0]
 800c34a:	68e5      	ldr	r5, [r4, #12]
 800c34c:	f8d9 2000 	ldr.w	r2, [r9]
 800c350:	f003 0306 	and.w	r3, r3, #6
 800c354:	2b04      	cmp	r3, #4
 800c356:	bf08      	it	eq
 800c358:	1aad      	subeq	r5, r5, r2
 800c35a:	68a3      	ldr	r3, [r4, #8]
 800c35c:	6922      	ldr	r2, [r4, #16]
 800c35e:	bf0c      	ite	eq
 800c360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c364:	2500      	movne	r5, #0
 800c366:	4293      	cmp	r3, r2
 800c368:	bfc4      	itt	gt
 800c36a:	1a9b      	subgt	r3, r3, r2
 800c36c:	18ed      	addgt	r5, r5, r3
 800c36e:	f04f 0900 	mov.w	r9, #0
 800c372:	341a      	adds	r4, #26
 800c374:	454d      	cmp	r5, r9
 800c376:	d11a      	bne.n	800c3ae <_printf_common+0xd6>
 800c378:	2000      	movs	r0, #0
 800c37a:	e008      	b.n	800c38e <_printf_common+0xb6>
 800c37c:	2301      	movs	r3, #1
 800c37e:	4652      	mov	r2, sl
 800c380:	4639      	mov	r1, r7
 800c382:	4630      	mov	r0, r6
 800c384:	47c0      	blx	r8
 800c386:	3001      	adds	r0, #1
 800c388:	d103      	bne.n	800c392 <_printf_common+0xba>
 800c38a:	f04f 30ff 	mov.w	r0, #4294967295
 800c38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c392:	3501      	adds	r5, #1
 800c394:	e7c3      	b.n	800c31e <_printf_common+0x46>
 800c396:	18e1      	adds	r1, r4, r3
 800c398:	1c5a      	adds	r2, r3, #1
 800c39a:	2030      	movs	r0, #48	; 0x30
 800c39c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3a0:	4422      	add	r2, r4
 800c3a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3aa:	3302      	adds	r3, #2
 800c3ac:	e7c5      	b.n	800c33a <_printf_common+0x62>
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	4622      	mov	r2, r4
 800c3b2:	4639      	mov	r1, r7
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	47c0      	blx	r8
 800c3b8:	3001      	adds	r0, #1
 800c3ba:	d0e6      	beq.n	800c38a <_printf_common+0xb2>
 800c3bc:	f109 0901 	add.w	r9, r9, #1
 800c3c0:	e7d8      	b.n	800c374 <_printf_common+0x9c>
	...

0800c3c4 <_printf_i>:
 800c3c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c3cc:	460c      	mov	r4, r1
 800c3ce:	7e09      	ldrb	r1, [r1, #24]
 800c3d0:	b085      	sub	sp, #20
 800c3d2:	296e      	cmp	r1, #110	; 0x6e
 800c3d4:	4617      	mov	r7, r2
 800c3d6:	4606      	mov	r6, r0
 800c3d8:	4698      	mov	r8, r3
 800c3da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3dc:	f000 80b3 	beq.w	800c546 <_printf_i+0x182>
 800c3e0:	d822      	bhi.n	800c428 <_printf_i+0x64>
 800c3e2:	2963      	cmp	r1, #99	; 0x63
 800c3e4:	d036      	beq.n	800c454 <_printf_i+0x90>
 800c3e6:	d80a      	bhi.n	800c3fe <_printf_i+0x3a>
 800c3e8:	2900      	cmp	r1, #0
 800c3ea:	f000 80b9 	beq.w	800c560 <_printf_i+0x19c>
 800c3ee:	2958      	cmp	r1, #88	; 0x58
 800c3f0:	f000 8083 	beq.w	800c4fa <_printf_i+0x136>
 800c3f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c3fc:	e032      	b.n	800c464 <_printf_i+0xa0>
 800c3fe:	2964      	cmp	r1, #100	; 0x64
 800c400:	d001      	beq.n	800c406 <_printf_i+0x42>
 800c402:	2969      	cmp	r1, #105	; 0x69
 800c404:	d1f6      	bne.n	800c3f4 <_printf_i+0x30>
 800c406:	6820      	ldr	r0, [r4, #0]
 800c408:	6813      	ldr	r3, [r2, #0]
 800c40a:	0605      	lsls	r5, r0, #24
 800c40c:	f103 0104 	add.w	r1, r3, #4
 800c410:	d52a      	bpl.n	800c468 <_printf_i+0xa4>
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	6011      	str	r1, [r2, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	da03      	bge.n	800c422 <_printf_i+0x5e>
 800c41a:	222d      	movs	r2, #45	; 0x2d
 800c41c:	425b      	negs	r3, r3
 800c41e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c422:	486f      	ldr	r0, [pc, #444]	; (800c5e0 <_printf_i+0x21c>)
 800c424:	220a      	movs	r2, #10
 800c426:	e039      	b.n	800c49c <_printf_i+0xd8>
 800c428:	2973      	cmp	r1, #115	; 0x73
 800c42a:	f000 809d 	beq.w	800c568 <_printf_i+0x1a4>
 800c42e:	d808      	bhi.n	800c442 <_printf_i+0x7e>
 800c430:	296f      	cmp	r1, #111	; 0x6f
 800c432:	d020      	beq.n	800c476 <_printf_i+0xb2>
 800c434:	2970      	cmp	r1, #112	; 0x70
 800c436:	d1dd      	bne.n	800c3f4 <_printf_i+0x30>
 800c438:	6823      	ldr	r3, [r4, #0]
 800c43a:	f043 0320 	orr.w	r3, r3, #32
 800c43e:	6023      	str	r3, [r4, #0]
 800c440:	e003      	b.n	800c44a <_printf_i+0x86>
 800c442:	2975      	cmp	r1, #117	; 0x75
 800c444:	d017      	beq.n	800c476 <_printf_i+0xb2>
 800c446:	2978      	cmp	r1, #120	; 0x78
 800c448:	d1d4      	bne.n	800c3f4 <_printf_i+0x30>
 800c44a:	2378      	movs	r3, #120	; 0x78
 800c44c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c450:	4864      	ldr	r0, [pc, #400]	; (800c5e4 <_printf_i+0x220>)
 800c452:	e055      	b.n	800c500 <_printf_i+0x13c>
 800c454:	6813      	ldr	r3, [r2, #0]
 800c456:	1d19      	adds	r1, r3, #4
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	6011      	str	r1, [r2, #0]
 800c45c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c460:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c464:	2301      	movs	r3, #1
 800c466:	e08c      	b.n	800c582 <_printf_i+0x1be>
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	6011      	str	r1, [r2, #0]
 800c46c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c470:	bf18      	it	ne
 800c472:	b21b      	sxthne	r3, r3
 800c474:	e7cf      	b.n	800c416 <_printf_i+0x52>
 800c476:	6813      	ldr	r3, [r2, #0]
 800c478:	6825      	ldr	r5, [r4, #0]
 800c47a:	1d18      	adds	r0, r3, #4
 800c47c:	6010      	str	r0, [r2, #0]
 800c47e:	0628      	lsls	r0, r5, #24
 800c480:	d501      	bpl.n	800c486 <_printf_i+0xc2>
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	e002      	b.n	800c48c <_printf_i+0xc8>
 800c486:	0668      	lsls	r0, r5, #25
 800c488:	d5fb      	bpl.n	800c482 <_printf_i+0xbe>
 800c48a:	881b      	ldrh	r3, [r3, #0]
 800c48c:	4854      	ldr	r0, [pc, #336]	; (800c5e0 <_printf_i+0x21c>)
 800c48e:	296f      	cmp	r1, #111	; 0x6f
 800c490:	bf14      	ite	ne
 800c492:	220a      	movne	r2, #10
 800c494:	2208      	moveq	r2, #8
 800c496:	2100      	movs	r1, #0
 800c498:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c49c:	6865      	ldr	r5, [r4, #4]
 800c49e:	60a5      	str	r5, [r4, #8]
 800c4a0:	2d00      	cmp	r5, #0
 800c4a2:	f2c0 8095 	blt.w	800c5d0 <_printf_i+0x20c>
 800c4a6:	6821      	ldr	r1, [r4, #0]
 800c4a8:	f021 0104 	bic.w	r1, r1, #4
 800c4ac:	6021      	str	r1, [r4, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d13d      	bne.n	800c52e <_printf_i+0x16a>
 800c4b2:	2d00      	cmp	r5, #0
 800c4b4:	f040 808e 	bne.w	800c5d4 <_printf_i+0x210>
 800c4b8:	4665      	mov	r5, ip
 800c4ba:	2a08      	cmp	r2, #8
 800c4bc:	d10b      	bne.n	800c4d6 <_printf_i+0x112>
 800c4be:	6823      	ldr	r3, [r4, #0]
 800c4c0:	07db      	lsls	r3, r3, #31
 800c4c2:	d508      	bpl.n	800c4d6 <_printf_i+0x112>
 800c4c4:	6923      	ldr	r3, [r4, #16]
 800c4c6:	6862      	ldr	r2, [r4, #4]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	bfde      	ittt	le
 800c4cc:	2330      	movle	r3, #48	; 0x30
 800c4ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4d6:	ebac 0305 	sub.w	r3, ip, r5
 800c4da:	6123      	str	r3, [r4, #16]
 800c4dc:	f8cd 8000 	str.w	r8, [sp]
 800c4e0:	463b      	mov	r3, r7
 800c4e2:	aa03      	add	r2, sp, #12
 800c4e4:	4621      	mov	r1, r4
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	f7ff fef6 	bl	800c2d8 <_printf_common>
 800c4ec:	3001      	adds	r0, #1
 800c4ee:	d14d      	bne.n	800c58c <_printf_i+0x1c8>
 800c4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f4:	b005      	add	sp, #20
 800c4f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4fa:	4839      	ldr	r0, [pc, #228]	; (800c5e0 <_printf_i+0x21c>)
 800c4fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c500:	6813      	ldr	r3, [r2, #0]
 800c502:	6821      	ldr	r1, [r4, #0]
 800c504:	1d1d      	adds	r5, r3, #4
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	6015      	str	r5, [r2, #0]
 800c50a:	060a      	lsls	r2, r1, #24
 800c50c:	d50b      	bpl.n	800c526 <_printf_i+0x162>
 800c50e:	07ca      	lsls	r2, r1, #31
 800c510:	bf44      	itt	mi
 800c512:	f041 0120 	orrmi.w	r1, r1, #32
 800c516:	6021      	strmi	r1, [r4, #0]
 800c518:	b91b      	cbnz	r3, 800c522 <_printf_i+0x15e>
 800c51a:	6822      	ldr	r2, [r4, #0]
 800c51c:	f022 0220 	bic.w	r2, r2, #32
 800c520:	6022      	str	r2, [r4, #0]
 800c522:	2210      	movs	r2, #16
 800c524:	e7b7      	b.n	800c496 <_printf_i+0xd2>
 800c526:	064d      	lsls	r5, r1, #25
 800c528:	bf48      	it	mi
 800c52a:	b29b      	uxthmi	r3, r3
 800c52c:	e7ef      	b.n	800c50e <_printf_i+0x14a>
 800c52e:	4665      	mov	r5, ip
 800c530:	fbb3 f1f2 	udiv	r1, r3, r2
 800c534:	fb02 3311 	mls	r3, r2, r1, r3
 800c538:	5cc3      	ldrb	r3, [r0, r3]
 800c53a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c53e:	460b      	mov	r3, r1
 800c540:	2900      	cmp	r1, #0
 800c542:	d1f5      	bne.n	800c530 <_printf_i+0x16c>
 800c544:	e7b9      	b.n	800c4ba <_printf_i+0xf6>
 800c546:	6813      	ldr	r3, [r2, #0]
 800c548:	6825      	ldr	r5, [r4, #0]
 800c54a:	6961      	ldr	r1, [r4, #20]
 800c54c:	1d18      	adds	r0, r3, #4
 800c54e:	6010      	str	r0, [r2, #0]
 800c550:	0628      	lsls	r0, r5, #24
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	d501      	bpl.n	800c55a <_printf_i+0x196>
 800c556:	6019      	str	r1, [r3, #0]
 800c558:	e002      	b.n	800c560 <_printf_i+0x19c>
 800c55a:	066a      	lsls	r2, r5, #25
 800c55c:	d5fb      	bpl.n	800c556 <_printf_i+0x192>
 800c55e:	8019      	strh	r1, [r3, #0]
 800c560:	2300      	movs	r3, #0
 800c562:	6123      	str	r3, [r4, #16]
 800c564:	4665      	mov	r5, ip
 800c566:	e7b9      	b.n	800c4dc <_printf_i+0x118>
 800c568:	6813      	ldr	r3, [r2, #0]
 800c56a:	1d19      	adds	r1, r3, #4
 800c56c:	6011      	str	r1, [r2, #0]
 800c56e:	681d      	ldr	r5, [r3, #0]
 800c570:	6862      	ldr	r2, [r4, #4]
 800c572:	2100      	movs	r1, #0
 800c574:	4628      	mov	r0, r5
 800c576:	f7f6 ff6b 	bl	8003450 <memchr>
 800c57a:	b108      	cbz	r0, 800c580 <_printf_i+0x1bc>
 800c57c:	1b40      	subs	r0, r0, r5
 800c57e:	6060      	str	r0, [r4, #4]
 800c580:	6863      	ldr	r3, [r4, #4]
 800c582:	6123      	str	r3, [r4, #16]
 800c584:	2300      	movs	r3, #0
 800c586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c58a:	e7a7      	b.n	800c4dc <_printf_i+0x118>
 800c58c:	6923      	ldr	r3, [r4, #16]
 800c58e:	462a      	mov	r2, r5
 800c590:	4639      	mov	r1, r7
 800c592:	4630      	mov	r0, r6
 800c594:	47c0      	blx	r8
 800c596:	3001      	adds	r0, #1
 800c598:	d0aa      	beq.n	800c4f0 <_printf_i+0x12c>
 800c59a:	6823      	ldr	r3, [r4, #0]
 800c59c:	079b      	lsls	r3, r3, #30
 800c59e:	d413      	bmi.n	800c5c8 <_printf_i+0x204>
 800c5a0:	68e0      	ldr	r0, [r4, #12]
 800c5a2:	9b03      	ldr	r3, [sp, #12]
 800c5a4:	4298      	cmp	r0, r3
 800c5a6:	bfb8      	it	lt
 800c5a8:	4618      	movlt	r0, r3
 800c5aa:	e7a3      	b.n	800c4f4 <_printf_i+0x130>
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	464a      	mov	r2, r9
 800c5b0:	4639      	mov	r1, r7
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	47c0      	blx	r8
 800c5b6:	3001      	adds	r0, #1
 800c5b8:	d09a      	beq.n	800c4f0 <_printf_i+0x12c>
 800c5ba:	3501      	adds	r5, #1
 800c5bc:	68e3      	ldr	r3, [r4, #12]
 800c5be:	9a03      	ldr	r2, [sp, #12]
 800c5c0:	1a9b      	subs	r3, r3, r2
 800c5c2:	42ab      	cmp	r3, r5
 800c5c4:	dcf2      	bgt.n	800c5ac <_printf_i+0x1e8>
 800c5c6:	e7eb      	b.n	800c5a0 <_printf_i+0x1dc>
 800c5c8:	2500      	movs	r5, #0
 800c5ca:	f104 0919 	add.w	r9, r4, #25
 800c5ce:	e7f5      	b.n	800c5bc <_printf_i+0x1f8>
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d1ac      	bne.n	800c52e <_printf_i+0x16a>
 800c5d4:	7803      	ldrb	r3, [r0, #0]
 800c5d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5de:	e76c      	b.n	800c4ba <_printf_i+0xf6>
 800c5e0:	0800d071 	.word	0x0800d071
 800c5e4:	0800d082 	.word	0x0800d082

0800c5e8 <__sread>:
 800c5e8:	b510      	push	{r4, lr}
 800c5ea:	460c      	mov	r4, r1
 800c5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5f0:	f000 f894 	bl	800c71c <_read_r>
 800c5f4:	2800      	cmp	r0, #0
 800c5f6:	bfab      	itete	ge
 800c5f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c5fa:	89a3      	ldrhlt	r3, [r4, #12]
 800c5fc:	181b      	addge	r3, r3, r0
 800c5fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c602:	bfac      	ite	ge
 800c604:	6563      	strge	r3, [r4, #84]	; 0x54
 800c606:	81a3      	strhlt	r3, [r4, #12]
 800c608:	bd10      	pop	{r4, pc}

0800c60a <__swrite>:
 800c60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c60e:	461f      	mov	r7, r3
 800c610:	898b      	ldrh	r3, [r1, #12]
 800c612:	05db      	lsls	r3, r3, #23
 800c614:	4605      	mov	r5, r0
 800c616:	460c      	mov	r4, r1
 800c618:	4616      	mov	r6, r2
 800c61a:	d505      	bpl.n	800c628 <__swrite+0x1e>
 800c61c:	2302      	movs	r3, #2
 800c61e:	2200      	movs	r2, #0
 800c620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c624:	f000 f868 	bl	800c6f8 <_lseek_r>
 800c628:	89a3      	ldrh	r3, [r4, #12]
 800c62a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c62e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c632:	81a3      	strh	r3, [r4, #12]
 800c634:	4632      	mov	r2, r6
 800c636:	463b      	mov	r3, r7
 800c638:	4628      	mov	r0, r5
 800c63a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c63e:	f000 b817 	b.w	800c670 <_write_r>

0800c642 <__sseek>:
 800c642:	b510      	push	{r4, lr}
 800c644:	460c      	mov	r4, r1
 800c646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c64a:	f000 f855 	bl	800c6f8 <_lseek_r>
 800c64e:	1c43      	adds	r3, r0, #1
 800c650:	89a3      	ldrh	r3, [r4, #12]
 800c652:	bf15      	itete	ne
 800c654:	6560      	strne	r0, [r4, #84]	; 0x54
 800c656:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c65a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c65e:	81a3      	strheq	r3, [r4, #12]
 800c660:	bf18      	it	ne
 800c662:	81a3      	strhne	r3, [r4, #12]
 800c664:	bd10      	pop	{r4, pc}

0800c666 <__sclose>:
 800c666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c66a:	f000 b813 	b.w	800c694 <_close_r>
	...

0800c670 <_write_r>:
 800c670:	b538      	push	{r3, r4, r5, lr}
 800c672:	4c07      	ldr	r4, [pc, #28]	; (800c690 <_write_r+0x20>)
 800c674:	4605      	mov	r5, r0
 800c676:	4608      	mov	r0, r1
 800c678:	4611      	mov	r1, r2
 800c67a:	2200      	movs	r2, #0
 800c67c:	6022      	str	r2, [r4, #0]
 800c67e:	461a      	mov	r2, r3
 800c680:	f7fe fb8a 	bl	800ad98 <_write>
 800c684:	1c43      	adds	r3, r0, #1
 800c686:	d102      	bne.n	800c68e <_write_r+0x1e>
 800c688:	6823      	ldr	r3, [r4, #0]
 800c68a:	b103      	cbz	r3, 800c68e <_write_r+0x1e>
 800c68c:	602b      	str	r3, [r5, #0]
 800c68e:	bd38      	pop	{r3, r4, r5, pc}
 800c690:	200067f4 	.word	0x200067f4

0800c694 <_close_r>:
 800c694:	b538      	push	{r3, r4, r5, lr}
 800c696:	4c06      	ldr	r4, [pc, #24]	; (800c6b0 <_close_r+0x1c>)
 800c698:	2300      	movs	r3, #0
 800c69a:	4605      	mov	r5, r0
 800c69c:	4608      	mov	r0, r1
 800c69e:	6023      	str	r3, [r4, #0]
 800c6a0:	f7fe fe1a 	bl	800b2d8 <_close>
 800c6a4:	1c43      	adds	r3, r0, #1
 800c6a6:	d102      	bne.n	800c6ae <_close_r+0x1a>
 800c6a8:	6823      	ldr	r3, [r4, #0]
 800c6aa:	b103      	cbz	r3, 800c6ae <_close_r+0x1a>
 800c6ac:	602b      	str	r3, [r5, #0]
 800c6ae:	bd38      	pop	{r3, r4, r5, pc}
 800c6b0:	200067f4 	.word	0x200067f4

0800c6b4 <_fstat_r>:
 800c6b4:	b538      	push	{r3, r4, r5, lr}
 800c6b6:	4c07      	ldr	r4, [pc, #28]	; (800c6d4 <_fstat_r+0x20>)
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	4605      	mov	r5, r0
 800c6bc:	4608      	mov	r0, r1
 800c6be:	4611      	mov	r1, r2
 800c6c0:	6023      	str	r3, [r4, #0]
 800c6c2:	f7fe fe0c 	bl	800b2de <_fstat>
 800c6c6:	1c43      	adds	r3, r0, #1
 800c6c8:	d102      	bne.n	800c6d0 <_fstat_r+0x1c>
 800c6ca:	6823      	ldr	r3, [r4, #0]
 800c6cc:	b103      	cbz	r3, 800c6d0 <_fstat_r+0x1c>
 800c6ce:	602b      	str	r3, [r5, #0]
 800c6d0:	bd38      	pop	{r3, r4, r5, pc}
 800c6d2:	bf00      	nop
 800c6d4:	200067f4 	.word	0x200067f4

0800c6d8 <_isatty_r>:
 800c6d8:	b538      	push	{r3, r4, r5, lr}
 800c6da:	4c06      	ldr	r4, [pc, #24]	; (800c6f4 <_isatty_r+0x1c>)
 800c6dc:	2300      	movs	r3, #0
 800c6de:	4605      	mov	r5, r0
 800c6e0:	4608      	mov	r0, r1
 800c6e2:	6023      	str	r3, [r4, #0]
 800c6e4:	f7fe fe00 	bl	800b2e8 <_isatty>
 800c6e8:	1c43      	adds	r3, r0, #1
 800c6ea:	d102      	bne.n	800c6f2 <_isatty_r+0x1a>
 800c6ec:	6823      	ldr	r3, [r4, #0]
 800c6ee:	b103      	cbz	r3, 800c6f2 <_isatty_r+0x1a>
 800c6f0:	602b      	str	r3, [r5, #0]
 800c6f2:	bd38      	pop	{r3, r4, r5, pc}
 800c6f4:	200067f4 	.word	0x200067f4

0800c6f8 <_lseek_r>:
 800c6f8:	b538      	push	{r3, r4, r5, lr}
 800c6fa:	4c07      	ldr	r4, [pc, #28]	; (800c718 <_lseek_r+0x20>)
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	4608      	mov	r0, r1
 800c700:	4611      	mov	r1, r2
 800c702:	2200      	movs	r2, #0
 800c704:	6022      	str	r2, [r4, #0]
 800c706:	461a      	mov	r2, r3
 800c708:	f7fe fdf0 	bl	800b2ec <_lseek>
 800c70c:	1c43      	adds	r3, r0, #1
 800c70e:	d102      	bne.n	800c716 <_lseek_r+0x1e>
 800c710:	6823      	ldr	r3, [r4, #0]
 800c712:	b103      	cbz	r3, 800c716 <_lseek_r+0x1e>
 800c714:	602b      	str	r3, [r5, #0]
 800c716:	bd38      	pop	{r3, r4, r5, pc}
 800c718:	200067f4 	.word	0x200067f4

0800c71c <_read_r>:
 800c71c:	b538      	push	{r3, r4, r5, lr}
 800c71e:	4c07      	ldr	r4, [pc, #28]	; (800c73c <_read_r+0x20>)
 800c720:	4605      	mov	r5, r0
 800c722:	4608      	mov	r0, r1
 800c724:	4611      	mov	r1, r2
 800c726:	2200      	movs	r2, #0
 800c728:	6022      	str	r2, [r4, #0]
 800c72a:	461a      	mov	r2, r3
 800c72c:	f7fe fdab 	bl	800b286 <_read>
 800c730:	1c43      	adds	r3, r0, #1
 800c732:	d102      	bne.n	800c73a <_read_r+0x1e>
 800c734:	6823      	ldr	r3, [r4, #0]
 800c736:	b103      	cbz	r3, 800c73a <_read_r+0x1e>
 800c738:	602b      	str	r3, [r5, #0]
 800c73a:	bd38      	pop	{r3, r4, r5, pc}
 800c73c:	200067f4 	.word	0x200067f4

0800c740 <_init>:
 800c740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c742:	bf00      	nop
 800c744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c746:	bc08      	pop	{r3}
 800c748:	469e      	mov	lr, r3
 800c74a:	4770      	bx	lr

0800c74c <_fini>:
 800c74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74e:	bf00      	nop
 800c750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c752:	bc08      	pop	{r3}
 800c754:	469e      	mov	lr, r3
 800c756:	4770      	bx	lr
